0x100: push	{ r3, lr }
0x102: ldr	r1,[0x110]
0x104: ldr	r0,[0x114]
0x106: bl	0x3448
0x10a: movs	r0,#0x0
0x10c: pop	{ r3, pc }
0x10e: nop	
0x118: ldr	r3,[0x120]
0x11a: ldr	r3,[r3,#0x0]
0x11c: bx	r3
0x11e: nop	
0x124: ldr	r3,[0x12c]
0x126: str	r0,[r3,#0x0]
0x128: bx	lr
0x12a: nop	
0x130: push	{ r4, r5, lr }
0x132: sub	sp,#0x14
0x134: mov	r4,r0
0x136: mov	r5,r1
0x138: movs	r2,#0x10
0x13a: movs	r1,#0x0
0x13c: mov	r0,sp
0x13e: bl	0x4364
0x142: movs	r3,#0x2
0x144: strb.w	r3,[sp,#0x2]
0x148: mov	r2,r5
0x14a: ldr	r3,[0x15c]
0x14c: str	r3,[sp,#0x4]
0x14e: mov	r1,r4
0x150: mov	r0,sp
0x152: bl	0x346c
0x156: add	sp,#0x14
0x158: pop	{ r4, r5, pc }
0x15a: nop	
0x160: push	{ r7, lr }
0x162: mov	r5,r0
0x164: mov	r6,r1
0x166: mov	r7,r2
0x168: mov	r8,r3
0x16a: bl	0x3070
0x16e: mov	r3,r0
0x170: bl	0x4374
0x174: ldr.w	r9,[0x190]
0x178: mov	r4,r0
0x17a: str.w	r3,[r9,r0]
0x17e: mov	r2,r8
0x180: mov	r0,r6
0x182: mov	r1,r7
0x184: blx	r5
0x186: ldr.w	r0,[r4,r9]
0x18a: bl	0x710
0x18e: nop	
0x194: push	{ r4, r5, r6, r7, r8, r9, r10, lr  }
0x198: ldrh	r5,[r0,#0x18]
0x19a: mov	r4,r0
0x19c: lsls	r0,r5,#0x1c
0x19e: mov	r8,r2
0x1a0: bmi	0x1c6
0x1a2: cmp	r1,#0x2
0x1a4: and	r5,r5,#0x7
0x1a8: bne.w	0x344
0x1ac: mov	r0,r4
0x1ae: bl	0x3a16
0x1b2: cbz	r0,0x1d4
0x1b4: subs	r0,#0x1
0x1b6: ldrh	r1,[r4,#0x18]
0x1b8: cmp	r0,#0x4
0x1ba: bhi	0x1e0
0x1bc: tbb	[0x1c0,r0]
0x1c6: cmp	r1,#0x1
0x1c8: ite	eq
0x1ca: orr.eq	r5,r5,#0x10
0x1ce: orr.ne	r5,r5,#0x20
0x1d2: strh	r5,[r4,#0x18]
0x1d4: msr	basepri,r8
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x1d8: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1dc: pop.w	{ r4, r5, r6, r7, r8, r9, r10, pc }
0x1d4: msr	basepri,r8
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x1d8: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1dc: pop.w	{ r4, r5, r6, r7, r8, r9, r10, pc }
0x1e0: and	r10,r1,#0x7
0x1e4: cmp	r10,r5
0x1e6: beq.w	0x334
0x1ea: movs	r7,#0x0
0x1ec: mov	r9,r7
0x1ee: mov	r6,r7
0x1f0: ldr	r3,[r4,#0x8]
0x1f2: cmp	r3,#0x0
0x1f4: beq.w	0x370
0x1f0: ldr	r3,[r4,#0x8]
0x1f2: cmp	r3,#0x0
0x1f4: beq.w	0x370
0x1f8: orr	r1,r1,#0x8
0x1fc: strh	r1,[r4,#0x18]
0x1fe: msr	basepri,r8
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x202: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x206: ldr	r1,[r4,#0x8]
0x208: cmp	r1,#0x0
0x20a: beq.w	0x382
0x20e: ldr	r5,[r1,#0x0]
0x210: cmp	r1,#0x0
0x212: beq.w	0x382
0x210: cmp	r1,#0x0
0x212: beq.w	0x382
0x216: ldr.w	r8,[r1,#0x4]
0x21a: mov	r3,r6
0x21c: mov	r2,r10
0x21e: mov	r0,r4
0x220: blx	r8
0x222: cmp	r5,#0x0
0x224: beq	0x314
0x226: ldr	r3,[r5,#0x0]
0x228: mov	r1,r5
0x22a: mov	r5,r3
0x22c: b	0x210
0x228: mov	r1,r5
0x22a: mov	r5,r3
0x22c: b	0x210
0x22e: and	r3,r1,#0x7
0x232: subs	r2,r3,#0x5
0x234: cmp	r2,#0x1
0x236: bhi	0x270
0x238: movs	r2,#0x0
0x23a: bic	r1,r1,#0x7
0x23e: cmp	r3,#0x6
0x240: ldr	r7,[r4,#0x0]
0x242: uxth	r1, r1
0x244: strd	r2,r2,[r4,#0x0]
0x248: bne	0x25e
0x24a: mov	r3,r7
0x24c: b	0x256
0x24e: ldrh	r2,[r4,#0x1a]
0x250: adds	r2,#0x1
0x252: strh	r2,[r4,#0x1a]
0x254: ldr	r3,[r3,#0x0]
0x256: cmp	r3,#0x0
0x258: bne	0x24e
0x256: cmp	r3,#0x0
0x258: bne	0x24e
0x25a: orr	r1,r1,#0x2
0x25e: strh	r1,[r4,#0x18]
0x260: mov	r0,r4
0x262: bl	0x3a16
0x25e: strh	r1,[r4,#0x18]
0x260: mov	r0,r4
0x262: bl	0x3a16
0x266: cmp	r0,#0x0
0x268: beq	0x360
0x26a: orr	r1,r1,#0x20
0x26e: b	0x35e
0x270: cmp	r3,#0x4
0x272: bne	0x28a
0x274: bic	r1,r1,#0x7
0x278: uxth	r1, r1
0x27a: strh	r1,[r4,#0x18]
0x27c: mov	r0,r4
0x27e: bl	0x3a16
0x282: cbz	r0,0x28a
0x284: orr	r1,r1,#0x20
0x288: strh	r1,[r4,#0x18]
0x28a: ldrh	r1,[r4,#0x18]
0x28c: and	r10,r1,#0x7
0x290: cmp	r10,r5
0x292: beq	0x334
0x28a: ldrh	r1,[r4,#0x18]
0x28c: and	r10,r1,#0x7
0x290: cmp	r10,r5
0x292: beq	0x334
0x294: movs	r7,#0x0
0x296: mov	r9,r7
0x298: b	0x1f0
0x29a: ldr	r3,[r4,#0x10]
0x29c: bic	r1,r1,#0x7
0x2a0: orr	r1,r1,#0x6
0x2a4: cmp	r5,#0x6
0x2a6: ldr.w	r9,[r3,#0x0]
0x2aa: strh	r1,[r4,#0x18]
0x2ac: bne	0x30a
0x2ae: cmp.w	r9,#0x0
0x2b2: beq	0x334
0x2b4: orr	r1,r1,#0x8
0x2b8: strh	r1,[r4,#0x18]
0x2ba: msr	basepri,r8
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x2be: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2c2: ldr	r1,[0x3ac]
0x2c4: mov	r0,r4
0x2c6: blx	r9
0x2c8: b	0x31e
0x2ca: bic	r1,r1,#0x7
0x2ce: ldr	r3,[r4,#0x10]
0x2d0: orr	r1,r1,#0x4
0x2d4: uxth	r1, r1
0x2d6: cmp	r5,#0x4
0x2d8: ldr.w	r9,[r3,#0x4]
0x2dc: strh	r1,[r4,#0x18]
0x2de: beq	0x2ae
0x2e0: movs	r7,#0x0
0x2e2: mov	r6,r7
0x2e4: mov.w	r10,#0x4
0x2e8: b	0x1f0
0x2ea: bic	r1,r1,#0x7
0x2ee: ldr	r3,[r4,#0x10]
0x2f0: orr	r1,r1,#0x5
0x2f4: uxth	r1, r1
0x2f6: cmp	r5,#0x5
0x2f8: ldr.w	r9,[r3,#0x8]
0x2fc: strh	r1,[r4,#0x18]
0x2fe: beq	0x2ae
0x300: movs	r7,#0x0
0x302: mov	r6,r7
0x304: mov.w	r10,#0x5
0x308: b	0x1f0
0x30a: movs	r7,#0x0
0x30c: mov	r6,r7
0x30e: mov.w	r10,#0x6
0x312: b	0x1f0
0x314: mov	r3,r5
0x316: b	0x228
0x318: cmp.w	r9,#0x0
0x31c: bne	0x2c2
0x31e: mrs	r8,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r8, size=4), in=[Constant(value=0x111, size=4)])
0x322: movs	r3,#0x20
0x324: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x328: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x32c: ldrh	r3,[r4,#0x18]
0x32e: bic	r3,r3,#0x8
0x332: strh	r3,[r4,#0x18]
0x334: ldrh	r5,[r4,#0x18]
0x336: lsls	r2,r5,#0x1b
0x338: bpl	0x398
0x334: ldrh	r5,[r4,#0x18]
0x336: lsls	r2,r5,#0x1b
0x338: bpl	0x398
0x33a: bic	r3,r5,#0x10
0x33e: strh	r3,[r4,#0x18]
0x340: and	r5,r5,#0x7
0x344: ldr	r6,[r4,#0x14]
0x346: ldrh	r1,[r4,#0x18]
0x348: cmp	r6,#0x0
0x34a: bge.w	0x22e
0x344: ldr	r6,[r4,#0x14]
0x346: ldrh	r1,[r4,#0x18]
0x348: cmp	r6,#0x0
0x34a: bge.w	0x22e
0x34e: movs	r3,#0x0
0x350: ldr	r7,[r4,#0x0]
0x352: strd	r3,r3,[r4,#0x0]
0x356: bic	r1,r1,#0x7
0x35a: orr	r1,r1,#0x1
0x35e: strh	r1,[r4,#0x18]
0x360: ldrh	r1,[r4,#0x18]
0x362: and	r10,r1,#0x7
0x366: cmp	r10,r5
0x368: mov.w	r9,#0x0
0x36c: bne.w	0x1f0
0x35e: strh	r1,[r4,#0x18]
0x360: ldrh	r1,[r4,#0x18]
0x362: and	r10,r1,#0x7
0x366: cmp	r10,r5
0x368: mov.w	r9,#0x0
0x36c: bne.w	0x1f0
0x360: ldrh	r1,[r4,#0x18]
0x362: and	r10,r1,#0x7
0x366: cmp	r10,r5
0x368: mov.w	r9,#0x0
0x36c: bne.w	0x1f0
0x370: cmp	r7,#0x0
0x372: beq	0x2ae
0x374: orr	r1,r1,#0x8
0x378: strh	r1,[r4,#0x18]
0x37a: msr	basepri,r8
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x37e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x382: cmp	r7,#0x0
0x384: beq	0x318
0x386: ldr	r5,[r7,#0x0]
0x388: mov	r1,r7
0x38a: mov	r3,r6
0x38c: mov	r2,r10
0x38e: mov	r0,r4
0x390: bl	0x3a6e
0x394: mov	r7,r5
0x396: b	0x382
0x398: lsls	r3,r5,#0x1a
0x39a: bpl.w	0x1d4
0x39e: bic	r3,r5,#0x20
0x3a2: strh	r3,[r4,#0x18]
0x3a4: and	r5,r5,#0x7
0x3a8: b	0x1ac
0x3aa: nop	
0x3b0: ldr	r3,[0x3b8]
0x3b2: str	r3,[r0,#0x0]
0x3b4: movs	r0,#0x0
0x3b6: bx	lr
0x3bc: wfi	
CallOther(in=[Constant(value=0x31, size=4)])
0x3be: b.w	0x3bc
0x3c2: nop	
0x3c4: push	{ r4, r5, r6, r7, r8, lr  }
0x3c8: ldr	r6,[0x3f8]
0x3ca: ldr.w	r8,[0x3fc]
0x3ce: add.w	r7,r6,r8
0x3d2: subs	r4,r1,r7
0x3d4: mov	r5,r0
0x3d6: mov	r2,r6
0x3d8: ldr	r1,[0x400]
0x3da: mov	r0,r4
0x3dc: bl	0x4348
0x3e0: adds	r0,r4,r6
0x3e2: mov	r2,r8
0x3e4: movs	r1,#0x0
0x3e6: subs	r4,#0x8
0x3e8: bl	0x4364
0x3ec: str	r4,[r5,#0x70]
0x3ee: add.w	r0,r7,#0x8
0x3f2: pop.w	{ r4, r5, r6, r7, r8, pc }
0x3f6: nop	
0x404: ldr	r2,[0x424]
0x406: ldr	r3,[r2,#0x8]
0x408: ldrsb.w	r1,[r3,#0xe]
0x40c: cmp	r1,#0x0
0x40e: blt	0x420
0x410: ldr	r2,[r2,#0x14]
0x412: cmp	r3,r2
0x414: itttt	ne
0x416: ldr.ne	r2,[0x428]
0x418: ldr.ne	r3,[r2,#0x4]
0x41a: orr.ne	r3,r3,#0x10000000
0x41e: str.ne	r3,[r2,#0x4]
0x420: bx	lr
0x420: bx	lr
0x422: nop	
0x42c: push	{ r4, r5, r6, lr }
0x42e: ldr	r3,[0x4c8]
0x430: mov	r5,r2
0x432: ldr	r2,[r3,#0x28]
0x434: tst	r2,#0x10
0x438: ldr	r2,[r3,#0x28]
0x43a: ite	ne
0x43c: mov.ne	r4,#0x11
0x43e: mov.eq	r4,#0x10
0x440: tst	r2,#0x8
0x444: ldr	r2,[r3,#0x28]
0x446: it	ne
0x448: mov.ne	r4,#0x12
0x44a: lsls	r2,r2,#0x1e
0x44c: mov	r6,r0
0x44e: bpl	0x466
0x450: ldr	r0,[r3,#0x34]
0x452: ldr	r2,[r3,#0x28]
0x454: lsls	r4,r2,#0x18
0x456: bpl	0x4c2
0x458: cbz	r1,0x462
0x45a: ldr	r2,[r3,#0x28]
0x45c: bic	r2,r2,#0x80
0x460: str	r2,[r3,#0x28]
0x462: movs	r4,#0x13
0x464: b	0x46a
0x462: movs	r4,#0x13
0x464: b	0x46a
0x466: mvn	r0,#0x15
0x46a: ldr	r3,[0x4c8]
0x46c: ldr	r2,[r3,#0x28]
0x46e: tst	r2,#0x1
0x472: ldr	r2,[r3,#0x28]
0x474: it	ne
0x476: mov.ne	r4,#0x14
0x478: tst	r2,#0x20
0x47c: ldr	r2,[r3,#0x28]
0x47e: it	ne
0x480: mov.ne	r4,#0x15
0x482: lsls	r2,r2,#0x1b
0x484: bmi	0x48c
0x46a: ldr	r3,[0x4c8]
0x46c: ldr	r2,[r3,#0x28]
0x46e: tst	r2,#0x1
0x472: ldr	r2,[r3,#0x28]
0x474: it	ne
0x476: mov.ne	r4,#0x14
0x478: tst	r2,#0x20
0x47c: ldr	r2,[r3,#0x28]
0x47e: it	ne
0x480: mov.ne	r4,#0x15
0x482: lsls	r2,r2,#0x1b
0x484: bmi	0x48c
0x486: ldr	r3,[r3,#0x28]
0x488: lsls	r3,r3,#0x1e
0x48a: bpl	0x4a2
0x48c: ldr	r3,[0x4c8]
0x48e: ldr	r3,[r3,#0x4]
0x490: lsls	r1,r3,#0x14
0x492: bpl	0x4a2
0x494: mov	r1,r6
0x496: bl	0x8f0
0x49a: cbz	r0,0x4a2
0x49c: msr	psp,r0
CallOther(out=Varnode(space=unique, offset=0x92a80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x116, size=4), Register(name=r0, size=4)])
0x4a0: movs	r4,#0x2
0x4a2: ldr	r3,[0x4c8]
0x4a4: ldr	r2,[r3,#0x28]
0x4a6: lsls	r2,r2,#0x1a
0x4a8: ittt	mi
0x4aa: ldr.mi	r2,[r3,#0x24]
0x4ac: bic.mi	r2,r2,#0x2000
0x4b0: str.mi	r2,[r3,#0x24]
0x4b2: ldr	r2,[r3,#0x28]
0x4b4: orr	r2,r2,#0xff
0x4b8: str	r2,[r3,#0x28]
0x4ba: movs	r3,#0x0
0x4bc: strb	r3,[r5,#0x0]
0x4be: mov	r0,r4
0x4c0: pop	{ r4, r5, r6, pc }
0x4a2: ldr	r3,[0x4c8]
0x4a4: ldr	r2,[r3,#0x28]
0x4a6: lsls	r2,r2,#0x1a
0x4a8: ittt	mi
0x4aa: ldr.mi	r2,[r3,#0x24]
0x4ac: bic.mi	r2,r2,#0x2000
0x4b0: str.mi	r2,[r3,#0x24]
0x4b2: ldr	r2,[r3,#0x28]
0x4b4: orr	r2,r2,#0xff
0x4b8: str	r2,[r3,#0x28]
0x4ba: movs	r3,#0x0
0x4bc: strb	r3,[r5,#0x0]
0x4be: mov	r0,r4
0x4c0: pop	{ r4, r5, r6, pc }
0x4c2: mvn	r0,#0x15
0x4c6: b	0x462
0x4cc: ldr	r3,[0x51c]
0x4ce: ldr	r2,[r3,#0x28]
0x4d0: tst	r2,#0x2000000
0x4d4: ldr	r2,[r3,#0x28]
0x4d6: ite	ne
0x4d8: mov.ne	r0,#0x1e
0x4da: mov.eq	r0,#0x1d
0x4dc: tst	r2,#0x1000000
0x4e0: ldr	r2,[r3,#0x28]
0x4e2: it	ne
0x4e4: mov.ne	r0,#0x1f
0x4e6: tst	r2,#0x80000
0x4ea: ldr	r2,[r3,#0x28]
0x4ec: it	ne
0x4ee: mov.ne	r0,#0x21
0x4f0: tst	r2,#0x40000
0x4f4: ldr	r2,[r3,#0x28]
0x4f6: it	ne
0x4f8: mov.ne	r0,#0x22
0x4fa: tst	r2,#0x20000
0x4fe: ldr	r2,[r3,#0x28]
0x500: it	ne
0x502: mov.ne	r0,#0x23
0x504: tst	r2,#0x10000
0x508: ldr	r2,[r3,#0x28]
0x50a: mvn.w	r2,r2, lsl #0x10
0x50e: mvn.w	r2,r2, lsr #0x10
0x512: str	r2,[r3,#0x28]
0x514: it	ne
0x516: mov.ne	r0,#0x24
0x518: bx	lr
0x51a: nop	
0x520: push	{ r4, lr }
0x522: ldr	r3,[0x588]
0x524: mov	r2,r0
0x526: ldr	r0,[r3,#0x28]
0x528: ldr	r4,[r3,#0x28]
0x52a: tst	r0,#0x1000
0x52e: ite	ne
0x530: mov.ne	r0,#0x17
0x532: mov.eq	r0,#0x16
0x534: tst	r4,#0x800
0x538: ldr	r4,[r3,#0x28]
0x53a: it	ne
0x53c: mov.ne	r0,#0x18
0x53e: lsls	r4,r4,#0x16
0x540: bpl	0x556
0x542: ldr	r0,[r3,#0x38]
0x544: ldr	r0,[r3,#0x28]
0x546: lsls	r0,r0,#0x10
0x548: bpl	0x554
0x54a: cbz	r2,0x554
0x54c: ldr	r2,[r3,#0x28]
0x54e: bic	r2,r2,#0x8000
0x552: str	r2,[r3,#0x28]
0x554: movs	r0,#0x19
0x556: ldr	r3,[0x588]
0x558: ldr	r2,[r3,#0x28]
0x55a: tst	r2,#0x400
0x55e: ldr	r2,[r3,#0x28]
0x560: it	ne
0x562: mov.ne	r0,#0x1a
0x564: lsls	r2,r2,#0x17
0x566: bmi	0x582
0x554: movs	r0,#0x19
0x556: ldr	r3,[0x588]
0x558: ldr	r2,[r3,#0x28]
0x55a: tst	r2,#0x400
0x55e: ldr	r2,[r3,#0x28]
0x560: it	ne
0x562: mov.ne	r0,#0x1a
0x564: lsls	r2,r2,#0x17
0x566: bmi	0x582
0x556: ldr	r3,[0x588]
0x558: ldr	r2,[r3,#0x28]
0x55a: tst	r2,#0x400
0x55e: ldr	r2,[r3,#0x28]
0x560: it	ne
0x562: mov.ne	r0,#0x1a
0x564: lsls	r2,r2,#0x17
0x566: bmi	0x582
0x568: ldr	r3,[r3,#0x28]
0x56a: tst	r3,#0x2000
0x56e: it	ne
0x570: mov.ne	r0,#0x1c
0x572: ldr	r2,[0x588]
0x574: ldr	r3,[r2,#0x28]
0x576: orr	r3,r3,#0xff00
0x57a: str	r3,[r2,#0x28]
0x57c: movs	r3,#0x0
0x57e: strb	r3,[r1,#0x0]
0x580: pop	{ r4, pc }
0x572: ldr	r2,[0x588]
0x574: ldr	r3,[r2,#0x28]
0x576: orr	r3,r3,#0xff00
0x57a: str	r3,[r2,#0x28]
0x57c: movs	r3,#0x0
0x57e: strb	r3,[r1,#0x0]
0x580: pop	{ r4, pc }
0x582: movs	r0,#0x1b
0x584: b	0x572
0x586: nop	
0x58c: push	{ r4, r5, r6, r7, lr }
0x58e: ldr	r3,[0x6b0]
0x590: ldr	r3,[r3,#0x4]
0x592: sub	sp,#0x2c
0x594: mov	r4,r0
0x596: ubfx	r3,r3,#0x0,#0x9
0x59a: movs	r5,#0x0
0x59c: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x5a0: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x5a4: and	r0,r2,#0xff000000
0x5a8: cmp.w	r0,#0xff000000
0x5ac: bne	0x5d2
0x5ae: and	r0,r2,#0xc
0x5b2: cmp	r0,#0x8
0x5b4: beq	0x5d2
0x5b6: lsls	r0,r2,#0x1c
0x5b8: ite	mi
0x5ba: mov.mi	r4,r1
0x5bc: mov.pl	r5,#0x1
0x5be: movs	r2,#0x0
0x5c0: subs	r3,#0x3
0x5c2: strb.w	r2,[sp,#0x7]
0x5c6: cmp	r3,#0x3
0x5c8: bhi	0x5d6
0x5be: movs	r2,#0x0
0x5c0: subs	r3,#0x3
0x5c2: strb.w	r2,[sp,#0x7]
0x5c6: cmp	r3,#0x3
0x5c8: bhi	0x5d6
0x5ca: tbb	[0x5ce,r3]
0x5d2: mov	r4,r5
0x5d4: b	0x5be
0x5d6: movs	r3,#0x0
0x5d8: ldrb.w	r2,[sp,#0x7]
0x5dc: cbnz	r2,0x612
0x5d8: ldrb.w	r2,[sp,#0x7]
0x5dc: cbnz	r2,0x612
0x5de: add	r6,sp,#0x8
0x5e0: add.w	r7,r4,#0x20
0x5e4: ldr	r0,[r4,#0x0]
0x5e6: ldr	r1,[r4,#0x4]
0x5e8: mov	r2,r6
0x5ea: stmia	r2!,{ r0, r1 }
0x5ec: adds	r4,#0x8
0x5ee: cmp	r4,r7
0x5f0: mov	r6,r2
0x5f2: bne	0x5e4
0x5e4: ldr	r0,[r4,#0x0]
0x5e6: ldr	r1,[r4,#0x4]
0x5e8: mov	r2,r6
0x5ea: stmia	r2!,{ r0, r1 }
0x5ec: adds	r4,#0x8
0x5ee: cmp	r4,r7
0x5f0: mov	r6,r2
0x5f2: bne	0x5e4
0x5f4: ldr	r2,[sp,#0x24]
0x5f6: cmp	r5,#0x0
0x5f8: beq	0x6a4
0x5fa: ubfx	r1,r2,#0x0,#0x9
0x5fe: cbnz	r1,0x60a
0x600: mvn.w	r2,r2, lsr #0x9
0x604: mvn.w	r2,r2, lsl #0x9
0x608: str	r2,[sp,#0x24]
0x60a: add	r1,sp,#0x8
0x60c: mov	r0,r3
0x60e: bl	0x3bc6
0x608: str	r2,[sp,#0x24]
0x60a: add	r1,sp,#0x8
0x60c: mov	r0,r3
0x60e: bl	0x3bc6
0x60a: add	r1,sp,#0x8
0x60c: mov	r0,r3
0x60e: bl	0x3bc6
0x612: add	sp,#0x2c
0x614: pop	{ r4, r5, r6, r7, pc }
0x616: ldr	r3,[0x6b0]
0x618: ldr	r2,[r3,#0x2c]
0x61a: lsls	r1,r2,#0x1e
0x61c: bmi	0x5d6
0x61e: ldr	r2,[r3,#0x2c]
0x620: cmp	r2,#0x0
0x622: blt	0x5d6
0x624: ldr	r2,[r3,#0x2c]
0x626: lsls	r2,r2,#0x1
0x628: bpl	0x5d6
0x62a: ldr	r2,[r3,#0x14]
0x62c: ldr	r1,[r4,#0x18]
0x62e: orr	r2,r2,#0x100
0x632: str	r2,[r3,#0x14]
0x634: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0x638: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x63c: ldr	r2,[r3,#0x14]
0x63e: ldrh.w	r1,[r1,#-0x2]
0x642: bic	r2,r2,#0x100
0x646: str	r2,[r3,#0x14]
0x648: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0x64c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x650: movw	r2,#0xdf02
0x654: cmp	r1,r2
0x656: beq	0x66e
0x658: ldr	r2,[r3,#0x28]
0x65a: uxtb	r2, r2
0x65c: cbz	r2,0x672
0x65e: add.w	r2,sp,#0x7
0x662: movs	r1,#0x1
0x664: mov	r0,r4
0x666: bl	0x42c
0x664: mov	r0,r4
0x666: bl	0x42c
0x66a: mov	r3,r0
0x66c: b	0x5d8
0x66e: ldr	r3,[r4,#0x0]
0x670: b	0x5d8
0x672: ldr	r2,[r3,#0x28]
0x674: tst	r2,#0xff00
0x678: beq	0x686
0x67a: add.w	r1,sp,#0x7
0x67e: movs	r0,#0x1
0x680: bl	0x520
0x680: bl	0x520
0x684: b	0x66a
0x686: ldr	r3,[r3,#0x28]
0x688: cmp.w	r3,#0x10000
0x68c: bcc	0x5d6
0x68e: bl	0x4cc
0x692: b	0x66a
0x694: add.w	r2,sp,#0x7
0x698: movs	r1,#0x0
0x69a: b	0x664
0x69c: add.w	r1,sp,#0x7
0x6a0: movs	r0,#0x0
0x6a2: b	0x680
0x6a4: bic	r2,r2,#0x1fe
0x6a8: bic	r2,r2,#0x1
0x6ac: b	0x608
0x6ae: nop	
0x6b4: ldr	r3,[0x6c8]
0x6b6: ldr	r2,[r3,#0x14]
0x6b8: orr	r2,r2,#0x10
0x6bc: str	r2,[r3,#0x14]
0x6be: ldr	r2,[r3,#0x14]
0x6c0: bic	r2,r2,#0x8
0x6c4: str	r2,[r3,#0x14]
0x6c6: bx	lr
0x6cc: mrs	r0,msp
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x10f, size=4)])
0x6d0: mrs	r1,psp
CallOther(out=Register(name=r1, size=4), in=[Constant(value=0x110, size=4)])
0x6d4: push	{ r0, lr }
0x6d6: mov	r2,lr
0x6d8: bl	0x58c
0x6dc: pop	{ r0, pc }
0x6de: nop	
0x6e0: bl	0x1b48
0x6e4: movs	r0,#0x20
0x6e6: msr	basepri,r0
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r0, size=4)])
0x6ea: ldr	r0,[0x70c]
0x6ec: mov.w	r1,#0x840
0x6f0: adds	r0,r0,r1
0x6f2: msr	psp,r0
CallOther(out=Varnode(space=unique, offset=0x92a80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x116, size=4), Register(name=r0, size=4)])
0x6f6: mrs	r0,control
CallOther(out=Varnode(space=unique, offset=0x92280, size=1), in=[Constant(value=0x113, size=4)])
CallOther(out=Varnode(space=unique, offset=0x92400, size=1), in=[Constant(value=0x114, size=4)])
0x6fa: movs	r1,#0x2
0x6fc: orrs	r0,r1
0x6fe: msr	control,r0
CallOther(out=Varnode(space=unique, offset=0x93700, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x28, size=4), Varnode(space=unique, offset=0x93900, size=1)])
CallOther(out=Varnode(space=unique, offset=0x93700, size=1), in=[Constant(value=0x29, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93a80, size=1), in=[Constant(value=0x114, size=4)])
CallOther(in=[Constant(value=0x118, size=4), Varnode(space=unique, offset=0x93b80, size=1)])
0x702: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x706: bl	0x870
0x70c: lsrs	r0,r0,#0x1
0x70e: movs	r0,#0x0
0x710: ldr	r3,[0x734]
0x712: ldr	r3,[r3,#0x8]
0x714: cmp	r3,r0
0x716: bne	0x730
0x718: mrs	r3,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x71c: cbz	r3,0x730
0x71e: ldr	r3,[0x738]
0x720: ldr	r2,[r3,#0x4]
0x722: orr	r2,r2,#0x10000000
0x726: str	r2,[r3,#0x4]
0x728: ldr	r2,[r3,#0x24]
0x72a: bic	r2,r2,#0x8000
0x72e: str	r2,[r3,#0x24]
0x730: b.w	0x420c
0x730: b.w	0x420c
0x73c: ldr	r2,[0x764]
0x73e: ldr	r3,[r2,#0x8]
0x740: mvn	r1,#0xa
0x744: str	r1,[r3,#0x78]
0x746: ldr	r1,[0x768]
0x748: str	r0,[r3,#0x74]
0x74a: ldr	r3,[r1,#0x4]
0x74c: orr	r3,r3,#0x10000000
0x750: str	r3,[r1,#0x4]
0x752: movs	r3,#0x0
0x754: msr	basepri,r3
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x758: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x75c: ldr	r3,[r2,#0x8]
0x75e: ldr	r0,[r3,#0x78]
0x760: bx	lr
0x762: nop	
0x76c: push	{ r4, lr }
0x76e: mov	r4,r0
0x770: mrs	r3,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r3, size=4), in=[Constant(value=0x111, size=4)])
0x774: movs	r3,#0x20
0x776: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x77a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x77e: ldr	r3,[0x7a8]
0x780: ldr	r0,[r3,#0x14]
0x782: str	r0,[r3,#0x8]
0x784: ldr	r3,[0x7ac]
0x786: mov.w	r2,#0x8000000
0x78a: str	r2,[r3,#0x4]
0x78c: ldr	r3,[0x7b0]
0x78e: ldr	r2,[r0,#0x70]
0x790: str	r2,[r3,#0x0]
0x792: movs	r2,#0x0
0x794: ldr	r3,[r0,#0x74]
0x796: str	r2,[r0,#0x74]
0x798: msr	basepri,r3
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x79c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x7a0: bl	0x9c0
0x7a4: mov	r0,r4
0x7a6: pop	{ r4, pc }
0x7a8: lsls	r4,r6,#0x1f
0x7aa: movs	r0,#0x0
0x7ac: stc	p0,cr14,[r0,#0x0]
CallOther(in=[Constant(value=0xc, size=4), Constant(value=0x0, size=4), Register(name=cr14, size=4), Varnode(space=unique, offset=0x85580, size=4)])
0x7b0: lsls	r0,r0,#0x1d
0x7b2: movs	r0,#0x0
0x7b4: ldr	r1,[0x7e4]
0x7b6: ldr	r2,[r1,#0x8]
0x7b8: mov.w	r0,#0x30
0x7bc: add	r0,r2
0x7be: mrs	r12,psp
CallOther(out=Register(name=r12, size=4), in=[Constant(value=0x110, size=4)])
0x7c2: stm	r0,{ r4, r5, r6, r7, r8, r9, r10, r11, r12 }
0x7c6: mov	r4,lr
0x7c8: mov	r0,lr
0x7ca: bl	0x76c
0x7ce: mov	lr,r4
0x7d0: ldr	r1,[0x7e4]
0x7d2: ldr	r2,[r1,#0x8]
0x7d4: add.w	r0,r2,#0x30
0x7d8: ldm.w	r0,{ r4, r5, r6, r7, r8, r9, r10, r11, r12 }
0x7dc: msr	psp,r12
CallOther(out=Varnode(space=unique, offset=0x92a80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x116, size=4), Register(name=r12, size=4)])
0x7e0: bx	lr
0x7e8: tst	lr,#0x4
0x7ec: ite	eq
0x7ee: mrs.eq	r0,msp
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x10f, size=4)])
0x7f2: mrs.ne	r0,psp
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x110, size=4)])
0x7f6: ldr	r1,[r0,#0x18]
0x7f8: ldrb.w	r1,[r1,#-0x2]
0x7fc: cmp	r1,#0x2
0x7fe: beq	0x800
0x800: push	{ r0, lr }
0x802: bl	0x3bd2
0x806: pop	{ r0, pc }
0x808: sxtb	r0, r0
0x80a: cmp	r0,#0x0
0x80c: blt	0x81e
0x80e: ldr	r2,[0x820]
0x810: lsrs	r1,r0,#0x5
0x812: movs	r3,#0x1
0x814: and	r0,r0,#0x1f
0x818: lsls	r3,r0
0x81a: str.w	r3,[r2,r1,lsl #0x2]
0x81e: bx	lr
0x81e: bx	lr
0x824: ldr	r3,[0x83c]
0x826: lsrs	r2,r0,#0x5
0x828: and	r0,r0,#0x1f
0x82c: ldr.w	r2,[r3,r2,lsl #0x2]
0x830: movs	r3,#0x1
0x832: lsl.w	r0,r3,r0
0x836: ands	r0,r2
0x838: bx	lr
0x83a: nop	
0x840: sxtb	r0, r0
0x842: cmp	r0,#0x0
0x844: it	ge
0x846: add.ge.w	r0,r0,#0xe0000000
0x84a: add.w	r1,r1,#0x1
0x84e: it	lt
0x850: ldr.lt	r3,[0x86c]
0x852: lsl.w	r1,r1,#0x5
0x856: ite	ge
0x858: add.ge.w	r0,r0,#0xe100
0x85c: and.lt	r0,r0,#0xf
0x860: uxtb	r1, r1
0x862: ite	lt
0x864: strb.lt	r1,[r3,r0]
0x866: strb.ge.w	r1,[r0,#0x300]
0x86a: bx	lr
0x870: ldr	r2,[0x8b0]
0x872: push	{ r3, lr }
0x874: ldr	r3,[0x8b4]
0x876: bic	r2,r2,#0x7f
0x87a: str	r2,[r3,#0x8]
0x87c: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0x880: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x884: ldr.w	r2,[r3,#0x88]
0x888: bic	r2,r2,#0xf00000
0x88c: str.w	r2,[r3,#0x88]
0x890: mrs	r3,control
CallOther(out=Varnode(space=unique, offset=0x92280, size=1), in=[Constant(value=0x113, size=4)])
CallOther(out=Varnode(space=unique, offset=0x92400, size=1), in=[Constant(value=0x114, size=4)])
0x894: bic	r3,r3,#0x4
0x898: msr	control,r3
CallOther(out=Varnode(space=unique, offset=0x93700, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x28, size=4), Varnode(space=unique, offset=0x93900, size=1)])
CallOther(out=Varnode(space=unique, offset=0x93700, size=1), in=[Constant(value=0x29, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93a80, size=1), in=[Constant(value=0x114, size=4)])
CallOther(in=[Constant(value=0x118, size=4), Varnode(space=unique, offset=0x93b80, size=1)])
0x89c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x8a0: bl	0x2924
0x8a4: bl	0x3188
0x8a8: bl	0x96c
0x8ac: bl	0x29ac
0x8b8: str.w	r3,[r2,#-0x20]
0x8bc: ldr	r3,[sp,#0x0]
0x8be: str.w	r3,[r2,#-0x1c]
0x8c2: ldr	r1,[0x8ec]
0x8c4: ldr	r3,[sp,#0x4]
0x8c6: str.w	r3,[r2,#-0x18]
0x8ca: ldr	r3,[sp,#0x8]
0x8cc: str.w	r3,[r2,#-0x14]
0x8d0: bic	r1,r1,#0x1
0x8d4: mov.w	r3,#0x1000000
0x8d8: str.w	r3,[r2,#-0x4]
0x8dc: str.w	r1,[r2,#-0x8]
0x8e0: movs	r3,#0x0
0x8e2: subs	r2,#0x20
0x8e4: str	r2,[r0,#0x50]
0x8e6: str	r3,[r0,#0x74]
0x8e8: bx	lr
0x8ea: nop	
0x8f0: ldr	r2,[0x918]
0x8f2: mov	r3,r0
0x8f4: ldr	r0,[r2,#0x8]
0x8f6: cbz	r0,0x916
0x8f8: cmn	r3,#0x16
0x8fc: ldr	r0,[r0,#0x60]
0x8fe: beq	0x90c
0x900: sub.w	r2,r0,#0x40
0x904: cmp	r2,r3
0x906: bhi	0x914
0x908: cmp	r3,r0
0x90a: bcs	0x914
0x90c: cmp	r1,r0
0x90e: it	cs
0x910: mov.cs	r0,#0x0
0x912: bx	lr
0x914: movs	r0,#0x0
0x916: bx	lr
0x916: bx	lr
0x91c: push	{ r3, lr }
0x91e: mov	r5,r2
0x920: ldr	r2,[0x950]
0x922: ldr	r3,[0x954]
0x924: str	r0,[r2,#0x8]
0x926: ldr	r2,[r0,#0x70]
0x928: str	r2,[r3,#0x0]
0x92a: mov	r6,r1
0x92c: bl	0x9c0
0x930: mov	r4,r5
0x932: msr	psp,r6
CallOther(out=Varnode(space=unique, offset=0x92a80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x116, size=4), Register(name=r6, size=4)])
0x936: mov.w	r0,#0x0
0x93a: ldr	r3,[0x958]
0x93c: blx	r3
0x93e: mov	r0,r4
0x940: mov.w	r1,#0x0
0x944: mov.w	r2,#0x0
0x948: mov.w	r3,#0x0
0x94c: ldr	r4,[0x95c]
0x94e: bx	r4
0x960: ldr	r3,[0x968]
0x962: movs	r2,#0x10
0x964: str	r2,[r3,#0x10]
0x966: bx	lr
0x96c: ldr	r0,[0x980]
0x96e: movs	r3,#0x0
0x970: movs	r1,#0x20
0x972: adds	r2,r0,r3
0x974: adds	r3,#0x1
0x976: cmp	r3,#0x30
0x978: strb.w	r1,[r2,#0x300]
0x97c: bne	0x972
0x972: adds	r2,r0,r3
0x974: adds	r3,#0x1
0x976: cmp	r3,#0x30
0x978: strb.w	r1,[r2,#0x300]
0x97c: bne	0x972
0x97e: bx	lr
0x984: push	{ r3, lr }
0x986: mrs	r3,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x98a: ldr	r2,[0x9a4]
0x98c: subs	r3,#0x10
0x98e: add.w	r1,r2,r3, lsl #0x3
0x992: ldr.w	r0,[r2,r3,lsl #0x3]
0x996: ldr	r1,[r1,#0x4]
0x998: blx	r1
0x99a: pop.w	{ r3, lr }
0x99e: b.w	0x404
0x9a2: nop	
0x9a4: add	r0,r3
0x9a6: movs	r0,r0
0x9a8: ldr	r3,[0x9b4]
0x9aa: ldr	r2,[0x9b8]
0x9ac: ldr	r0,[0x9bc]
0x9ae: movs	r1,#0x1
0x9b0: b.w	0xaa0
0x9c0: ldr	r2,[r0,#0x60]
0x9c2: ldr	r3,[0x9d8]
0x9c4: subs	r2,#0x40
0x9c6: str	r2,[r3,#0x0]
0x9c8: ldr	r2,[0x9dc]
0x9ca: movs	r1,#0x40
0x9cc: strd	r1,r2,[r3,#0x4]
0x9d0: mov	r0,r3
0x9d2: movs	r1,#0x1
0x9d4: b.w	0xab4
0x9e0: ldr	r2,[0xa04]
0x9e2: str.w	r0,[r2,#0x98]
0x9e6: ldr	r3,[r1,#0x0]
0x9e8: bic	r3,r3,#0x1f
0x9ec: orrs	r3,r0
0x9ee: orr	r3,r3,#0x10
0x9f2: str.w	r3,[r2,#0x9c]
0x9f6: ldr	r3,[r1,#0x8]
0x9f8: orr	r3,r3,#0x1
0x9fc: str.w	r3,[r2,#0xa0]
0xa00: bx	lr
0xa02: nop	
0xa08: push	{ r4, r5, r6, r7, r8, r9, lr  }
0xa0c: ldr.w	r8,[0xa70]
0xa10: sub	sp,#0x14
0xa12: mov	r6,r1
0xa14: mov	r7,r3
0xa16: mov	r4,r0
0xa18: mov.w	r9,#0x0
0xa1c: cmp	r9,r6
0xa1e: bge	0xa68
0xa1c: cmp	r9,r6
0xa1e: bge	0xa68
0xa20: ldr	r0,[r4,#0x4]
0xa22: cbz	r0,0xa5c
0xa24: cbz	r7,0xa36
0xa26: subs	r1,r0,#0x1
0xa28: tst	r0,r1
0xa2a: bne	0xa64
0xa2c: cmp	r0,#0x1f
0xa2e: bls	0xa64
0xa30: ldr	r3,[r4,#0x0]
0xa32: tst	r1,r3
0xa34: bne	0xa64
0xa36: ldr	r3,[r4,#0x0]
0xa38: str	r3,[sp,#0x4]
0xa3a: bl	0x3c36
0xa3e: ldr	r3,[r4,#0x8]
0xa40: orrs	r3,r0
0xa42: str	r3,[sp,#0xc]
0xa44: ldr.w	r5,[r8,#0x90]
0xa48: ubfx	r5,r5,#0x8,#0x8
0xa4c: uxtb	r0, r2
0xa4e: subs	r5,#0x1
0xa50: cmp	r0,r5
0xa52: bhi	0xa64
0xa54: add	r1,sp,#0x4
0xa56: bl	0x9e0
0xa5a: adds	r2,r0,#0x1
0xa5c: add.w	r9,r9,#0x1
0xa60: adds	r4,#0xc
0xa62: b	0xa1c
0xa5c: add.w	r9,r9,#0x1
0xa60: adds	r4,#0xc
0xa62: b	0xa1c
0xa64: mvn	r2,#0x15
0xa68: mov	r0,r2
0xa6a: add	sp,#0x14
0xa6c: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0xa68: mov	r0,r2
0xa6a: add	sp,#0x14
0xa6c: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0xa74: ldr	r3,[0xa88]
0xa76: movs	r2,#0x5
0xa78: str.w	r2,[r3,#0x94]
0xa7c: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0xa80: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xa84: bx	lr
0xa86: nop	
0xa8c: dmb	#0x1f
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1f, size=1)])
0xa90: ldr	r3,[0xa9c]
0xa92: movs	r2,#0x0
0xa94: str.w	r2,[r3,#0x94]
0xa98: bx	lr
0xa9a: nop	
0xaa0: push	{ r4, lr }
0xaa2: ldr	r4,[0xab0]
0xaa4: movs	r3,#0x1
0xaa6: ldrb	r2,[r4,#0x0]
0xaa8: bl	0xa08
0xaac: strb	r0,[r4,#0x0]
0xaae: pop	{ r4, pc }
0xab4: push	{ r3, lr }
0xab6: ldr	r2,[0xae4]
0xab8: movs	r3,#0x0
0xaba: ldrb	r2,[r2,#0x0]
0xabc: bl	0xa08
0xac0: cmn	r0,#0x16
0xac4: beq	0xad6
0xac6: ldr	r2,[0xae8]
0xac8: movs	r1,#0x0
0xaca: ldr.w	r3,[r2,#0x90]
0xace: ubfx	r3,r3,#0x8,#0x8
0xad2: cmp	r0,r3
0xad4: blt	0xad8
0xaca: ldr.w	r3,[r2,#0x90]
0xace: ubfx	r3,r3,#0x8,#0x8
0xad2: cmp	r0,r3
0xad4: blt	0xad8
0xad6: pop	{ r3, pc }
0xad8: str.w	r0,[r2,#0x98]
0xadc: str.w	r1,[r2,#0xa0]
0xae0: adds	r0,#0x1
0xae2: b	0xaca
0xaec: push	{ r4, r5, r6, r7, r8, r9, lr  }
0xaf0: ldr	r3,[0xc40]
0xaf2: ldr	r4,[0xc44]
0xaf4: ldr.w	r3,[r3,#0x90]
0xaf8: ldr	r5,[r4,#0x0]
0xafa: ubfx	r3,r3,#0x8,#0x8
0xafe: cmp	r5,r3
0xb00: sub	sp,#0x14
0xb02: bhi.w	0xc3a
0xb06: bl	0xa8c
0xb0a: movs	r0,#0x0
0xb0c: movs	r6,#0xc
0xb0e: cmp	r5,r0
0xb10: bne	0xb48
0xb0e: cmp	r5,r0
0xb10: bne	0xb48
0xb12: ldr	r4,[0xc48]
0xb14: ldr	r7,[0xc4c]
0xb16: strb	r5,[r4,#0x0]
0xb18: mov	r0,sp
0xb1a: bl	0x3b0
0xb1e: ldr.w	r8,[0xc40]
0xb22: ldr.w	r9,[0xc50]
0xb26: mov	r6,r0
0xb28: movs	r5,#0x0
0xb2a: cmp	r6,r5
0xb2c: bne	0xb56
0xb2a: cmp	r6,r5
0xb2c: bne	0xb56
0xb2e: ldrb	r3,[r4,#0x0]
0xb30: ldr	r1,[0xc40]
0xb32: movs	r0,#0x0
0xb34: ldr.w	r2,[r1,#0x90]
0xb38: ubfx	r2,r2,#0x8,#0x8
0xb3c: cmp	r3,r2
0xb3e: blt	0xc2e
0xb34: ldr.w	r2,[r1,#0x90]
0xb38: ubfx	r2,r2,#0x8,#0x8
0xb3c: cmp	r3,r2
0xb3e: blt	0xc2e
0xb40: bl	0xa74
0xb44: movs	r0,#0x0
0xb46: b	0xbce
0xb48: ldr	r1,[r4,#0x4]
0xb4a: mla	r1,r6,r0,r1
0xb4e: bl	0x9e0
0xb52: adds	r0,#0x1
0xb54: b	0xb0e
0xb56: ldr	r0,[sp,#0x0]
0xb58: add.w	r1,r0,r5, lsl #0x4
0xb5c: lsl.w	r12,r5,#0x4
0xb60: ldr	r3,[r1,#0xc]
0xb62: ands	r3,r7
0xb64: cmp.w	r3,#0x800000
0xb68: beq	0xbfc
0xb6a: bhi	0xb82
0xb6c: cmp.w	r3,#0x200000
0xb70: beq	0xbd4
0xb72: cmp.w	r3,#0x400000
0xb76: beq	0xbe6
0xb78: cmp.w	r3,#0x100000
0xb7c: beq	0xba0
0xb7e: adds	r5,#0x1
0xb80: b	0xb2a
0xb82: cmp.w	r3,#0x1000000
0xb86: beq	0xc0e
0xb88: cmp.w	r3,#0x2000000
0xb8c: bne	0xb7e
0xb8e: ldr.w	r3,[r0,r12]
0xb92: ldr	r0,[r1,#0x8]
0xb94: ldr	r2,[r1,#0x4]
0xb96: bl	0x3c36
0xb9a: orr	r0,r0,#0x40000
0xb9e: b	0xbb4
0xba0: ldr.w	r3,[r0,r12]
0xba4: ldr	r0,[r1,#0x8]
0xba6: ldr	r2,[r1,#0x4]
0xba8: bl	0x3c36
0xbac: orr	r0,r0,#0x11000000
0xbb0: orr	r0,r0,#0xb0000
0xbb4: strd	r2,r3,[sp,#0x4]
0xbb8: str	r0,[sp,#0xc]
0xbba: ldr.w	r3,[r8,#0x90]
0xbbe: ldrb	r0,[r4,#0x0]
0xbc0: ubfx	r3,r3,#0x8,#0x8
0xbc4: subs	r3,#0x1
0xbc6: cmp	r0,r3
0xbc8: bls	0xc20
0xbb4: strd	r2,r3,[sp,#0x4]
0xbb8: str	r0,[sp,#0xc]
0xbba: ldr.w	r3,[r8,#0x90]
0xbbe: ldrb	r0,[r4,#0x0]
0xbc0: ubfx	r3,r3,#0x8,#0x8
0xbc4: subs	r3,#0x1
0xbc6: cmp	r0,r3
0xbc8: bls	0xc20
0xbca: mvn	r0,#0x15
0xbce: add	sp,#0x14
0xbd0: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0xbce: add	sp,#0x14
0xbd0: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0xbd4: ldr.w	r3,[r0,r12]
0xbd8: ldr	r0,[r1,#0x8]
0xbda: ldr	r2,[r1,#0x4]
0xbdc: bl	0x3c36
0xbe0: orr.w	r0,r0,r9
0xbe4: b	0xbb4
0xbe6: ldr.w	r3,[r0,r12]
0xbea: ldr	r0,[r1,#0x8]
0xbec: ldr	r2,[r1,#0x4]
0xbee: bl	0x3c36
0xbf2: orr	r0,r0,#0x7000000
0xbf6: orr	r0,r0,#0x20000
0xbfa: b	0xbb4
0xbfc: ldr.w	r3,[r0,r12]
0xc00: ldr	r0,[r1,#0x8]
0xc02: ldr	r2,[r1,#0x4]
0xc04: bl	0x3c36
0xc08: orr	r0,r0,#0x1040000
0xc0c: b	0xbb4
0xc0e: ldr.w	r3,[r0,r12]
0xc12: ldr	r0,[r1,#0x8]
0xc14: ldr	r2,[r1,#0x4]
0xc16: bl	0x3c36
0xc1a: orr	r0,r0,#0x1100000
0xc1e: b	0xbb4
0xc20: add	r1,sp,#0x4
0xc22: bl	0x9e0
0xc26: ldrb	r3,[r4,#0x0]
0xc28: adds	r3,#0x1
0xc2a: strb	r3,[r4,#0x0]
0xc2c: b	0xb7e
0xc2e: str.w	r3,[r1,#0x98]
0xc32: str.w	r0,[r1,#0xa0]
0xc36: adds	r3,#0x1
0xc38: b	0xb34
0xc3a: mov.w	r0,#0xffffffff
0xc3e: b	0xbce
0xc54: push	{ r3, lr }
0xc56: ldr	r3,[0xc60]
0xc58: ldr	r3,[r3,#0x0]
0xc5a: blx	r3
0xc5c: movs	r0,#0x0
0xc5e: pop	{ r3, pc }
0xc64: ldr	r3,[0xc74]
0xc66: ldr	r2,[0xc78]
0xc68: str	r0,[r3,#0x0]
0xc6a: ldrb	r3,[r2,#0x2]
0xc6c: orr	r3,r3,#0x2
0xc70: strb	r3,[r2,#0x2]
0xc72: bx	lr
0xc7c: push	{ r3, lr }
0xc7e: ldr	r1,[0xc98]
0xc80: ldr	r0,[0xc9c]
0xc82: bic	r1,r1,#0x7
0xc86: rsb.w	r2,r1,#0x20000000
0xc8a: add.w	r2,r2,#0x40000
0xc8e: bl	0x397e
0xc92: movs	r0,#0x0
0xc94: pop	{ r3, pc }
0xc96: nop	
0xca0: ldr	r2,[0xcd8]
0xca2: movs	r3,#0x1
0xca4: str.w	r3,[r2,#0x540]
0xca8: mov.w	r2,#0x10000000
0xcac: ldr.w	r1,[r2,#0x130]
0xcb0: cmp	r1,#0x8
0xcb2: bne	0xcca
0xcb4: ldr.w	r2,[r2,#0x134]
0xcb8: cmp	r2,#0x5
0xcba: bhi	0xcca
0xcbc: ldr	r1,[0xcdc]
0xcbe: ldrb	r2,[r1,r2]
0xcc0: cbz	r2,0xcca
0xcc2: mov.w	r2,#0x40000000
0xcc6: str.w	r3,[r2,#0x638]
0xcca: mov.w	r3,#0x40000000
0xcce: movs	r2,#0x1
0xcd0: str.w	r2,[r3,#0x580]
0xcd4: movs	r0,#0x0
0xcd6: bx	lr
0xcca: mov.w	r3,#0x40000000
0xcce: movs	r2,#0x1
0xcd0: str.w	r2,[r3,#0x580]
0xcd4: movs	r0,#0x0
0xcd6: bx	lr
0xce0: cbz	r0,0xcec
0xce2: ldr	r3,[0xcf0]
0xce4: lsls	r0,r0,#0x6
0xce6: orr	r3,r3,#0x1
0xcea: bx	r3
0xcec: bx	lr
0xcee: nop	
0xcf4: ldr	r3,[0xd18]
0xcf6: push	{ r4, r5, r6, lr }
0xcf8: subs	r3,r0,r3
0xcfa: mov	r5,r1
0xcfc: ldr	r1,[0xd1c]
0xcfe: asrs	r3,r3,#0x2
0xd00: mov	r4,r0
0xd02: muls	r1,r3
0xd04: ldr	r0,[0xd20]
0xd06: movs	r2,#0x40
0xd08: bl	0x3c72
0xd0c: mov	r3,r5
0xd0e: mov	r1,r0
0xd10: mov	r0,r4
0xd12: pop.w	{ r4, r5, r6, lr }
0xd16: bx	r3
0xd24: push	{ r0, r1, r4, r5, r6, lr }
0xd26: ldr	r4,[0xd58]
0xd28: ldr	r2,[0xd5c]
0xd2a: movs	r3,#0x40
0xd2c: subs	r4,r0,r4
0xd2e: str	r3,[sp,#0x0]
0xd30: mov	r5,r1
0xd32: mov	r3,r1
0xd34: ldr	r1,[0xd60]
0xd36: asrs	r4,r4,#0x2
0xd38: muls	r1,r4
0xd3a: mov	r6,r0
0xd3c: ldr	r0,[0xd64]
0xd3e: bl	0x3cca
0xd42: subs	r1,r0,#0x0
0xd44: bge	0xd52
0xd46: mov	r0,r6
0xd48: mov	r3,r5
0xd4a: add	sp,#0x8
0xd4c: pop.w	{ r4, r5, r6, lr }
0xd50: bx	r3
0xd52: add	sp,#0x8
0xd54: pop	{ r4, r5, r6, pc }
0xd56: nop	
0xd68: push	{ r4, lr }
0xd6a: mrs	r4,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r4, size=4), in=[Constant(value=0x111, size=4)])
0xd6e: movs	r3,#0x20
0xd70: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0xd74: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xd78: ldr	r2,[0xd98]
0xd7a: ldr	r3,[r2,#0x0]
0xd7c: bic	r1,r3,#0x2
0xd80: lsls	r3,r3,#0x1f
0xd82: str	r1,[r2,#0x0]
0xd84: bmi	0xd8c
0xd86: movs	r0,#0x1
0xd88: bl	0x3f1e
0xd8c: msr	basepri,r4
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0xd90: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xd94: pop	{ r4, pc }
0xd96: nop	
0xd98: lsls	r4,r0,#0x1f
0xd9a: movs	r0,#0x0
0xd9c: movs	r2,#0x0
0xd9e: push	{ r4, r5, r6, lr }
0xda0: movs	r1,#0x1
0xda2: mov	r4,r0
0xda4: mov	r0,r2
0xda6: bl	0x840
0xdaa: ldr	r0,[0xde8]
0xdac: bl	0x1e5c
0xdb0: ldr	r3,[0xdec]
0xdb2: cmp	r0,r3
0xdb4: bne	0xde2
0xdb6: bl	0x1e7c
0xdba: ldr	r6,[r4,#0x10]
0xdbc: ldr	r1,[0xdf0]
0xdbe: mov	r0,r6
0xdc0: bl	0x3ab4
0xdc4: cmp	r0,#0x0
0xdc6: blt	0xde0
0xdc8: movs	r5,#0x1
0xdca: str	r5,[r6,#0x40]
0xdcc: ldr	r4,[r4,#0x10]
0xdce: ldr	r1,[0xdf0]
0xdd0: add.w	r0,r4,#0x1c
0xdd4: bl	0x3ab4
0xdd8: cmp	r0,#0x0
0xdda: blt	0xde0
0xddc: str	r5,[r4,#0x4c]
0xdde: movs	r0,#0x0
0xde0: pop	{ r4, r5, r6, pc }
0xde0: pop	{ r4, r5, r6, pc }
0xde2: mvn	r0,#0x4
0xde6: b	0xde0
0xdf4: push	{ r0, r1, r2, r3, r4, lr }
0xdf6: movs	r2,#0x0
0xdf8: movs	r3,#0x1
0xdfa: strd	r2,r3,[sp,#0x8]
0xdfe: ldr	r2,[0xe24]
0xe00: str.w	sp,[sp,#0x0]
0xe04: mov	r3,sp
0xe06: str.w	sp,[sp,#0x4]
0xe0a: bl	0x3d26
0xe0e: cmp	r0,#0x0
0xe10: blt	0xe1e
0xe12: mov.w	r2,#0x4000
0xe16: movs	r3,#0x0
0xe18: mov	r0,sp
0xe1a: bl	0x2ad0
0xe1e: add	sp,#0x14
0xe20: pop.w	pc
0xe28: push	{ r4, r5 }
0xe2a: ldr	r3,[0xe6c]
0xe2c: movs	r2,#0xc
0xe2e: mla	r3,r2,r0,r3
0xe32: mov	r1,r0
0xe34: movs	r0,#0x0
0xe36: ldrd	r5,r2,[r3,#0x38]
0xe3a: str	r0,[r3,#0x38]
0xe3c: mrs	r0,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x111, size=4)])
0xe40: movs	r4,#0x20
0xe42: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0xe46: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xe4a: ldr	r4,[r3,#0x40]
0xe4c: and	r4,r4,#0xc0
0xe50: orr	r4,r4,#0x2
0xe54: str	r4,[r3,#0x40]
0xe56: msr	basepri,r0
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r0, size=4)])
0xe5a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xe5e: cbz	r5,0xe68
0xe60: mov	r3,r5
0xe62: ldr	r0,[0xe70]
0xe64: pop	{ r4, r5 }
0xe66: bx	r3
0xe68: pop	{ r4, r5 }
0xe6a: bx	lr
0xe74: push	{ r4 }
0xe76: mrs	r2,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r2, size=4), in=[Constant(value=0x111, size=4)])
0xe7a: movs	r3,#0x20
0xe7c: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0xe80: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xe84: ldr	r0,[0xee4]
0xe86: ldr	r1,[r0,#0x0]
0xe88: orr	r4,r1,#0x2
0xe8c: str	r4,[r0,#0x0]
0xe8e: lsls	r0,r1,#0x1f
0xe90: bmi	0xea2
0xe92: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0xe96: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xe9a: movs	r0,#0x1
0xe9c: pop	{ r4 }
0xe9e: b.w	0x1ea0
0xea2: mov.w	r1,#0x40000000
0xea6: ldr.w	r0,[r1,#0x40c]
0xeaa: ldr.w	r1,[r1,#0x40c]
0xeae: lsls	r1,r1,#0x1f
0xeb0: bpl	0xe92
0xeb2: mrs	r0,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x111, size=4)])
0xeb6: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0xeba: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xebe: ldr	r1,[0xee8]
0xec0: ldr	r3,[r1,#0x40]
0xec2: and	r3,r3,#0xc0
0xec6: orr	r3,r3,#0x2
0xeca: str	r3,[r1,#0x40]
0xecc: msr	basepri,r0
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r0, size=4)])
0xed0: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xed4: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0xed8: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xedc: movs	r0,#0x0
0xede: pop	{ r4 }
0xee0: b.w	0xe28
0xee4: lsls	r4,r0,#0x1f
0xee6: movs	r0,#0x0
0xeec: cbz	r0,0xef4
0xeee: cmp	r0,#0x1
0xef0: beq	0xefc
0xef2: bx	lr
0xef4: ldr	r3,[0xf04]
0xef6: ldr	r3,[r3,#0x40]
0xef8: lsls	r3,r3,#0x1d
0xefa: bne	0xf00
0xefc: b.w	0xe28
0xf00: bx	lr
0xf02: nop	
0xf08: push	{ r4, r5, r6, r7, r8, lr  }
0xf0c: ldr	r1,[0xff0]
0xf0e: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0xf12: mov	r7,r0
0xf14: movs	r2,#0x1
0xf16: ldrex	r3,[r1,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0xf1a: strex	r0,r2,[r1,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0xf1e: cmp	r0,#0x0
0xf20: bne	0xf16
0xf16: ldrex	r3,[r1,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0xf1a: strex	r0,r2,[r1,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0xf1e: cmp	r0,#0x0
0xf20: bne	0xf16
0xf22: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0xf26: cbnz	r3,0xf36
0xf28: ldr	r1,[0xff4]
0xf2a: ldr	r0,[0xff8]
0xf2c: str	r3,[r1,#0x4]
0xf2e: str	r3,[r1,#0xc]
0xf30: str	r2,[r1,#0x8]
0xf32: bl	0x3ada
0xf36: subs	r3,r7,#0x1
0xf38: cmp	r3,#0x1
0xf3a: bhi	0xf94
0xf3c: cmp	r7,#0x1
0xf3e: bne	0xf50
0xf40: mov.w	r3,#0x40000000
0xf44: ldr.w	r3,[r3,#0x41c]
0xf48: and	r3,r3,#0x3
0xf4c: cmp	r3,#0x1
0xf4e: beq	0xf94
0xf50: bl	0x40b6
0xf54: mov	r5,r0
0xf56: cbnz	r0,0xf98
0xf58: ldr	r3,[0xffc]
0xf5a: ldrb	r3,[r3,#0x0]
0xf5c: cbz	r3,0xf98
0xf5e: mov.w	r3,#0x40000000
0xf62: movs	r2,#0x2
0xf64: str.w	r2,[r3,#0x308]
0xf68: mov	r6,r0
0xf6a: ldr.w	r8,[0x1000]
0xf6e: mov.w	r4,#0x40000000
0xf72: ldr.w	r2,[r4,#0x418]
0xf76: ldr.w	r3,[r4,#0x418]
0xf7a: lsls	r2,r2,#0xf
0xf7c: bpl	0xfaa
0xf6a: ldr.w	r8,[0x1000]
0xf6e: mov.w	r4,#0x40000000
0xf72: ldr.w	r2,[r4,#0x418]
0xf76: ldr.w	r3,[r4,#0x418]
0xf7a: lsls	r2,r2,#0xf
0xf7c: bpl	0xfaa
0xf72: ldr.w	r2,[r4,#0x418]
0xf76: ldr.w	r3,[r4,#0x418]
0xf7a: lsls	r2,r2,#0xf
0xf7c: bpl	0xfaa
0xf7e: and	r3,r3,#0x3
0xf82: cmp	r3,#0x1
0xf84: beq	0xf8a
0xf86: cmp	r7,#0x1
0xf88: bne	0xfaa
0xf8a: cbz	r5,0xfe2
0xf8c: msr	basepri,r6
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r6, size=4)])
0xf90: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xf94: pop.w	{ r4, r5, r6, r7, r8, pc }
0xf94: pop.w	{ r4, r5, r6, r7, r8, pc }
0xf98: mrs	r6,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r6, size=4), in=[Constant(value=0x111, size=4)])
0xf9c: movs	r3,#0x20
0xf9e: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0xfa2: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0xfa6: movs	r5,#0x1
0xfa8: b	0xf6a
0xfaa: cbz	r5,0xfd8
0xfac: mov	r0,r6
0xfae: bl	0x3c18
0xfb2: ldr.w	r3,[r4,#0x518]
0xfb6: cmp	r3,#0x0
0xfb8: bne	0xf72
0xfba: ldr.w	r2,[r4,#0x104]
0xfbe: cmp	r2,#0x0
0xfc0: beq	0xf72
0xfc2: str.w	r3,[r4,#0x104]
0xfc6: ldr.w	r3,[r4,#0x104]
0xfca: movs	r3,#0x1
0xfcc: str.w	r3,[r4,#0x518]
0xfd0: str.w	r3,[r8,#0x180]
0xfd4: str	r3,[r4,#0x8]
0xfd6: b	0xf72
0xfd8: movs	r1,#0x0
0xfda: movs	r0,#0x21
0xfdc: bl	0x3034
0xfe0: b	0xfb2
0xfe2: mov.w	r3,#0x40000000
0xfe6: movs	r2,#0x2
0xfe8: str.w	r2,[r3,#0x304]
0xfec: b	0xf94
0xfee: nop	
0x1004: push	{ r3, lr }
0x1006: ldr	r0,[0x1024]
0x1008: bl	0x403a
0x100c: cbz	r0,0x101e
0x100e: ldr	r0,[0x1028]
0x1010: bl	0xc64
0x1014: ldr	r0,[0x1028]
0x1016: bl	0x124
0x101a: movs	r0,#0x0
0x101c: pop	{ r3, pc }
0x101c: pop	{ r3, pc }
0x101e: mvn	r0,#0x12
0x1022: b	0x101c
0x102c: cmp	r0,#0xa
0x102e: push	{ r3, r4, r5, lr }
0x1030: ldr	r5,[0x1050]
0x1032: mov	r4,r0
0x1034: bne	0x1040
0x1036: ldr	r3,[r5,#0x8]
0x1038: movs	r1,#0xd
0x103a: ldr	r3,[r3,#0x4]
0x103c: mov	r0,r5
0x103e: blx	r3
0x1040: ldr	r3,[r5,#0x8]
0x1042: ldr	r0,[0x1050]
0x1044: ldr	r3,[r3,#0x4]
0x1046: uxtb	r1, r4
0x1048: blx	r3
0x104a: mov	r0,r4
0x104c: pop	{ r3, r4, r5, pc }
0x104e: nop	
0x1054: push	{ r4, r5, r6, r7, lr }
0x1056: ldr	r0,[r0,#0x4]
0x1058: ldrb	r5,[r0,#0xc]
0x105a: and	r4,r1,#0x1f
0x105e: orr.w	r4,r4,r5, lsl #0x5
0x1062: ldr	r5,[r0,#0x10]
0x1064: sub	sp,#0x1c
0x1066: cmp	r5,#0x0
0x1068: beq	0x1134
0x106a: cmp.w	r2,#0x200000
0x106e: add.w	r5,r0,#0x10
0x1072: bne	0x1082
0x1074: mov	r1,r4
0x1076: mov	r0,r5
0x1078: bl	0x401e
0x107c: movs	r0,#0x0
0x107e: add	sp,#0x1c
0x1080: pop	{ r4, r5, r6, r7, pc }
0x107e: add	sp,#0x1c
0x1080: pop	{ r4, r5, r6, r7, pc }
0x1082: add	r6,sp,#0x4
0x1084: movs	r7,#0x0
0x1086: cmp.w	r2,#0x400000
0x108a: str	r7,[sp,#0x4]
0x108c: str	r7,[r6,#0x4]
0x108e: bne	0x1104
0x1090: cmp.w	r3,#0x2000000
0x1094: ite	ne
0x1096: mov.ne	r3,#0x5
0x1098: mov.eq	r3,#0x4
0x109a: strb.w	r3,[sp,#0x4]
0x109e: movs	r3,#0x0
0x10a0: strd	r6,r3,[sp,#0x10]
0x10a4: str	r3,[sp,#0xc]
0x10a6: ldr	r3,[r0,#0x8]
0x10a8: lsr.w	r1,r3,r1
0x10ac: ands	r1,r1,#0x1
0x10b0: bne	0x10e8
0x109a: strb.w	r3,[sp,#0x4]
0x109e: movs	r3,#0x0
0x10a0: strd	r6,r3,[sp,#0x10]
0x10a4: str	r3,[sp,#0xc]
0x10a6: ldr	r3,[r0,#0x8]
0x10a8: lsr.w	r1,r3,r1
0x10ac: ands	r1,r1,#0x1
0x10b0: bne	0x10e8
0x10b2: cmp.w	r2,#0x1400000
0x10b6: bne	0x10e8
0x10b8: and	r3,r4,#0x1f
0x10bc: lsrs	r2,r4,#0x5
0x10be: add.w	r3,r3,#0x1c0
0x10c2: beq	0x111a
0x10c4: cmp	r2,#0x1
0x10c6: bne	0x1140
0x10c8: ldr	r2,[0x1148]
0x10ca: ldr.w	r3,[r2,r3,lsl #0x2]
0x10ce: lsls	r3,r3,#0x1f
0x10d0: bmi	0x10e8
0x10ca: ldr.w	r3,[r2,r3,lsl #0x2]
0x10ce: lsls	r3,r3,#0x1f
0x10d0: bmi	0x10e8
0x10d2: add.w	r6,sp,#0x3
0x10d6: mov	r2,r6
0x10d8: mov	r1,r4
0x10da: mov	r0,r5
0x10dc: bl	0x245c
0x10e0: ldr	r3,[0x114c]
0x10e2: cmp	r0,r3
0x10e4: beq	0x1120
0x10e6: str	r6,[sp,#0x8]
0x10e8: add	r2,sp,#0xc
0x10ea: mov	r1,r4
0x10ec: mov	r0,r5
0x10ee: bl	0x21e0
0x10e8: add	r2,sp,#0xc
0x10ea: mov	r1,r4
0x10ec: mov	r0,r5
0x10ee: bl	0x21e0
0x10f2: ldr	r3,[0x1150]
0x10f4: cmp	r0,r3
0x10f6: bne	0x113a
0x10f8: movs	r2,#0x1
0x10fa: mov	r1,r4
0x10fc: mov	r0,r5
0x10fe: bl	0x2524
0x1102: b	0x107c
0x1104: cmp.w	r3,#0x6000000
0x1108: beq	0x1116
0x110a: cmp.w	r3,#0x2000000
0x110e: ite	ne
0x1110: mov.ne	r3,#0x1
0x1112: mov.eq	r3,#0x2
0x1114: b	0x109a
0x1116: movs	r3,#0x3
0x1118: b	0x109a
0x111a: mov.w	r2,#0x50000000
0x111e: b	0x10ca
0x1120: mov	r1,r6
0x1122: mov	r0,r5
0x1124: bl	0x2518
0x1128: ldr	r3,[0x1150]
0x112a: cmp	r0,r3
0x112c: beq	0x10e6
0x112e: mvn	r0,#0xb
0x1132: b	0x107e
0x1134: mvn	r0,#0x85
0x1138: b	0x107e
0x113a: mvn	r0,#0x15
0x113e: b	0x107e
0x1140: ldr.w	r3,[r1,r3,lsl #0x2]
0x1146: nop	
0x1154: push	{ r3, r4, r5, lr }
0x1156: ldr	r5,[r0,#0x4]
0x1158: ldr	r3,[r5,#0x10]
0x115a: cbz	r3,0x118a
0x115c: adds	r5,#0x10
0x115e: mov	r0,r5
0x1160: bl	0x24f8
0x1164: mov	r4,r0
0x1166: cbnz	r0,0x118a
0x1168: mov	r1,r0
0x116a: mov	r0,r5
0x116c: bl	0x2490
0x1170: ldr	r3,[0x1194]
0x1172: cmp	r0,r3
0x1174: bne	0x118e
0x1176: ldr	r1,[0x1198]
0x1178: mov	r2,r4
0x117a: mov	r0,r5
0x117c: bl	0x2450
0x1180: mov	r2,r4
0x1182: movs	r1,#0x5
0x1184: movs	r0,#0x6
0x1186: bl	0x840
0x118a: movs	r0,#0x0
0x118c: pop	{ r3, r4, r5, pc }
0x118c: pop	{ r3, r4, r5, pc }
0x118e: mvn	r0,#0x4
0x1192: b	0x118c
0x119c: lsrs	r2,r0,#0x5
0x119e: push	{ r4, r5, r6, lr }
0x11a0: mov	r3,r0
0x11a2: beq	0x11aa
0x11a4: cmp	r2,#0x1
0x11a6: beq	0x11d8
0x11a8: pop	{ r4, r5, r6, pc }
0x11aa: ldr	r6,[0x11e0]
0x11ac: ldr	r2,[r6,#0x10]
0x11ae: ldr	r1,[r2,#0x4]
0x11b0: cmp	r1,#0x0
0x11b2: beq	0x11a8
0x11ac: ldr	r2,[r6,#0x10]
0x11ae: ldr	r1,[r2,#0x4]
0x11b0: cmp	r1,#0x0
0x11b2: beq	0x11a8
0x11b4: and	r3,r3,#0x1f
0x11b8: movs	r5,#0x1
0x11ba: ldr	r4,[r1,#0x0]
0x11bc: lsls	r5,r3
0x11be: cmp	r1,#0x0
0x11c0: beq	0x11a8
0x11be: cmp	r1,#0x0
0x11c0: beq	0x11a8
0x11c2: ldr	r2,[r1,#0x8]
0x11c4: ands	r2,r5
0x11c6: beq	0x11ce
0x11c8: ldr	r3,[r1,#0x4]
0x11ca: mov	r0,r6
0x11cc: blx	r3
0x11ce: cbz	r4,0x11dc
0x11d0: ldr	r3,[r4,#0x0]
0x11d2: mov	r1,r4
0x11d4: mov	r4,r3
0x11d6: b	0x11be
0x11d2: mov	r1,r4
0x11d4: mov	r4,r3
0x11d6: b	0x11be
0x11d8: ldr	r6,[0x11e4]
0x11da: b	0x11ac
0x11dc: mov	r3,r4
0x11de: b	0x11d2
0x11e8: push	{ r4, r5, r6, r7, r8, r9, lr  }
0x11ec: ldr	r6,[r0,#0x4]
0x11ee: movw	r5,#0x306
0x11f2: lsls	r0,r2,#0x1b
0x11f4: ldrb	r3,[r6,#0xc]
0x11f6: sub	sp,#0x1c
0x11f8: and.w	r5,r2,r5
0x11fc: ite	pl
0x11fe: ubfx.pl	r0,r2,#0x5,#0x1
0x1202: mov.mi	r0,#0x3
0x1204: and	r7,r1,#0x1f
0x1208: cmp.w	r5,#0x106
0x120c: mov	r4,r2
0x120e: orr.w	r7,r7,r3, lsl #0x5
0x1212: strb.w	r0,[sp,#0x3]
0x1216: beq	0x12a2
0x1218: bhi	0x123a
0x121a: cmp	r5,#0x6
0x121c: beq	0x1250
0x121e: bhi	0x1230
0x1220: cbz	r5,0x1250
0x1222: cmp	r5,#0x2
0x1224: beq	0x12a6
0x1226: mvn	r0,#0x15
0x122a: add	sp,#0x1c
0x122c: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x122a: add	sp,#0x1c
0x122c: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x1230: cmp.w	r5,#0x100
0x1234: bne	0x1226
0x1236: movs	r5,#0x1
0x1238: b	0x1250
0x123a: movw	r2,#0x202
0x123e: cmp	r5,r2
0x1240: beq	0x12aa
0x1242: cmp.w	r5,#0x300
0x1246: beq	0x12ae
0x1248: cmp.w	r5,#0x200
0x124c: bne	0x1226
0x124e: movs	r5,#0x2
0x1250: lsls	r2,r4,#0xc
0x1252: bpl	0x12b2
0x1250: lsls	r2,r4,#0xc
0x1252: bpl	0x12b2
0x1254: ldr	r2,[r6,#0x4]
0x1256: movs	r3,#0x1
0x1258: lsls	r3,r1
0x125a: str.w	r3,[r2,#0x508]
0x125e: ldr	r2,[r6,#0x10]
0x1260: cbnz	r2,0x12c8
0x125e: ldr	r2,[r6,#0x10]
0x1260: cbnz	r2,0x12c8
0x1262: and	r3,r7,#0x1f
0x1266: lsrs	r7,r7,#0x5
0x1268: beq	0x12c2
0x126a: cmp	r7,#0x1
0x126c: bne	0x1362
0x126e: ldr	r2,[0x136c]
0x1270: add.w	r2,r2,r3, lsl #0x2
0x1274: eor	r3,r4,#0x10000
0x1278: ldr.w	r1,[r2,#0x700]
0x127c: ubfx	r3,r3,#0x10,#0x1
0x1280: ubfx	r4,r4,#0x11,#0x1
0x1284: orr.w	r4,r4,r3, lsl #0x1
0x1288: bic	r1,r1,#0x708
0x128c: orr.w	r4,r4,r0, lsl #0x2
0x1290: bic	r1,r1,#0x7
0x1294: orr.w	r3,r4,r5, lsl #0x8
0x1298: orrs	r3,r1
0x129a: str.w	r3,[r2,#0x700]
0x129e: movs	r0,#0x0
0x12a0: b	0x122a
0x1270: add.w	r2,r2,r3, lsl #0x2
0x1274: eor	r3,r4,#0x10000
0x1278: ldr.w	r1,[r2,#0x700]
0x127c: ubfx	r3,r3,#0x10,#0x1
0x1280: ubfx	r4,r4,#0x11,#0x1
0x1284: orr.w	r4,r4,r3, lsl #0x1
0x1288: bic	r1,r1,#0x708
0x128c: orr.w	r4,r4,r0, lsl #0x2
0x1290: bic	r1,r1,#0x7
0x1294: orr.w	r3,r4,r5, lsl #0x8
0x1298: orrs	r3,r1
0x129a: str.w	r3,[r2,#0x700]
0x129e: movs	r0,#0x0
0x12a0: b	0x122a
0x129e: movs	r0,#0x0
0x12a0: b	0x122a
0x12a2: movs	r5,#0x7
0x12a4: b	0x1250
0x12a6: movs	r5,#0x4
0x12a8: b	0x1250
0x12aa: movs	r5,#0x5
0x12ac: b	0x1250
0x12ae: movs	r5,#0x3
0x12b0: b	0x1250
0x12b2: lsls	r3,r4,#0xd
0x12b4: itttt	mi
0x12b6: mov.mi	r3,#0x1
0x12b8: ldr.mi	r2,[r6,#0x4]
0x12ba: lsl.mi	r3,r1
0x12bc: str.w.mi	r3,[r2,#0x50c]
0x12c0: b	0x125e
0x12c2: mov.w	r2,#0x50000000
0x12c6: b	0x1270
0x12c8: adds	r6,#0x10
0x12ca: add.w	r2,sp,#0x2
0x12ce: mov	r1,r7
0x12d0: mov	r0,r6
0x12d2: bl	0x245c
0x12d6: tst	r4,#0x30000
0x12da: mov	r8,r0
0x12dc: bne	0x12f8
0x12de: mov	r1,r7
0x12e0: mov	r0,r6
0x12e2: bl	0x401a
0x12e6: ldr	r3,[0x1370]
0x12e8: cmp	r8,r3
0x12ea: bne	0x129e
0x12ec: ldrb.w	r1,[sp,#0x2]
0x12f0: mov	r0,r6
0x12f2: bl	0x250c
0x12f6: b	0x129e
0x12f8: add	r3,sp,#0x4
0x12fa: mov.w	r9,#0x0
0x12fe: add	r2,sp,#0xc
0x1300: mov	r1,r7
0x1302: mov	r0,r6
0x1304: strd	r3,r9,[sp,#0x10]
0x1308: strd	r9,r9,[sp,#0x4]
0x130c: str.w	r9,[sp,#0xc]
0x1310: bl	0x21e0
0x1314: ldr	r3,[0x1370]
0x1316: cmp	r0,r3
0x1318: bne	0x1226
0x131a: ands	r3,r4,#0x20000
0x131e: beq	0x134c
0x1320: ldrb.w	r3,[sp,#0x3]
0x1324: strb.w	r3,[sp,#0xe]
0x1328: eor	r4,r4,#0x10000
0x132c: ubfx	r4,r4,#0x10,#0x1
0x1330: mov	r3,r9
0x1332: add	r2,sp,#0xc
0x1334: mov	r1,r7
0x1336: mov	r0,r6
0x1338: strb.w	r5,[sp,#0xc]
0x133c: strb.w	r4,[sp,#0xd]
0x1340: bl	0x2354
0x1344: ldr	r3,[0x1370]
0x1346: cmp	r0,r3
0x1348: beq	0x12e6
0x134a: b	0x1226
0x134c: strd	r3,r3,[sp,#0x10]
0x1350: add	r2,sp,#0xc
0x1352: add.w	r3,sp,#0x3
0x1356: mov	r1,r7
0x1358: mov	r0,r6
0x135a: str	r3,[sp,#0xc]
0x135c: bl	0x21e0
0x1360: b	0x1344
0x1362: add.w	r3,r3,#0x1c0
0x1366: ldr.w	r3,[r2,r3,lsl #0x2]
0x1374: ldr	r3,[r0,#0x0]
0x1376: and	r2,r3,#0x1f
0x137a: lsrs	r3,r3,#0x5
0x137c: str	r2,[r0,#0x0]
0x137e: beq	0x138a
0x1380: cmp	r3,#0x1
0x1382: ldr	r0,[0x1390]
0x1384: it	ne
0x1386: mov.ne	r0,#0x0
0x1388: bx	lr
0x138a: mov.w	r0,#0x50000000
0x138e: bx	lr
0x1394: push	{ r4, r5, r6, r7, r8, r9, r10, r11, lr  }
0x1398: ldr.w	r9,[0x1530]
0x139c: ldr.w	r10,[0x1534]
0x13a0: sub	sp,#0x14
0x13a2: mov	r5,r2
0x13a4: mov	r11,r0
0x13a6: add.w	r1,r0,r1, lsl #0x2
0x13aa: movw	r8,#0x1ff
0x13ae: cmp	r1,r11
0x13b0: bne	0x13ba
0x13ae: cmp	r1,r11
0x13b0: bne	0x13ba
0x13b2: movs	r0,#0x0
0x13b4: add	sp,#0x14
0x13b6: pop.w	{ r4, r5, r6, r7, r8, r9, r10, r11, pc }
0x13b4: add	sp,#0x14
0x13b6: pop.w	{ r4, r5, r6, r7, r8, r9, r10, r11, pc }
0x13ba: ldr.w	r3,[r11,#0x0]
0x13be: lsls	r6,r3,#0x11
0x13c0: ubfx	r2,r3,#0xb,#0x4
0x13c4: ubfx	r4,r3,#0x0,#0x9
0x13c8: bmi.w	0x1524
0x13cc: lsrs	r3,r3,#0x12
0x13ce: ldrb.w	r7,[r9,r2,lsl #0x0]
0x13d2: cmp	r4,r8
0x13d4: it	eq
0x13d6: mov.eq.w	r4,#0xffffffff
0x13da: cmp	r3,#0x22
0x13dc: bhi.w	0x152a
0x13e0: tbb	[0x13e4,r3]
0x1408: str.w	r4,[r5,#0x50c]
0x140c: adds	r0,r4,#0x1
0x140e: bne	0x14ce
0x140c: adds	r0,r4,#0x1
0x140e: bne	0x14ce
0x1410: add.w	r11,r11,#0x4
0x1414: b	0x13ae
0x1416: str.w	r4,[r5,#0x514]
0x141a: adds	r2,r4,#0x1
0x141c: beq	0x1410
0x141a: adds	r2,r4,#0x1
0x141c: beq	0x1410
0x141e: movs	r6,#0x0
0x1420: b	0x14e2
0x1422: str.w	r4,[r5,#0x508]
0x1426: b	0x140c
0x1428: str.w	r4,[r5,#0x510]
0x142c: b	0x141a
0x142e: adds	r3,r4,#0x1
0x1430: str.w	r4,[r5,#0x508]
0x1434: beq	0x1410
0x1436: movs	r6,#0x0
0x1438: b	0x1444
0x143a: adds	r6,r4,#0x1
0x143c: str.w	r4,[r5,#0x50c]
0x1440: beq	0x1410
0x1442: movs	r6,#0x1
0x1444: add	r0,sp,#0xc
0x1446: str	r4,[sp,#0xc]
0x1448: bl	0x1374
0x1444: add	r0,sp,#0xc
0x1446: str	r4,[sp,#0xc]
0x1448: bl	0x1374
0x144c: ldr	r3,[sp,#0xc]
0x144e: movs	r2,#0x1
0x1450: lsl.w	r3,r2,r3
0x1454: str.w	r3,[r0,#0x50c]
0x1458: b	0x146c
0x145a: str.w	r4,[r5,#0x508]
0x145e: cmp	r7,#0x0
0x1460: bne	0x141a
0x145e: cmp	r7,#0x0
0x1460: bne	0x141a
0x1462: adds	r3,r4,#0x1
0x1464: beq	0x1410
0x1466: movs	r6,#0x0
0x1468: mov	r2,r6
0x146a: movs	r7,#0x6
0x146c: ldr.w	r3,[r11,#0x0]
0x1470: str	r3,[sp,#0x4]
0x1472: and	r0,r3,#0x8000
0x1476: cmp	r0,#0x0
0x1478: it	ne
0x147a: mov.ne	r2,#0x0
0x147c: add	r0,sp,#0xc
0x147e: str	r2,[sp,#0x0]
0x1480: it	ne
0x1482: mov.ne	r6,#0x1
0x1484: str	r4,[sp,#0xc]
0x1486: bl	0x1374
0x146c: ldr.w	r3,[r11,#0x0]
0x1470: str	r3,[sp,#0x4]
0x1472: and	r0,r3,#0x8000
0x1476: cmp	r0,#0x0
0x1478: it	ne
0x147a: mov.ne	r2,#0x0
0x147c: add	r0,sp,#0xc
0x147e: str	r2,[sp,#0x0]
0x1480: it	ne
0x1482: mov.ne	r6,#0x1
0x1484: str	r4,[sp,#0xc]
0x1486: bl	0x1374
0x148a: ldr	r4,[sp,#0xc]
0x148c: ldr	r3,[sp,#0x4]
0x148e: ldr	r2,[sp,#0x0]
0x1490: add.w	r0,r0,r4, lsl #0x2
0x1494: ubfx	r12,r3,#0x9,#0x2
0x1498: ldr.w	r4,[r0,#0x700]
0x149c: lsls	r3,r7,#0x8
0x149e: orr.w	r3,r3,r12, lsl #0x2
0x14a2: orrs	r3,r2
0x14a4: and.w	r4,r4,r10
0x14a8: orrs	r3,r4
0x14aa: orr.w	r3,r3,r6, lsl #0x1
0x14ae: str.w	r3,[r0,#0x700]
0x14b2: b	0x1410
0x14b4: str.w	r4,[r5,#0x50c]
0x14b8: b	0x145e
0x14ba: str.w	r4,[r5,#0x560]
0x14be: adds	r0,r4,#0x1
0x14c0: ldr.w	r3,[r11,#0x0]
0x14c4: beq	0x1410
0x14be: adds	r0,r4,#0x1
0x14c0: ldr.w	r3,[r11,#0x0]
0x14c4: beq	0x1410
0x14c6: ubfx	r3,r3,#0x10,#0x1
0x14ca: cmp	r3,#0x0
0x14cc: beq	0x1442
0x14ce: add	r0,sp,#0xc
0x14d0: str	r4,[sp,#0xc]
0x14d2: bl	0x1374
0x14d6: ldr	r3,[sp,#0xc]
0x14d8: movs	r6,#0x1
0x14da: lsl.w	r3,r6,r3
0x14de: str.w	r3,[r0,#0x508]
0x14e2: mov	r2,r6
0x14e4: b	0x146c
0x14e2: mov	r2,r6
0x14e4: b	0x146c
0x14e6: str.w	r4,[r5,#0x564]
0x14ea: b	0x14be
0x14ec: str.w	r4,[r5,#0x568]
0x14f0: b	0x14be
0x14f2: str.w	r4,[r5,#0x56c]
0x14f6: b	0x14be
0x14f8: str.w	r4,[r5,#0x524]
0x14fc: adds	r2,r4,#0x1
0x14fe: beq	0x1410
0x14fc: adds	r2,r4,#0x1
0x14fe: beq	0x1410
0x1500: movs	r2,#0x0
0x1502: movs	r6,#0x1
0x1504: b	0x146c
0x1506: str.w	r4,[r5,#0x528]
0x150a: b	0x140c
0x150c: str.w	r4,[r5,#0x530]
0x1510: b	0x14fc
0x1512: str.w	r4,[r5,#0x534]
0x1516: b	0x14fc
0x1518: str.w	r4,[r5,#0x538]
0x151c: b	0x14fc
0x151e: str.w	r4,[r5,#0x53c]
0x1522: b	0x140c
0x1524: mvn	r0,#0x15
0x1528: b	0x13b4
0x152a: mvn	r0,#0x85
0x152e: b	0x13b4
0x1538: push	{ r0, r1, r2, r4, r5, r6, r7, lr }
0x153a: mov	r7,r0
0x153c: movs	r2,#0x0
0x153e: movs	r1,#0x1
0x1540: movs	r0,#0x2
0x1542: bl	0x840
0x1546: movs	r0,#0x2
0x1548: bl	0x808
0x154c: ldr	r5,[r7,#0x4]
0x154e: ldr	r6,[r7,#0x10]
0x1550: ldr	r4,[r5,#0x0]
0x1552: movs	r1,#0x0
0x1554: str.w	r1,[r4,#0x500]
0x1558: str	r7,[r6,#0x0]
0x155a: ldr	r7,[r5,#0x10]
0x155c: add	r2,sp,#0x4
0x155e: mov	r0,r7
0x1560: bl	0x3e02
0x1564: cmp	r0,#0x0
0x1566: blt	0x1606
0x1568: ldr	r3,[sp,#0x4]
0x156a: ldr	r2,[r7,#0x0]
0x156c: ldrb	r1,[r3,#0x4]
0x156e: ldr	r0,[r3,#0x0]
0x1570: bl	0x1394
0x1574: cmp	r0,#0x0
0x1576: blt	0x1606
0x1578: ldr	r3,[r5,#0x14]
0x157a: str.w	r3,[r4,#0x524]
0x157e: ldrb	r2,[r5,#0x19]
0x1580: ldrb	r3,[r5,#0x18]
0x1582: orrs	r3,r2
0x1584: ldrb	r2,[r5,#0x1a]
0x1586: orrs	r3,r2
0x1588: str.w	r3,[r4,#0x56c]
0x158c: ldr	r3,[r5,#0x8]
0x158e: lsls	r1,r3,#0x1e
0x1590: bpl	0x15b8
0x1592: add.w	r0,r6,#0x10
0x1596: bl	0x2790
0x159a: ldr	r3,[0x1610]
0x159c: cmp	r0,r3
0x159e: bne	0x160a
0x15a0: ldrb	r0,[r6,#0x10]
0x15a2: add.w	r2,r4,#0xc
0x15a6: add.w	r1,r4,#0x120
0x15aa: bl	0x3f0a
0x15ae: ldrb	r3,[r6,#0x10]
0x15b0: movs	r0,#0x1
0x15b2: lsls	r0,r3
0x15b4: bl	0x1d8c
0x15b8: movs	r3,#0x8
0x15ba: str.w	r3,[r4,#0x500]
0x15be: ldrb	r3,[r5,#0xc]
0x15c0: cbnz	r3,0x15d8
0x15c2: str.w	r3,[r4,#0x110]
0x15c6: ldr.w	r3,[r4,#0x110]
0x15ca: ldr	r3,[r6,#0xc]
0x15cc: str.w	r3,[r4,#0x534]
0x15d0: movs	r3,#0x1
0x15d2: str.w	r3,[r4,#0x538]
0x15d6: str	r3,[r4,#0x0]
0x15d8: ldr	r3,[r5,#0x8]
0x15da: lsls	r2,r3,#0x1e
0x15dc: itt	pl
0x15de: mov.pl.w	r3,#0x100
0x15e2: str.w.pl	r3,[r4,#0x304]
0x15e6: ldr	r3,[r5,#0x8]
0x15e8: lsls	r3,r3,#0x1b
0x15ea: itt	mi
0x15ec: mov.mi.w	r3,#0x400000
0x15f0: str.w.mi	r3,[r4,#0x304]
0x15f4: ldr	r3,[r6,#0x8]
0x15f6: str.w	r3,[r4,#0x544]
0x15fa: movs	r0,#0x0
0x15fc: movs	r3,#0x1
0x15fe: str.w	r0,[r4,#0x548]
0x1602: str	r3,[r4,#0x8]
0x1604: str	r3,[r4,#0xc]
0x1606: add	sp,#0xc
0x1608: pop	{ r4, r5, r6, r7, pc }
0x15d8: ldr	r3,[r5,#0x8]
0x15da: lsls	r2,r3,#0x1e
0x15dc: itt	pl
0x15de: mov.pl.w	r3,#0x100
0x15e2: str.w.pl	r3,[r4,#0x304]
0x15e6: ldr	r3,[r5,#0x8]
0x15e8: lsls	r3,r3,#0x1b
0x15ea: itt	mi
0x15ec: mov.mi.w	r3,#0x400000
0x15f0: str.w.mi	r3,[r4,#0x304]
0x15f4: ldr	r3,[r6,#0x8]
0x15f6: str.w	r3,[r4,#0x544]
0x15fa: movs	r0,#0x0
0x15fc: movs	r3,#0x1
0x15fe: str.w	r0,[r4,#0x548]
0x1602: str	r3,[r4,#0x8]
0x1604: str	r3,[r4,#0xc]
0x1606: add	sp,#0xc
0x1608: pop	{ r4, r5, r6, r7, pc }
0x1606: add	sp,#0xc
0x1608: pop	{ r4, r5, r6, r7, pc }
0x160a: mvn	r0,#0x4
0x160e: b	0x1606
0x1614: push	{ r4, r5, r6, r7, r8, lr  }
0x1618: mov	r4,r0
0x161a: ldr	r7,[r0,#0x10]
0x161c: mov	r5,r1
0x161e: bl	0x40b6
0x1622: mov.w	r8,#0x20
0x1626: cbnz	r0,0x1656
0x1628: ldr	r3,[0x16dc]
0x162a: ldrb	r3,[r3,#0x0]
0x162c: cbz	r3,0x1656
0x162e: movs	r6,#0x64
0x1630: ldr	r0,[r4,#0x4]
0x1632: bl	0x3e5e
0x1630: ldr	r0,[r4,#0x4]
0x1632: bl	0x3e5e
0x1636: cbnz	r0,0x1676
0x1638: movs	r0,#0x1
0x163a: bl	0x3f06
0x163e: subs	r6,#0x1
0x1640: bne	0x1630
0x1642: movs	r1,#0x0
0x1644: movs	r0,#0x21
0x1646: bl	0x3034
0x164a: b	0x162e
0x164c: msr	basepri,r6
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r6, size=4)])
0x1650: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1654: b	0x1642
0x1656: mrs	r6,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r6, size=4), in=[Constant(value=0x111, size=4)])
0x165a: mov	r1,r6
0x165c: msr	basepri_max,r8
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x1660: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1664: ldr	r0,[r4,#0x4]
0x1666: bl	0x3e5e
0x166a: cbnz	r0,0x168e
0x166c: msr	basepri,r6
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r6, size=4)])
0x1670: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1674: b	0x1656
0x1676: mrs	r6,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r6, size=4), in=[Constant(value=0x111, size=4)])
0x167a: mov	r1,r6
0x167c: msr	basepri_max,r8
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x1680: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1684: ldr	r0,[r4,#0x4]
0x1686: bl	0x3e5e
0x168a: cmp	r0,#0x0
0x168c: beq	0x164c
0x168e: ldr	r3,[r7,#0x8]
0x1690: strb	r5,[r3,#0x0]
0x1692: ldr	r2,[r4,#0x4]
0x1694: ldr	r0,[r7,#0x8]
0x1696: ldr	r3,[r2,#0x0]
0x1698: str.w	r0,[r3,#0x544]
0x169c: movs	r0,#0x1
0x169e: str.w	r0,[r3,#0x548]
0x16a2: movs	r0,#0x0
0x16a4: str.w	r0,[r3,#0x120]
0x16a8: ldr.w	r5,[r3,#0x120]
0x16ac: str.w	r0,[r3,#0x158]
0x16b0: ldr	r2,[r2,#0x8]
0x16b2: ldr.w	r0,[r3,#0x158]
0x16b6: lsls	r2,r2,#0x1b
0x16b8: bpl	0x16cc
0x16ba: ldr	r2,[r4,#0x4]
0x16bc: ldr	r2,[r2,#0x0]
0x16be: movs	r0,#0x8
0x16c0: str.w	r0,[r2,#0x500]
0x16c4: mov.w	r2,#0x400000
0x16c8: str.w	r2,[r3,#0x304]
0x16cc: movs	r2,#0x1
0x16ce: str	r2,[r3,#0x8]
0x16d0: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x16d4: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x16d8: pop.w	{ r4, r5, r6, r7, r8, pc }
0x16cc: movs	r2,#0x1
0x16ce: str	r2,[r3,#0x8]
0x16d0: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x16d4: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x16d8: pop.w	{ r4, r5, r6, r7, r8, pc }
0x16e0: push	{ r4, r5, r6, lr }
0x16e2: movs	r3,#0x1
0x16e4: lsls	r3,r0
0x16e6: ldr	r2,[0x1720]
0x16e8: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x16ec: mvns	r4,r3
0x16ee: ldrex	r1,[r2,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x16f2: and.w	r5,r1,r4
0x16f6: strex	r6,r5,[r2,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x16fa: cmp	r6,#0x0
0x16fc: bne	0x16ee
0x16ee: ldrex	r1,[r2,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x16f2: and.w	r5,r1,r4
0x16f6: strex	r6,r5,[r2,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x16fa: cmp	r6,#0x0
0x16fc: bne	0x16ee
0x16fe: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1702: mov.w	r2,#0x10000
0x1706: lsls	r2,r0
0x1708: ldr	r0,[0x1724]
0x170a: str.w	r2,[r0,#0x308]
0x170e: dmb	#0x1f
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1f, size=1)])
0x1712: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1716: tst	r3,r1
0x1718: ite	ne
0x171a: mov.ne	r0,#0x1
0x171c: mov.eq	r0,#0x0
0x171e: pop	{ r4, r5, r6, pc }
0x1728: push	{ r4, r5, r6 }
0x172a: ldr	r1,[0x1764]
0x172c: ldrd	r3,r4,[r1,#0x0]
0x1730: subs	r0,r2,r3
0x1732: adds	r3,r0,r3
0x1734: adc	r4,r4,#0x0
0x1738: bic	r6,r2,#0xff000000
0x173c: strd	r3,r4,[r1,#0x0]
0x1740: sub.w	r3,r6,#0x200000
0x1744: cmp.w	r3,#0xc00000
0x1748: bcs	0x175e
0x174a: ldr	r3,[0x1768]
0x174c: ldr	r3,[r3,#0x0]
0x174e: lsrs	r2,r3,#0x8
0x1750: lsls	r3,r3,#0x18
0x1752: adds	r4,r3,r6
0x1754: ldr	r3,[0x176c]
0x1756: adc	r5,r2,#0x0
0x175a: strd	r4,r5,[r3,#0x0]
0x175e: pop	{ r4, r5, r6 }
0x1760: b.w	0x333c
0x175e: pop	{ r4, r5, r6 }
0x1760: b.w	0x333c
0x1770: cbz	r1,0x17b8
0x1772: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1776: movs	r3,#0x1
0x1778: ldr	r2,[0x17bc]
0x177a: lsls	r3,r0
0x177c: ldrex	r12,[r2,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1780: orr.w	r12,r12,r3
0x1784: strex	r1,r12,[r2,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x1788: cmp	r1,#0x0
0x178a: bne	0x177c
0x177c: ldrex	r12,[r2,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1780: orr.w	r12,r12,r3
0x1784: strex	r1,r12,[r2,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x1788: cmp	r1,#0x0
0x178a: bne	0x177c
0x178c: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1790: ldr	r2,[0x17c0]
0x1792: mov.w	r3,#0x10000
0x1796: lsls	r3,r0
0x1798: str.w	r3,[r2,#0x304]
0x179c: ldr	r3,[0x17c4]
0x179e: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x17a2: ldr	r3,[r3,#0x0]
0x17a4: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x17a8: lsrs	r3,r0
0x17aa: lsls	r3,r3,#0x1f
0x17ac: ittt	mi
0x17ae: ldr.mi	r3,[0x17c8]
0x17b0: mov.mi.w	r2,#0x20000
0x17b4: str.w.mi	r2,[r3,#0x100]
0x17b8: bx	lr
0x17b8: bx	lr
0x17ba: nop	
0x17cc: ldr	r3,[0x1804]
0x17ce: ldr	r0,[r3,#0x0]
0x17d0: lsrs	r1,r0,#0x8
0x17d2: lsls	r0,r0,#0x18
0x17d4: dmb	#0x1f
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1f, size=1)])
0x17d8: ldr	r3,[0x1808]
0x17da: ldr.w	r3,[r3,#0x504]
0x17de: adds	r0,r3,r0
0x17e0: adc	r1,r1,#0x0
0x17e4: cmp.w	r3,#0x100000
0x17e8: bcs	0x1800
0x17ea: ldr	r3,[0x180c]
0x17ec: ldrd	r2,r3,[r3,#0x0]
0x17f0: cmp	r0,r2
0x17f2: sbcs.w	r3,r1,r3
0x17f6: bcs	0x1800
0x17f8: adds.w	r0,r0,#0x1000000
0x17fc: adc	r1,r1,#0x0
0x1800: bx	lr
0x1800: bx	lr
0x1802: nop	
0x1810: push	{ r4, r5, r6, r7, r8, r9, r10, r11, lr  }
0x1814: sub	sp,#0x14
0x1816: mov	r6,r2
0x1818: mov	r7,r3
0x181a: ldrb.w	r10,[sp,#0x40]
0x181e: mov	r4,r0
0x1820: bl	0x16e0
0x1824: str	r0,[sp,#0x4]
0x1826: bl	0x17cc
0x182a: cmp	r0,r6
0x182c: sbcs.w	r3,r1,r7
0x1830: bcs	0x18dc
0x1832: ldr	r3,[0x192c]
0x1834: subs	r0,r6,r0
0x1836: sbc.w	r1,r7,r1
0x183a: cmp	r0,r3
0x183c: sbcs	r1,r1,#0x0
0x1840: bcs	0x18e2
0x1842: ldr	r3,[0x1930]
0x1844: add.w	r3,r3,r4, lsl #0x4
0x1848: ldrd	r2,r3,[r3,#0x8]
0x184c: cmp	r7,r3
0x184e: it	eq
0x1850: cmp.eq	r6,r2
0x1852: beq	0x1912
0x1854: ldr	r1,[0x1934]
0x1856: mov.w	r8,#0x10000
0x185a: add.w	r5,r4,#0x50
0x185e: lsl.w	r8,r8,r4
0x1862: lsls	r5,r5,#0x2
0x1864: str.w	r8,[r1,#0x348]
0x1868: mov	r0,r4
0x186a: uxth	r5, r5
0x186c: bl	0x3eec
0x1870: bic	r11,r6,#0xff000000
0x1874: add.w	r5,r5,#0x40000000
0x1878: add.w	r3,r4,#0x150
0x187c: add.w	r5,r5,#0x11000
0x1880: mov	r12,r11
0x1882: mov.w	r9,#0x3
0x1886: str	r3,[sp,#0x8]
0x1888: ldr	r2,[sp,#0x8]
0x188a: bic	r3,r12,#0xff000000
0x188e: str.w	r3,[r1,r2,lsl #0x2]
0x1892: str.w	r8,[r1,#0x344]
0x1896: ldr.w	r3,[r1,#0x504]
0x189a: ldr	r2,[0x1938]
0x189c: mvn	r0,#0x2
0x18a0: subs	r0,r0,r3
0x18a2: add	r0,r12
0x18a4: bic	r0,r0,#0xff000000
0x18a8: cmp	r0,r2
0x18aa: bls	0x1912
0x1888: ldr	r2,[sp,#0x8]
0x188a: bic	r3,r12,#0xff000000
0x188e: str.w	r3,[r1,r2,lsl #0x2]
0x1892: str.w	r8,[r1,#0x344]
0x1896: ldr.w	r3,[r1,#0x504]
0x189a: ldr	r2,[0x1938]
0x189c: mvn	r0,#0x2
0x18a0: subs	r0,r0,r3
0x18a2: add	r0,r12
0x18a4: bic	r0,r0,#0xff000000
0x18a8: cmp	r0,r2
0x18aa: bls	0x1912
0x18ac: ldr	r0,[r5,#0x0]
0x18ae: cbz	r0,0x18cc
0x18b0: ldr.w	r3,[r1,#0x504]
0x18b4: str	r3,[sp,#0xc]
0x18b6: sub.w	r0,r3,r11
0x18ba: bic	r0,r0,#0xff000000
0x18be: cmp.w	r0,#0x800000
0x18c2: bls	0x1912
0x18c4: mov	r0,r4
0x18c6: bl	0x3eec
0x18ca: ldr	r3,[sp,#0xc]
0x18cc: cmp.w	r10,#0x0
0x18d0: bne	0x18e2
0x18cc: cmp.w	r10,#0x0
0x18d0: bne	0x18e2
0x18d2: add.w	r12,r9,r3
0x18d6: add.w	r9,r9,#0x1
0x18da: b	0x1888
0x18dc: cmp.w	r10,#0x0
0x18e0: beq	0x18f6
0x18e2: mvn	r5,#0x15
0x18e6: mov	r0,r4
0x18e8: ldr	r1,[sp,#0x4]
0x18ea: bl	0x1770
0x18e6: mov	r0,r4
0x18e8: ldr	r1,[sp,#0x4]
0x18ea: bl	0x1770
0x18ee: mov	r0,r5
0x18f0: add	sp,#0x14
0x18f2: pop.w	{ r4, r5, r6, r7, r8, r9, r10, r11, pc }
0x18f6: movs	r3,#0x1
0x18f8: ldr	r2,[0x193c]
0x18fa: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x18fe: lsls	r3,r4
0x1900: ldrex	r0,[r2,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1904: orrs	r0,r3
0x1906: strex	r1,r0,[r2,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x190a: cmp	r1,#0x0
0x190c: bne	0x1900
0x1900: ldrex	r0,[r2,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1904: orrs	r0,r3
0x1906: strex	r1,r0,[r2,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x190a: cmp	r1,#0x0
0x190c: bne	0x1900
0x190e: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1912: ldr	r1,[0x1930]
0x1914: ldr	r0,[sp,#0x38]
0x1916: lsls	r3,r4,#0x4
0x1918: add.w	r2,r1,r4, lsl #0x4
0x191c: str	r0,[r1,r3]
0x191e: ldr	r3,[sp,#0x3c]
0x1920: str	r3,[r2,#0x4]
0x1922: strd	r6,r7,[r2,#0x8]
0x1926: movs	r5,#0x0
0x1928: b	0x18e6
0x1912: ldr	r1,[0x1930]
0x1914: ldr	r0,[sp,#0x38]
0x1916: lsls	r3,r4,#0x4
0x1918: add.w	r2,r1,r4, lsl #0x4
0x191c: str	r0,[r1,r3]
0x191e: ldr	r3,[sp,#0x3c]
0x1920: str	r3,[r2,#0x4]
0x1922: strd	r6,r7,[r2,#0x8]
0x1926: movs	r5,#0x0
0x1928: b	0x18e6
0x192a: nop	
0x1940: push	{ r0, r1, r2, r3, r4, r5, r6, lr }
0x1942: ldr	r4,[0x19b4]
0x1944: ldr	r3,[0x19b8]
0x1946: str.w	r3,[r4,#0x308]
0x194a: str.w	r3,[r4,#0x348]
0x194e: ldr	r3,[0x19bc]
0x1950: movs	r5,#0x0
0x1952: mov.w	r0,#0xffffffff
0x1956: mov.w	r1,#0xffffffff
0x195a: str.w	r5,[r4,#0x508]
0x195e: strd	r0,r1,[r3,#0x8]
0x1962: mov.w	r3,#0x10000
0x1966: str.w	r3,[r4,#0x304]
0x196a: ldr	r3,[0x19c0]
0x196c: movs	r6,#0x2
0x196e: mov.w	r2,#0x20000
0x1972: movs	r1,#0x1
0x1974: str.w	r6,[r4,#0x304]
0x1978: movs	r0,#0x11
0x197a: str.w	r2,[r3,#0x180]
0x197e: mov	r2,r5
0x1980: bl	0x840
0x1984: movs	r0,#0x11
0x1986: bl	0x808
0x198a: ldr	r2,[0x19c4]
0x198c: movs	r3,#0x1
0x198e: str	r3,[r4,#0x8]
0x1990: str	r3,[r4,#0x0]
0x1992: str	r3,[r2,#0x0]
0x1994: ldr	r3,[0x19c8]
0x1996: ldr	r2,[0x19cc]
0x1998: str	r3,[sp,#0x0]
0x199a: strd	r5,r5,[sp,#0x4]
0x199e: movs	r3,#0x0
0x19a0: mov	r0,r5
0x19a2: bl	0x1810
0x19a6: mov	r0,r6
0x19a8: bl	0xf08
0x19ac: mov	r0,r5
0x19ae: add	sp,#0x10
0x19b0: pop	{ r4, r5, r6, pc }
0x19b2: nop	
0x19d0: push	{ r0, r1, r2, r4, r5, r6, r7, r8, r9, lr  }
0x19d4: ldr	r4,[0x1a94]
0x19d6: ldr.w	r3,[r4,#0x304]
0x19da: lsls	r1,r3,#0x1e
0x19dc: bpl	0x19f6
0x19de: ldr.w	r3,[r4,#0x104]
0x19e2: cbz	r3,0x19f6
0x19e4: ldr	r2,[0x1a98]
0x19e6: movs	r3,#0x0
0x19e8: str.w	r3,[r4,#0x104]
0x19ec: ldr.w	r3,[r4,#0x104]
0x19f0: ldr	r3,[r2,#0x0]
0x19f2: adds	r3,#0x1
0x19f4: str	r3,[r2,#0x0]
0x19f6: ldr.w	r3,[r4,#0x304]
0x19fa: lsls	r2,r3,#0xf
0x19fc: bpl	0x1a52
0x19f6: ldr.w	r3,[r4,#0x304]
0x19fa: lsls	r2,r3,#0xf
0x19fc: bpl	0x1a52
0x19fe: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1a02: ldr	r3,[0x1a9c]
0x1a04: ldrex	r2,[r3,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1a08: bic	r1,r2,#0x1
0x1a0c: strex	r0,r1,[r3,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x1a10: cmp	r0,#0x0
0x1a12: bne	0x1a04
0x1a04: ldrex	r2,[r3,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1a08: bic	r1,r2,#0x1
0x1a0c: strex	r0,r1,[r3,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x1a10: cmp	r0,#0x0
0x1a12: bne	0x1a04
0x1a14: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1a18: lsls	r3,r2,#0x1f
0x1a1a: bmi	0x1a22
0x1a1c: ldr.w	r3,[r4,#0x140]
0x1a20: cbz	r3,0x1a52
0x1a22: movs	r5,#0x0
0x1a24: str.w	r5,[r4,#0x140]
0x1a28: ldr.w	r3,[r4,#0x140]
0x1a2c: bl	0x17cc
0x1a30: mrs	r2,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r2, size=4), in=[Constant(value=0x111, size=4)])
0x1a34: movs	r3,#0x20
0x1a36: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x1a3a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1a3e: ldr	r3,[0x1aa0]
0x1a40: ldrd	r6,r7,[r3,#0x8]
0x1a44: cmp	r0,r6
0x1a46: sbcs	r1,r7
0x1a48: bcs	0x1a58
0x1a4a: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x1a4e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1a52: add	sp,#0xc
0x1a54: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x1a52: add	sp,#0xc
0x1a54: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x1a58: mov.w	r8,#0xffffffff
0x1a5c: mov.w	r9,#0xffffffff
0x1a60: strd	r8,r9,[r3,#0x8]
0x1a64: ldrd	r1,r0,[r3,#0x0]
0x1a68: str	r5,[r3,#0x0]
0x1a6a: mov.w	r3,#0x10000
0x1a6e: str.w	r3,[r4,#0x348]
0x1a72: str.w	r5,[r4,#0x140]
0x1a76: ldr.w	r3,[r4,#0x140]
0x1a7a: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x1a7e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x1a82: cmp	r1,#0x0
0x1a84: beq	0x1a52
0x1a86: str	r0,[sp,#0x0]
0x1a88: mov	r2,r6
0x1a8a: mov	r3,r7
0x1a8c: mov	r0,r5
0x1a8e: blx	r1
0x1a90: b	0x1a52
0x1a92: nop	
0x1aa4: push	{ r4, r5, lr }
0x1aa6: adds	r3,r0,#0x1
0x1aa8: ldr	r4,[0x1af4]
0x1aaa: sub	sp,#0x14
0x1aac: beq	0x1aba
0x1aae: cmp	r4,r0
0x1ab0: it	ge
0x1ab2: mov.ge	r4,r0
0x1ab4: cmp	r4,#0x1
0x1ab6: it	lt
0x1ab8: mov.lt	r4,#0x1
0x1aba: bl	0x17cc
0x1aba: bl	0x17cc
0x1abe: ldr	r3,[0x1af8]
0x1ac0: ldr	r5,[0x1af4]
0x1ac2: ldrd	r1,r3,[r3,#0x0]
0x1ac6: subs	r0,r0,r1
0x1ac8: cmp.w	r0,#0x800000
0x1acc: bcs	0x1af0
0x1ace: adds	r2,r4,r0
0x1ad0: cmp	r2,r5
0x1ad2: it	cs
0x1ad4: mov.cs	r2,r5
0x1ad6: adds	r2,r2,r1
0x1ad8: mov.w	r0,#0x0
0x1adc: ldr	r1,[0x1afc]
0x1ade: str	r1,[sp,#0x0]
0x1ae0: strd	r0,r0,[sp,#0x4]
0x1ae4: adc	r3,r3,#0x0
0x1ae8: bl	0x1810
0x1ad6: adds	r2,r2,r1
0x1ad8: mov.w	r0,#0x0
0x1adc: ldr	r1,[0x1afc]
0x1ade: str	r1,[sp,#0x0]
0x1ae0: strd	r0,r0,[sp,#0x4]
0x1ae4: adc	r3,r3,#0x0
0x1ae8: bl	0x1810
0x1aec: add	sp,#0x14
0x1aee: pop	{ r4, r5, pc }
0x1af0: mov	r2,r5
0x1af2: b	0x1ad6
0x1b00: push	{ r3, lr }
0x1b02: bl	0x17cc
0x1b06: ldr	r3,[0x1b10]
0x1b08: ldr	r3,[r3,#0x0]
0x1b0a: subs	r0,r0,r3
0x1b0c: pop	{ r3, pc }
0x1b0e: nop	
0x1b14: mov.w	r3,#0x10000000
0x1b18: ldr.w	r2,[r3,#0x130]
0x1b1c: cmp	r2,#0x8
0x1b1e: bne	0x1b2e
0x1b20: ldr.w	r3,[r3,#0x134]
0x1b24: cmp	r3,#0x5
0x1b26: bhi	0x1b2e
0x1b28: ldr	r2,[0x1b34]
0x1b2a: ldrb	r0,[r2,r3]
0x1b2c: bx	lr
0x1b2e: movs	r0,#0x0
0x1b30: bx	lr
0x1b32: nop	
0x1b38: ldr	r2,[0x1b44]
0x1b3a: ldr.w	r3,[r2,#0x400]
0x1b3e: cmp	r3,#0x0
0x1b40: beq	0x1b3a
0x1b3a: ldr.w	r3,[r2,#0x400]
0x1b3e: cmp	r3,#0x0
0x1b40: beq	0x1b3a
0x1b42: bx	lr
0x1b48: push	{ r4, lr }
0x1b4a: mov.w	r3,#0x10000000
0x1b4e: ldr.w	r2,[r3,#0x130]
0x1b52: cmp	r2,#0x8
0x1b54: bne	0x1bf4
0x1b56: mov.w	r2,#0x40000000
0x1b5a: movs	r1,#0x0
0x1b5c: str.w	r1,[r2,#0x10c]
0x1b60: str.w	r1,[r2,#0x110]
0x1b64: str.w	r1,[r2,#0x538]
0x1b68: add.w	r2,r2,#0xc000
0x1b6c: ldr.w	r1,[r3,#0x404]
0x1b70: str.w	r1,[r2,#0x520]
0x1b74: ldr.w	r1,[r3,#0x408]
0x1b78: str.w	r1,[r2,#0x524]
0x1b7c: ldr.w	r1,[r3,#0x40c]
0x1b80: str.w	r1,[r2,#0x528]
0x1b84: ldr.w	r1,[r3,#0x410]
0x1b88: str.w	r1,[r2,#0x52c]
0x1b8c: ldr.w	r1,[r3,#0x414]
0x1b90: str.w	r1,[r2,#0x530]
0x1b94: ldr.w	r1,[r3,#0x418]
0x1b98: str.w	r1,[r2,#0x534]
0x1b9c: ldr.w	r1,[r3,#0x41c]
0x1ba0: str.w	r1,[r2,#0x540]
0x1ba4: ldr.w	r1,[r3,#0x420]
0x1ba8: str.w	r1,[r2,#0x544]
0x1bac: ldr.w	r1,[r3,#0x424]
0x1bb0: str.w	r1,[r2,#0x548]
0x1bb4: ldr.w	r1,[r3,#0x428]
0x1bb8: str.w	r1,[r2,#0x54c]
0x1bbc: ldr.w	r1,[r3,#0x42c]
0x1bc0: str.w	r1,[r2,#0x550]
0x1bc4: ldr.w	r1,[r3,#0x430]
0x1bc8: str.w	r1,[r2,#0x554]
0x1bcc: ldr.w	r1,[r3,#0x434]
0x1bd0: str.w	r1,[r2,#0x560]
0x1bd4: ldr.w	r1,[r3,#0x438]
0x1bd8: str.w	r1,[r2,#0x564]
0x1bdc: ldr.w	r1,[r3,#0x43c]
0x1be0: str.w	r1,[r2,#0x568]
0x1be4: ldr.w	r1,[r3,#0x440]
0x1be8: str.w	r1,[r2,#0x56c]
0x1bec: ldr.w	r3,[r3,#0x444]
0x1bf0: str.w	r3,[r2,#0x570]
0x1bf4: bl	0x1b14
0x1bf4: bl	0x1b14
0x1bf8: cbz	r0,0x1c02
0x1bfa: ldr	r3,[0x1ce4]
0x1bfc: ldr	r2,[0x1ce8]
0x1bfe: str.w	r2,[r3,#0x68c]
0x1c02: bl	0x1b14
0x1c02: bl	0x1b14
0x1c06: cbz	r0,0x1c10
0x1c08: ldr	r3,[0x1cec]
0x1c0a: movs	r2,#0xfb
0x1c0c: str.w	r2,[r3,#0x518]
0x1c10: bl	0x1b14
0x1c10: bl	0x1b14
0x1c14: cbz	r0,0x1c34
0x1c16: mov.w	r1,#0x40000000
0x1c1a: mov.w	r3,#0x10000000
0x1c1e: ldr.w	r2,[r1,#0xee4]
0x1c22: ldr.w	r3,[r3,#0x258]
0x1c26: bic	r2,r2,#0xf
0x1c2a: and	r3,r3,#0xf
0x1c2e: orrs	r3,r2
0x1c30: str.w	r3,[r1,#0xee4]
0x1c34: bl	0x1b14
0x1c34: bl	0x1b14
0x1c38: cbz	r0,0x1c44
0x1c3a: ldr	r3,[0x1cf0]
0x1c3c: mov.w	r2,#0x200
0x1c40: str.w	r2,[r3,#0x640]
0x1c44: mov.w	r3,#0x10000000
0x1c48: ldr.w	r3,[r3,#0x130]
0x1c4c: cmp	r3,#0x8
0x1c4e: bne	0x1c86
0x1c44: mov.w	r3,#0x10000000
0x1c48: ldr.w	r3,[r3,#0x130]
0x1c4c: cmp	r3,#0x8
0x1c4e: bne	0x1c86
0x1c50: mov.w	r3,#0x40000000
0x1c54: ldr.w	r2,[r3,#0x400]
0x1c58: lsls	r2,r2,#0x1f
0x1c5a: itt	mi
0x1c5c: mvn.mi	r2,#0x1
0x1c60: str.w.mi	r2,[r3,#0x400]
0x1c64: mov.w	r3,#0x10000000
0x1c68: ldr.w	r3,[r3,#0x134]
0x1c6c: cmp	r3,#0x5
0x1c6e: bhi	0x1c76
0x1c70: ldr	r2,[0x1cf4]
0x1c72: ldrb	r3,[r2,r3]
0x1c74: cbz	r3,0x1c86
0x1c76: mov.w	r3,#0x10001000
0x1c7a: ldr.w	r2,[r3,#0x208]
0x1c7e: mov.w	r3,#0x40000000
0x1c82: str.w	r2,[r3,#0x558]
0x1c86: mov.w	r3,#0x10001000
0x1c8a: ldr.w	r2,[r3,#0x200]
0x1c8e: cmp	r2,#0x0
0x1c90: blt	0x1c9a
0x1c86: mov.w	r3,#0x10001000
0x1c8a: ldr.w	r2,[r3,#0x200]
0x1c8e: cmp	r2,#0x0
0x1c90: blt	0x1c9a
0x1c92: ldr.w	r3,[r3,#0x204]
0x1c96: cmp	r3,#0x0
0x1c98: bge	0x1ce0
0x1c9a: ldr	r1,[0x1cf8]
0x1c9c: movs	r3,#0x1
0x1c9e: mov.w	r0,#0x10001000
0x1ca2: str.w	r3,[r1,#0x504]
0x1ca6: movs	r4,#0x12
0x1ca8: bl	0x1b38
0x1cac: str.w	r4,[r0,#0x200]
0x1cb0: bl	0x1b38
0x1cb4: str.w	r4,[r0,#0x204]
0x1cb8: bl	0x1b38
0x1cbc: movs	r3,#0x0
0x1cbe: str.w	r3,[r1,#0x504]
0x1cc2: bl	0x1b38
0x1cc6: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0x1cca: ldr	r1,[0x1cfc]
0x1ccc: ldr	r3,[0x1d00]
0x1cce: ldr	r2,[r1,#0xc]
0x1cd0: and	r2,r2,#0x700
0x1cd4: orrs	r3,r2
0x1cd6: str	r3,[r1,#0xc]
0x1cd8: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0x1cdc: nop	
0x1cde: b	0x1cdc
0x1cdc: nop	
0x1cde: b	0x1cdc
0x1ce0: pop	{ r4, pc }
0x1ce2: nop	
0x1d04: push	{ r4, r5, lr }
0x1d06: ldr	r4,[r0,#0x0]
0x1d08: cbz	r4,0x1d3e
0x1d06: ldr	r4,[r0,#0x0]
0x1d08: cbz	r4,0x1d3e
0x1d0a: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1d0e: clz	r3,r4
CallOther(out=Register(name=r3, size=4), in=[Constant(value=0x0, size=4), Register(name=r4, size=4)])
0x1d12: rsb.w	r3,r3,#0x1f
0x1d16: uxtb	r3, r3
0x1d18: movs	r2,#0x1
0x1d1a: lsls	r2,r3
0x1d1c: bic.w	r2,r4,r2
0x1d20: ldrex	r5,[r0,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1d24: cmp	r5,r4
0x1d26: bne	0x1d32
0x1d20: ldrex	r5,[r0,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1d24: cmp	r5,r4
0x1d26: bne	0x1d32
0x1d28: strex	r12,r2,[r0,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x1d2c: cmp.w	r12,#0x0
0x1d30: bne	0x1d20
0x1d32: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1d36: bne	0x1d06
0x1d38: ldr	r0,[0x1d44]
0x1d3a: strb	r3,[r1,#0x0]
0x1d3c: pop	{ r4, r5, pc }
0x1d3c: pop	{ r4, r5, pc }
0x1d3e: ldr	r0,[0x1d48]
0x1d40: b	0x1d3c
0x1d42: nop	
0x1d4c: push	{ r4, lr }
0x1d4e: ldr	r3,[r0,#0x0]
0x1d50: lsrs	r3,r1
0x1d52: lsls	r3,r3,#0x1f
0x1d54: bmi	0x1d80
0x1d56: movs	r3,#0x1
0x1d58: lsls	r3,r1
0x1d5a: ldr	r2,[r0,#0x0]
0x1d5c: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1d60: orr.w	r1,r3,r2
0x1d64: ldrex	r4,[r0,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1d68: cmp	r4,r2
0x1d6a: bne	0x1d76
0x1d5a: ldr	r2,[r0,#0x0]
0x1d5c: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1d60: orr.w	r1,r3,r2
0x1d64: ldrex	r4,[r0,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1d68: cmp	r4,r2
0x1d6a: bne	0x1d76
0x1d64: ldrex	r4,[r0,#0x0]
CallOther(in=[Constant(value=0x10e, size=4), Varnode(space=unique, offset=0x8b100, size=4)])
0x1d68: cmp	r4,r2
0x1d6a: bne	0x1d76
0x1d6c: strex	r12,r1,[r0,#0x0]
CallOther(out=Varnode(space=unique, offset=0xb7680, size=1), in=[Constant(value=0x26, size=4), Varnode(space=unique, offset=0xb7580, size=4)])
0x1d70: cmp.w	r12,#0x0
0x1d74: bne	0x1d64
0x1d76: dmb	#0x1b
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1b, size=1)])
0x1d7a: bne	0x1d5a
0x1d7c: ldr	r0,[0x1d84]
0x1d7e: pop	{ r4, pc }
0x1d7e: pop	{ r4, pc }
0x1d80: ldr	r0,[0x1d88]
0x1d82: b	0x1d7e
0x1d8c: ldr	r3,[0x1d94]
0x1d8e: str.w	r0,[r3,#0x504]
0x1d92: bx	lr
0x1d98: push	{ r0, r1, r2, r4, r5, r6, r7, lr }
0x1d9a: mov	r4,r0
0x1d9c: cbz	r0,0x1da6
0x1d9e: cmp	r0,#0x1
0x1da0: beq	0x1dea
0x1da2: add	sp,#0xc
0x1da4: pop	{ r4, r5, r6, r7, pc }
0x1da6: mov.w	r3,#0x40000000
0x1daa: movs	r2,#0x2
0x1dac: str.w	r2,[r3,#0x308]
0x1db0: movs	r2,#0x1
0x1db2: str	r2,[r3,#0xc]
0x1db4: str.w	r0,[r3,#0x104]
0x1db8: ldr.w	r3,[r3,#0x104]
0x1dbc: mov	r6,r0
0x1dbe: movs	r3,#0x1
0x1dc0: strb.w	r3,[sp,#0x7]
0x1dc4: movw	r5,#0x2710
0x1dc8: mov.w	r7,#0x40000000
0x1dcc: cbz	r4,0x1e04
0x1dbe: movs	r3,#0x1
0x1dc0: strb.w	r3,[sp,#0x7]
0x1dc4: movw	r5,#0x2710
0x1dc8: mov.w	r7,#0x40000000
0x1dcc: cbz	r4,0x1e04
0x1dcc: cbz	r4,0x1e04
0x1dce: cmp	r4,#0x1
0x1dd0: bne	0x1da2
0x1dd2: ldr.w	r3,[r7,#0x40c]
0x1dd6: and	r3,r3,#0x10000
0x1dda: cbnz	r6,0x1e48
0x1ddc: cbz	r3,0x1e40
0x1dde: movs	r0,#0x1
0x1de0: bl	0x3f06
0x1de4: subs	r5,#0x1
0x1de6: bne	0x1dd2
0x1de8: b	0x1e40
0x1dea: mov.w	r3,#0x40000000
0x1dee: movs	r2,#0x0
0x1df0: str.w	r0,[r3,#0x308]
0x1df4: str	r0,[r3,#0x4]
0x1df6: str.w	r2,[r3,#0x100]
0x1dfa: ldr.w	r3,[r3,#0x100]
0x1dfe: add.w	r6,sp,#0x7
0x1e02: b	0x1dbe
0x1e04: ldr.w	r3,[r7,#0x418]
0x1e08: and	r3,r3,#0x10000
0x1e0c: cbnz	r6,0x1e1e
0x1e0e: cmp	r3,#0x0
0x1e10: beq	0x1da2
0x1e12: movs	r0,#0x1
0x1e14: bl	0x3f06
0x1e18: subs	r5,#0x1
0x1e1a: bne	0x1e04
0x1e1c: b	0x1da2
0x1e1e: ldr.w	r2,[r7,#0x418]
0x1e22: and	r2,r2,#0x3
0x1e26: str	r2,[r6,#0x0]
0x1e28: cmp	r3,#0x0
0x1e2a: beq	0x1da2
0x1e2c: ldrb.w	r0,[sp,#0x7]
0x1e30: cmp	r0,#0x1
0x1e32: bne	0x1e3c
0x1e34: bl	0x3f06
0x1e38: subs	r5,#0x1
0x1e3a: bne	0x1dcc
0x1e3c: cmp	r4,#0x1
0x1e3e: bne	0x1da2
0x1e40: ldr	r3,[0x1e58]
0x1e42: movs	r2,#0x0
0x1e44: strb	r2,[r3,#0x5]
0x1e46: b	0x1da2
0x1e48: ldr.w	r2,[r7,#0x40c]
0x1e4c: and	r2,r2,#0x1
0x1e50: strb	r2,[r6,#0x0]
0x1e52: cmp	r3,#0x0
0x1e54: bne	0x1e2c
0x1e56: b	0x1e40
0x1e5c: ldr	r3,[0x1e70]
0x1e5e: ldrb	r2,[r3,#0x4]
0x1e60: cbnz	r2,0x1e6c
0x1e62: movs	r2,#0x1
0x1e64: str	r0,[r3,#0x0]
0x1e66: strh	r2,[r3,#0x4]
0x1e68: ldr	r0,[0x1e74]
0x1e6a: bx	lr
0x1e6c: ldr	r0,[0x1e78]
0x1e6e: bx	lr
0x1e7c: push	{ r3, lr }
0x1e7e: ldr	r3,[0x1e9c]
0x1e80: ldr	r3,[r3,#0x0]
0x1e82: cbz	r3,0x1e90
0x1e84: movs	r0,#0x0
0x1e86: bl	0x824
0x1e8a: cbnz	r0,0x1e90
0x1e8c: bl	0x808
0x1e90: mov.w	r3,#0x40000000
0x1e94: movs	r2,#0x0
0x1e96: str.w	r2,[r3,#0x518]
0x1e9a: pop	{ r3, pc }
0x1ea0: push	{ r4, lr }
0x1ea2: cbz	r0,0x1eaa
0x1ea4: cmp	r0,#0x1
0x1ea6: beq	0x1f30
0x1ea8: pop	{ r4, pc }
0x1eaa: mov.w	r3,#0x40000000
0x1eae: ldr.w	r1,[r3,#0x418]
0x1eb2: ldr.w	r2,[r3,#0x418]
0x1eb6: lsls	r0,r1,#0xf
0x1eb8: bpl	0x1efe
0x1eba: and	r3,r2,#0x3
0x1ebe: cmp	r3,#0x1
0x1ec0: beq	0x1ecc
0x1ec2: cbz	r3,0x1eca
0x1ec4: movs	r0,#0x0
0x1ec6: bl	0x1d98
0x1eca: movs	r3,#0x0
0x1ecc: mov.w	r2,#0x40000000
0x1ed0: movs	r0,#0x2
0x1ed2: str.w	r3,[r2,#0x518]
0x1ed6: movs	r2,#0x8
0x1ed8: mov.w	r3,#0x104
0x1edc: add.w	r3,r3,#0x40000000
0x1ee0: movs	r1,#0x0
0x1ee2: str	r1,[r3,#0x0]
0x1ee4: add.w	r2,r2,#0x40000000
0x1ee8: ldr	r4,[r3,#0x0]
0x1eea: movs	r4,#0x1
0x1eec: str	r4,[r2,#0x0]
0x1eee: ldr	r2,[0x1f44]
0x1ef0: ldr	r2,[r2,#0x0]
0x1ef2: cbz	r2,0x1f38
0x1ecc: mov.w	r2,#0x40000000
0x1ed0: movs	r0,#0x2
0x1ed2: str.w	r3,[r2,#0x518]
0x1ed6: movs	r2,#0x8
0x1ed8: mov.w	r3,#0x104
0x1edc: add.w	r3,r3,#0x40000000
0x1ee0: movs	r1,#0x0
0x1ee2: str	r1,[r3,#0x0]
0x1ee4: add.w	r2,r2,#0x40000000
0x1ee8: ldr	r4,[r3,#0x0]
0x1eea: movs	r4,#0x1
0x1eec: str	r4,[r2,#0x0]
0x1eee: ldr	r2,[0x1f44]
0x1ef0: ldr	r2,[r2,#0x0]
0x1ef2: cbz	r2,0x1f38
0x1edc: add.w	r3,r3,#0x40000000
0x1ee0: movs	r1,#0x0
0x1ee2: str	r1,[r3,#0x0]
0x1ee4: add.w	r2,r2,#0x40000000
0x1ee8: ldr	r4,[r3,#0x0]
0x1eea: movs	r4,#0x1
0x1eec: str	r4,[r2,#0x0]
0x1eee: ldr	r2,[0x1f44]
0x1ef0: ldr	r2,[r2,#0x0]
0x1ef2: cbz	r2,0x1f38
0x1ef4: mov.w	r3,#0x40000000
0x1ef8: str.w	r0,[r3,#0x304]
0x1efc: b	0x1ea8
0x1efe: ldr.w	r2,[r3,#0x414]
0x1f02: lsls	r1,r2,#0x1f
0x1f04: bpl	0x1eca
0x1f06: ldr.w	r2,[r3,#0x41c]
0x1f0a: lsls	r2,r2,#0x1e
0x1f0c: bmi	0x1ec4
0x1f0e: ldr	r2,[0x1f44]
0x1f10: ldr	r2,[r2,#0x0]
0x1f12: cbz	r2,0x1f1c
0x1f14: movs	r2,#0x2
0x1f16: str.w	r2,[r3,#0x304]
0x1f1a: b	0x1ea8
0x1f1c: ldr.w	r2,[r3,#0x104]
0x1f20: cmp	r2,#0x0
0x1f22: beq	0x1f1c
0x1f24: movs	r2,#0x0
0x1f26: str.w	r2,[r3,#0x104]
0x1f2a: ldr.w	r3,[r3,#0x104]
0x1f2e: b	0x1ea8
0x1f30: movs	r2,#0x0
0x1f32: mov.w	r3,#0x100
0x1f36: b	0x1edc
0x1f38: ldr	r2,[r3,#0x0]
0x1f3a: cmp	r2,#0x0
0x1f3c: beq	0x1f38
0x1f3e: str	r1,[r3,#0x0]
0x1f40: ldr	r3,[r3,#0x0]
0x1f42: b	0x1ea8
0x1f48: push	{ r4, lr }
0x1f4a: mov.w	r3,#0x40000000
0x1f4e: ldr.w	r2,[r3,#0x100]
0x1f52: cbz	r2,0x1f70
0x1f54: movs	r2,#0x0
0x1f56: str.w	r2,[r3,#0x100]
0x1f5a: ldr.w	r2,[r3,#0x100]
0x1f5e: movs	r2,#0x1
0x1f60: str.w	r2,[r3,#0x308]
0x1f64: ldr	r3,[0x1fac]
0x1f66: ldrb	r0,[r3,#0x5]
0x1f68: cbnz	r0,0x1f70
0x1f6a: strb	r2,[r3,#0x5]
0x1f6c: ldr	r3,[r3,#0x0]
0x1f6e: blx	r3
0x1f70: mov.w	r3,#0x40000000
0x1f74: ldr.w	r2,[r3,#0x104]
0x1f78: cbz	r2,0x1f98
0x1f7a: movs	r2,#0x0
0x1f7c: str.w	r2,[r3,#0x104]
0x1f80: ldr.w	r2,[r3,#0x104]
0x1f84: ldr.w	r2,[r3,#0x418]
0x1f88: ldr.w	r2,[r3,#0x418]
0x1f8c: lsls	r2,r2,#0x1e
0x1f8e: bne	0x1f9a
0x1f90: movs	r2,#0x1
0x1f92: str.w	r2,[r3,#0x518]
0x1f96: str	r2,[r3,#0x8]
0x1f98: pop	{ r4, pc }
0x1f98: pop	{ r4, pc }
0x1f9a: movs	r2,#0x2
0x1f9c: str.w	r2,[r3,#0x308]
0x1fa0: ldr	r3,[0x1fac]
0x1fa2: pop.w	{ r4, lr }
0x1fa6: ldr	r3,[r3,#0x0]
0x1fa8: movs	r0,#0x1
0x1faa: bx	r3
0x1fb0: ldr	r3,[r0,#0x0]
0x1fb2: and	r2,r3,#0x1f
0x1fb6: lsrs	r3,r3,#0x5
0x1fb8: str	r2,[r0,#0x0]
0x1fba: beq	0x1fc6
0x1fbc: cmp	r3,#0x1
0x1fbe: ldr	r0,[0x1fcc]
0x1fc0: it	ne
0x1fc2: mov.ne	r0,#0x0
0x1fc4: bx	lr
0x1fc6: mov.w	r0,#0x50000000
0x1fca: bx	lr
0x1fd0: ldr	r2,[0x1fe0]
0x1fd2: lsrs	r3,r0,#0x5
0x1fd4: and	r0,r0,#0x1f
0x1fd8: ldrb	r3,[r2,r3]
0x1fda: add	r0,r3
0x1fdc: uxtb	r0, r0
0x1fde: bx	lr
0x1fe4: push	{ r4, r5, r6, lr }
0x1fe6: mov	r5,r0
0x1fe8: bl	0x1fd0
0x1fec: ldr	r4,[0x2020]
0x1fee: adds	r0,#0x8
0x1ff0: mov	r6,r1
0x1ff2: ldrh.w	r3,[r4,r0,lsl #0x1]
0x1ff6: lsls	r2,r3,#0x17
0x1ff8: bpl	0x200c
0x1ffa: ubfx	r3,r3,#0x9,#0x4
0x1ffe: add.w	r2,r4,r3, lsl #0x3
0x2002: mov	r0,r5
0x2004: ldr.w	r3,[r4,r3,lsl #0x3]
0x2008: ldr	r2,[r2,#0x4]
0x200a: blx	r3
0x200c: ldr	r3,[r4,#0x8]
0x200e: cbz	r3,0x201c
0x2010: ldr	r2,[r4,#0xc]
0x2012: mov	r1,r6
0x2014: mov	r0,r5
0x2016: pop.w	{ r4, r5, r6, lr }
0x201a: bx	r3
0x201c: pop	{ r4, r5, r6, pc }
0x201e: nop	
0x2024: push	{ r3, lr }
0x2026: bl	0x1fd0
0x202a: ldr	r3,[0x2038]
0x202c: adds	r0,#0x8
0x202e: ldrh.w	r0,[r3,r0,lsl #0x1]
0x2032: lsrs	r0,r0,#0xd
0x2034: pop	{ r3, pc }
0x2036: nop	
0x203c: push	{ r3, lr }
0x203e: bl	0x1fd0
0x2042: ldr	r3,[0x2050]
0x2044: adds	r0,#0x8
0x2046: ldrh.w	r0,[r3,r0,lsl #0x1]
0x204a: ubfx	r0,r0,#0x1,#0x1
0x204e: pop	{ r3, pc }
0x2054: push	{ r3, lr }
0x2056: bl	0x1fd0
0x205a: ldr	r3,[0x2068]
0x205c: adds	r0,#0x8
0x205e: ldrh.w	r0,[r3,r0,lsl #0x1]
0x2062: ubfx	r0,r0,#0x5,#0x1
0x2066: pop	{ r3, pc }
0x206c: mov	r3,r0
0x206e: ands	r0,r1,#0x1
0x2072: push	{ r4, lr }
0x2074: uxtb	r4, r1
0x2076: bne	0x2094
0x2078: lsls	r2,r4,#0x1e
0x207a: ubfx	r0,r4,#0x1,#0x1
0x207e: bpl	0x20a6
0x2080: ldr	r2,[0x20a8]
0x2082: ldr.w	r0,[r2,#0x520]
0x2086: str	r0,[r3,#0x4]
0x2088: str.w	r0,[r2,#0x520]
0x208c: subs	r0,#0x0
0x208e: it	ne
0x2090: mov.ne	r0,#0x1
0x2092: b	0x20a6
0x2094: mov.w	r1,#0x50000000
0x2098: ldr.w	r2,[r1,#0x520]
0x209c: str	r2,[r3,#0x0]
0x209e: str.w	r2,[r1,#0x520]
0x20a2: cmp	r2,#0x0
0x20a4: beq	0x2078
0x20a6: pop	{ r4, pc }
0x20ac: push	{ r4, lr }
0x20ae: bl	0x1fd0
0x20b2: ldr	r2,[0x20fc]
0x20b4: adds	r0,#0x8
0x20b6: ldrh.w	r3,[r2,r0,lsl #0x1]
0x20ba: lsls	r1,r3,#0x17
0x20bc: bpl	0x20f8
0x20be: ubfx	r1,r3,#0x9,#0x4
0x20c2: bic	r3,r3,#0x1f00
0x20c6: strh.w	r3,[r2,r0,lsl #0x1]
0x20ca: add.w	r4,r2,#0xe
0x20ce: movs	r0,#0x0
0x20d0: ldrh.w	r3,[r4,#0x2]!
0x20d4: tst	r3,#0x100
0x20d8: beq	0x20e2
0x20d0: ldrh.w	r3,[r4,#0x2]!
0x20d4: tst	r3,#0x100
0x20d8: beq	0x20e2
0x20da: ubfx	r3,r3,#0x9,#0x4
0x20de: cmp	r1,r3
0x20e0: beq	0x20f8
0x20e2: adds	r0,#0x1
0x20e4: cmp	r0,#0x30
0x20e6: bne	0x20d0
0x20e8: movs	r3,#0x0
0x20ea: str.w	r3,[r2,r1,lsl #0x3]
0x20ee: ldr	r0,[0x2100]
0x20f0: pop.w	{ r4, lr }
0x20f4: b.w	0x1d4c
0x20f8: pop	{ r4, pc }
0x20fa: nop	
0x2104: push	{ r4, r5, r6, r7, lr }
0x2106: mov	r5,r0
0x2108: movs	r0,#0x0
0x210a: mov	r4,r0
0x210c: movs	r6,#0x1
0x210e: mov	r7,r0
0x2110: cmp	r4,r1
0x2112: bne	0x212c
0x2110: cmp	r4,r1
0x2112: bne	0x212c
0x2114: ldr	r3,[0x215c]
0x2116: ldr.w	r2,[r3,#0x17c]
0x211a: cbz	r2,0x212a
0x211c: movs	r2,#0x0
0x211e: str.w	r2,[r3,#0x17c]
0x2122: ldr.w	r3,[r3,#0x17c]
0x2126: orr	r0,r0,#0x80000000
0x212a: pop	{ r4, r5, r6, r7, pc }
0x212a: pop	{ r4, r5, r6, r7, pc }
0x212c: uxtb	r3, r4
0x212e: lsls	r3,r3,#0x2
0x2130: add.w	r2,r3,#0x100
0x2134: lsrs	r3,r3,#0x2
0x2136: lsl.w	r3,r6,r3
0x213a: tst	r5,r3
0x213c: beq	0x2156
0x213e: add.w	r2,r2,#0x40000000
0x2142: add.w	r2,r2,#0x6000
0x2146: ldr.w	r12,[r2,#0x0]
0x214a: cmp.w	r12,#0x0
0x214e: beq	0x2156
0x2150: str	r7,[r2,#0x0]
0x2152: ldr	r2,[r2,#0x0]
0x2154: orrs	r0,r3
0x2156: adds	r4,#0x1
0x2158: b	0x2110
0x2156: adds	r4,#0x1
0x2158: b	0x2110
0x215a: nop	
0x2160: push	{ r0, r1, r2, r4, r5, r6, r7, lr }
0x2162: mov	r6,r0
0x2164: mov	r0,r1
0x2166: bl	0x1fd0
0x216a: ldr	r7,[0x21d0]
0x216c: add.w	r5,r0,#0x8
0x2170: mov	r4,r1
0x2172: ldrh.w	r3,[r7,r5,lsl #0x1]
0x2176: lsls	r3,r3,#0x1f
0x2178: bpl	0x21ca
0x217a: mov	r0,r6
0x217c: bl	0x3fd2
0x2180: mov	r0,r4
0x2182: bl	0x2054
0x2186: cbz	r0,0x219a
0x2188: mov	r0,r4
0x218a: bl	0x2024
0x218e: ldr	r1,[r6,#0x0]
0x2190: add.w	r0,r0,#0x144
0x2194: movs	r3,#0x0
0x2196: str.w	r3,[r1,r0,lsl #0x2]
0x219a: mov	r0,r4
0x219c: bl	0x20ac
0x219a: mov	r0,r4
0x219c: bl	0x20ac
0x21a0: movs	r3,#0x0
0x21a2: add	r0,sp,#0x4
0x21a4: strh.w	r3,[r7,r5,lsl #0x1]
0x21a8: str	r4,[sp,#0x4]
0x21aa: bl	0x1fb0
0x21ae: ldr	r3,[sp,#0x4]
0x21b0: add.w	r0,r0,r3, lsl #0x2
0x21b4: ldr	r3,[0x21d4]
0x21b6: ldr.w	r2,[r0,#0x700]
0x21ba: ands	r3,r2
0x21bc: orr	r3,r3,#0x2
0x21c0: str.w	r3,[r0,#0x700]
0x21c4: ldr	r0,[0x21d8]
0x21c6: add	sp,#0xc
0x21c8: pop	{ r4, r5, r6, r7, pc }
0x21c6: add	sp,#0xc
0x21c8: pop	{ r4, r5, r6, r7, pc }
0x21ca: ldr	r0,[0x21dc]
0x21cc: b	0x21c6
0x21ce: nop	
0x21e0: push	{ r0, r1, r2, r3, r4, r5, r6, r7, r8, lr  }
0x21e4: mov	r6,r2
0x21e6: mov	r8,r0
0x21e8: mov	r0,r1
0x21ea: bl	0x1fd0
0x21ee: mov	r5,r1
0x21f0: ldr	r1,[r6,#0x0]
0x21f2: mov	r4,r0
0x21f4: cbz	r1,0x223a
0x21f6: mov	r0,r5
0x21f8: bl	0x203c
0x21fc: cbz	r0,0x2206
0x21fe: mov	r0,r5
0x2200: bl	0x2054
0x2204: cbnz	r0,0x224c
0x2206: movs	r3,#0x0
0x2208: strd	r3,r3,[sp,#0x0]
0x220c: strb.w	r3,[sp,#0xe]
0x2210: strb.w	r3,[sp,#0xf]
0x2214: add.w	r2,sp,#0xf
0x2218: mov	r3,r1
0x221a: mov	r0,r5
0x221c: add.w	r1,sp,#0xe
0x2220: bl	0x3f22
0x2224: ldr	r2,[0x2344]
0x2226: add.w	r1,r4,#0x8
0x222a: ldrh.w	r3,[r2,r1,lsl #0x1]
0x222e: bic	r3,r3,#0x2
0x2232: orr	r3,r3,#0x1
0x2236: strh.w	r3,[r2,r1,lsl #0x1]
0x223a: ldr	r3,[r6,#0x4]
0x223c: cbz	r3,0x2298
0x223a: ldr	r3,[r6,#0x4]
0x223c: cbz	r3,0x2298
0x223e: mov	r0,r5
0x2240: ldrb	r7,[r3,#0x0]
0x2242: ldr	r1,[r3,#0x4]
0x2244: bl	0x203c
0x2248: cbz	r0,0x2250
0x224a: cbz	r1,0x2282
0x224c: ldr	r0,[0x2348]
0x224e: b	0x229e
0x2250: ldr	r2,[0x2344]
0x2252: add.w	r0,r4,#0x8
0x2256: ldrh.w	r3,[r2,r0,lsl #0x1]
0x225a: bic	r3,r3,#0x20
0x225e: lsls	r3,r3,#0x13
0x2260: lsrs	r3,r3,#0x13
0x2262: strh.w	r3,[r2,r0,lsl #0x1]
0x2266: cbz	r1,0x2282
0x2268: cmp	r7,#0x3
0x226a: bhi	0x224c
0x226c: ldr	r1,[r6,#0x4]
0x226e: ldr	r1,[r1,#0x4]
0x2270: ldrb.w	r12,[r1,#0x0]
0x2274: ldr.w	r1,[r8,#0x0]
0x2278: cbnz	r7,0x22a4
0x227a: add.w	r12,r12,#0x144
0x227e: str.w	r7,[r1,r12,lsl #0x2]
0x2282: ldr	r2,[0x2344]
0x2284: add.w	r1,r4,#0x8
0x2288: ldrh.w	r3,[r2,r1,lsl #0x1]
0x228c: bic	r3,r3,#0x1c
0x2290: orr.w	r3,r3,r7, lsl #0x2
0x2294: strh.w	r3,[r2,r1,lsl #0x1]
0x2298: ldr	r3,[r6,#0x8]
0x229a: cbnz	r3,0x22f0
0x2282: ldr	r2,[0x2344]
0x2284: add.w	r1,r4,#0x8
0x2288: ldrh.w	r3,[r2,r1,lsl #0x1]
0x228c: bic	r3,r3,#0x1c
0x2290: orr.w	r3,r3,r7, lsl #0x2
0x2294: strh.w	r3,[r2,r1,lsl #0x1]
0x2298: ldr	r3,[r6,#0x8]
0x229a: cbnz	r3,0x22f0
0x2298: ldr	r3,[r6,#0x8]
0x229a: cbnz	r3,0x22f0
0x229c: ldr	r0,[0x234c]
0x229e: add	sp,#0x10
0x22a0: pop.w	{ r4, r5, r6, r7, r8, pc }
0x229e: add	sp,#0x10
0x22a0: pop.w	{ r4, r5, r6, r7, r8, pc }
0x22a4: add.w	r1,r1,r12, lsl #0x2
0x22a8: orr.w	r3,r3,r12, lsl #0xd
0x22ac: ldr.w	lr,[r1,#0x510]
0x22b0: bic	lr,lr,#0x3
0x22b4: str.w	lr,[r1,#0x510]
0x22b8: ldr.w	r1,[r8,#0x0]
0x22bc: add.w	lr,r1,r12, lsl #0x2
0x22c0: orr	r3,r3,#0x20
0x22c4: ldr.w	r1,[lr,#0x510]
0x22c8: strh.w	r3,[r2,r0,lsl #0x1]
0x22cc: bic	r1,r1,#0x33c00
0x22d0: bic	r1,r1,#0x300
0x22d4: str.w	r1,[lr,#0x510]
0x22d8: lsls	r1,r5,#0x8
0x22da: ldr.w	r8,[lr,#0x510]
0x22de: and	r1,r1,#0x3f00
0x22e2: orr.w	r1,r1,r7, lsl #0x10
0x22e6: orr.w	r1,r1,r8
0x22ea: str.w	r1,[lr,#0x510]
0x22ee: b	0x2282
0x22f0: ldrd	r6,r7,[r3,#0x0]
0x22f4: mov	r0,r5
0x22f6: bl	0x20ac
0x22fa: cmp	r6,#0x0
0x22fc: beq	0x229c
0x22fe: ldr	r5,[0x2344]
0x2300: ldrd	r2,r3,[r5,#0x0]
0x2304: cmp	r6,r2
0x2306: bne	0x2310
0x2308: cmp	r7,r3
0x230a: bne	0x2310
0x230c: movs	r2,#0x0
0x230e: b	0x2324
0x2310: ldr	r0,[0x2350]
0x2312: add.w	r1,sp,#0xf
0x2316: bl	0x1d04
0x231a: ldr	r3,[0x234c]
0x231c: cmp	r0,r3
0x231e: bne	0x229e
0x2320: ldrb.w	r2,[sp,#0xf]
0x2324: str.w	r6,[r5,r2,lsl #0x3]
0x2328: add.w	r3,r5,r2, lsl #0x3
0x232c: adds	r4,#0x8
0x232e: str	r7,[r3,#0x4]
0x2330: ldrh.w	r3,[r5,r4,lsl #0x1]
0x2334: orr.w	r3,r3,r2, lsl #0x9
0x2338: orr	r3,r3,#0x100
0x233c: strh.w	r3,[r5,r4,lsl #0x1]
0x2340: b	0x229c
0x2324: str.w	r6,[r5,r2,lsl #0x3]
0x2328: add.w	r3,r5,r2, lsl #0x3
0x232c: adds	r4,#0x8
0x232e: str	r7,[r3,#0x4]
0x2330: ldrh.w	r3,[r5,r4,lsl #0x1]
0x2334: orr.w	r3,r3,r2, lsl #0x9
0x2338: orr	r3,r3,#0x100
0x233c: strh.w	r3,[r5,r4,lsl #0x1]
0x2340: b	0x229c
0x2342: nop	
0x2354: push	{ r4, r5, r6, r7, r8, r9, lr  }
0x2358: mov	r4,r1
0x235a: sub	sp,#0x14
0x235c: mov	r8,r0
0x235e: mov	r0,r4
0x2360: mov	r1,r2
0x2362: mov	r6,r3
0x2364: bl	0x1fd0
0x2368: mov	r5,r0
0x236a: cbz	r1,0x23b8
0x236c: mov	r0,r4
0x236e: bl	0x203c
0x2372: cbnz	r0,0x237c
0x2374: mov	r0,r4
0x2376: bl	0x2054
0x237a: cbnz	r0,0x23c4
0x237c: ldr	r7,[0x2444]
0x237e: add.w	r9,r5,#0x8
0x2382: ldrh.w	r3,[r7,r9,lsl #0x1]
0x2386: tst	r3,#0x1c
0x238a: beq	0x2392
0x238c: ldrb	r3,[r1,#0x1]
0x238e: cmp	r3,#0x1
0x2390: beq	0x23c4
0x2392: movs	r3,#0x1
0x2394: strb.w	r3,[sp,#0xf]
0x2398: movs	r3,#0x0
0x239a: strd	r1,r3,[sp,#0x0]
0x239e: adds	r2,r1,#0x1
0x23a0: adds	r3,r1,#0x2
0x23a2: mov	r0,r4
0x23a4: add.w	r1,sp,#0xf
0x23a8: bl	0x3f22
0x23ac: ldrh.w	r3,[r7,r9,lsl #0x1]
0x23b0: orr	r3,r3,#0x3
0x23b4: strh.w	r3,[r7,r9,lsl #0x1]
0x23b8: cmp	r6,#0x0
0x23ba: beq	0x2440
0x23b8: cmp	r6,#0x0
0x23ba: beq	0x2440
0x23bc: mov	r0,r4
0x23be: bl	0x203c
0x23c2: cbnz	r0,0x23cc
0x23c4: ldr	r0,[0x2448]
0x23c6: add	sp,#0x14
0x23c8: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x23c6: add	sp,#0x14
0x23c8: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x23cc: ldrb.w	r12,[r6,#0x0]
0x23d0: ldr.w	r3,[r8,#0x0]
0x23d4: ldr	r7,[0x2444]
0x23d6: add.w	r2,r12,#0x144
0x23da: movs	r1,#0x0
0x23dc: str.w	r1,[r3,r2,lsl #0x2]
0x23e0: add.w	r2,r5,#0x8
0x23e4: ldrh.w	r1,[r7,r2,lsl #0x1]
0x23e8: bic	r1,r1,#0x20
0x23ec: lsls	r1,r1,#0x13
0x23ee: lsrs	r1,r1,#0x13
0x23f0: strh.w	r1,[r7,r2,lsl #0x1]
0x23f4: ldrb	r5,[r6,#0x1]
0x23f6: cbz	r5,0x2440
0x23f8: ldr.w	r0,[r8,#0x0]
0x23fc: ldrb	r6,[r6,#0x2]
0x23fe: add.w	r0,r0,r12, lsl #0x2
0x2402: lsls	r5,r5,#0x10
0x2404: ldr.w	r3,[r0,#0x510]
0x2408: bic	r3,r3,#0x132000
0x240c: bic	r3,r3,#0x1f00
0x2410: str.w	r3,[r0,#0x510]
0x2414: lsls	r3,r4,#0x8
0x2416: and	r3,r3,#0x3f00
0x241a: and	r5,r5,#0x30000
0x241e: lsls	r6,r6,#0x14
0x2420: ldr.w	lr,[r0,#0x510]
0x2424: orrs	r3,r5
0x2426: and	r6,r6,#0x100000
0x242a: orr.w	r1,r1,r12, lsl #0xd
0x242e: orrs	r3,r6
0x2430: orr	r1,r1,#0x20
0x2434: orr.w	r3,r3,lr
0x2438: strh.w	r1,[r7,r2,lsl #0x1]
0x243c: str.w	r3,[r0,#0x510]
0x2440: ldr	r0,[0x244c]
0x2442: b	0x23c6
0x2440: ldr	r0,[0x244c]
0x2442: b	0x23c6
0x2450: ldr	r3,[0x2458]
0x2452: strd	r1,r2,[r3,#0x8]
0x2456: bx	lr
0x245c: push	{ r4, lr }
0x245e: mov	r0,r1
0x2460: mov	r4,r2
0x2462: bl	0x2054
0x2466: cbz	r0,0x247e
0x2468: mov	r0,r1
0x246a: bl	0x1fd0
0x246e: ldr	r3,[0x2484]
0x2470: adds	r0,#0x8
0x2472: ldrh.w	r3,[r3,r0,lsl #0x1]
0x2476: ldr	r0,[0x2488]
0x2478: lsrs	r3,r3,#0xd
0x247a: strb	r3,[r4,#0x0]
0x247c: pop	{ r4, pc }
0x247c: pop	{ r4, pc }
0x247e: ldr	r0,[0x248c]
0x2480: b	0x247c
0x2482: nop	
0x2490: push	{ r4, r5, r6, lr }
0x2492: ldr	r5,[0x24ec]
0x2494: ldrb.w	r4,[r5,#0x80]
0x2498: mov	r6,r0
0x249a: cbnz	r4,0x24e8
0x249c: mov	r1,r4
0x249e: movs	r2,#0x60
0x24a0: add.w	r0,r5,#0x10
0x24a4: bl	0x4364
0x24a8: ldr	r0,[r6,#0x0]
0x24aa: ldr	r6,[r5,#0x70]
0x24ac: mov	r1,r4
0x24ae: cmp	r6,r1
0x24b0: bne	0x24d0
0x24ae: cmp	r6,r1
0x24b0: bne	0x24d0
0x24b2: movs	r3,#0x0
0x24b4: str.w	r3,[r0,#0x17c]
0x24b8: ldr.w	r3,[r0,#0x17c]
0x24bc: sbfx	r0,r0,#0xc,#0x8
0x24c0: bl	0x808
0x24c4: movs	r3,#0x1
0x24c6: ldr	r0,[0x24f0]
0x24c8: strb.w	r3,[r5,#0x80]
0x24cc: str	r3,[r5,#0x78]
0x24ce: pop	{ r4, r5, r6, pc }
0x24ce: pop	{ r4, r5, r6, pc }
0x24d0: uxtb	r3, r1
0x24d2: lsls	r3,r3,#0x2
0x24d4: add.w	r2,r3,#0x100
0x24d8: cmp	r3,#0x7c
0x24da: it	eq
0x24dc: str.eq	r4,[r0,r2]
0x24de: add.w	r1,r1,#0x1
0x24e2: it	eq
0x24e4: ldr.eq	r3,[r0,r2]
0x24e6: b	0x24ae
0x24e8: ldr	r0,[0x24f4]
0x24ea: b	0x24ce
0x24f8: ldr	r3,[0x2508]
0x24fa: ldrb.w	r0,[r3,#0x80]
0x24fe: subs	r0,#0x0
0x2500: it	ne
0x2502: mov.ne	r0,#0x1
0x2504: bx	lr
0x2506: nop	
0x250c: ldr	r0,[0x2514]
0x250e: b.w	0x1d4c
0x2512: nop	
0x2518: ldr	r0,[0x2520]
0x251a: b.w	0x1d04
0x251e: nop	
0x2524: push	{ r0, r1, r4, r5, r6, lr }
0x2526: ldr	r3,[r0,#0x0]
0x2528: mov	r6,r2
0x252a: ldr.w	r2,[r3,#0x304]
0x252e: cmp	r2,#0x0
0x2530: it	ge
0x2532: mov.ge.w	r2,#0x80000000
0x2536: mov	r5,r0
0x2538: it	ge
0x253a: str.w.ge	r2,[r3,#0x304]
0x253e: mov	r0,r1
0x2540: mov	r4,r1
0x2542: bl	0x2054
0x2546: cbz	r0,0x258a
0x2548: mov	r0,r1
0x254a: bl	0x203c
0x254e: mov	r1,r0
0x2550: cbnz	r0,0x258a
0x2552: mov	r0,r4
0x2554: bl	0x2024
0x2558: sxth	r4, r0
0x255a: lsls	r4,r4,#0x2
0x255c: add.w	r2,r4,#0x100
0x2560: mov	r3,r0
0x2562: ldr	r0,[r5,#0x0]
0x2564: str	r1,[r0,r2]
0x2566: ldr	r1,[r5,#0x0]
0x2568: ldr	r2,[r0,r2]
0x256a: add	r1,r4
0x256c: ldr.w	r2,[r1,#0x510]
0x2570: orr	r2,r2,#0x1
0x2574: str.w	r2,[r1,#0x510]
0x2578: cbz	r6,0x2586
0x257a: ldr	r1,[r5,#0x0]
0x257c: movs	r2,#0x1
0x257e: lsl.w	r3,r2,r3
0x2582: str.w	r3,[r1,#0x304]
0x2586: add	sp,#0x8
0x2588: pop	{ r4, r5, r6, pc }
0x2586: add	sp,#0x8
0x2588: pop	{ r4, r5, r6, pc }
0x258a: mov	r0,r4
0x258c: bl	0x1fd0
0x2590: ldr	r3,[0x25d0]
0x2592: adds	r0,#0x8
0x2594: ldrh.w	r3,[r3,r0,lsl #0x1]
0x2598: ubfx	r3,r3,#0x2,#0x3
0x259c: cmp	r3,#0x4
0x259e: beq	0x25c6
0x25a0: cmp	r3,#0x5
0x25a2: beq	0x25ca
0x25a4: add	r0,sp,#0x4
0x25a6: str	r4,[sp,#0x4]
0x25a8: bl	0x1fb0
0x25ac: ldr	r2,[sp,#0x4]
0x25ae: ldr.w	r3,[r0,#0x510]
0x25b2: lsrs	r3,r2
0x25b4: and	r3,r3,#0x1
0x25b8: adds	r1,r3,#0x2
0x25ba: mov	r0,r4
0x25bc: add	sp,#0x8
0x25be: pop.w	{ r4, r5, r6, lr }
0x25c2: b.w	0x3fb4
0x25ba: mov	r0,r4
0x25bc: add	sp,#0x8
0x25be: pop.w	{ r4, r5, r6, lr }
0x25c2: b.w	0x3fb4
0x25c6: movs	r1,#0x3
0x25c8: b	0x25ba
0x25ca: movs	r1,#0x2
0x25cc: b	0x25ba
0x25ce: nop	
0x25d4: push	{ r4, r5, r6, r7, r8, r9, r10, r11, lr  }
0x25d8: ldr	r3,[0x2780]
0x25da: ldr.w	r8,[0x2784]
0x25de: ldr.w	r0,[r3,#0x304]
0x25e2: ldr.w	r1,[r8,#0x70]
0x25e6: uxtb	r0, r0
0x25e8: sub	sp,#0x24
0x25ea: orr	r0,r0,#0x80000000
0x25ee: bl	0x2104
0x25f2: subs	r5,r0,#0x0
0x25f4: bge	0x2656
0x25f6: mov	r10,r8
0x25f8: movs	r3,#0x0
0x25fa: ldr.w	r1,[r10,#0x7c]!
0x25fe: add	r0,sp,#0x18
0x2600: strd	r3,r3,[sp,#0x18]
0x2604: bl	0x206c
0x2608: ldr	r3,[0x2788]
0x260a: str	r3,[sp,#0x4]
0x260c: add.w	r9,sp,#0x18
0x2610: mov.w	r11,#0x0
0x2614: ldr	r2,[sp,#0x4]
0x2616: ldrb.w	r3,[r2],#0x1
0x261a: str	r2,[sp,#0x4]
0x261c: lsrs	r2,r3,#0x3
0x261e: and	r3,r3,#0x7
0x2622: ldrb.w	r2,[r10,r2,lsl #0x0]
0x2626: lsr.w	r3,r2,r3
0x262a: lsls	r2,r3,#0x1f
0x262c: bmi	0x2668
0x2614: ldr	r2,[sp,#0x4]
0x2616: ldrb.w	r3,[r2],#0x1
0x261a: str	r2,[sp,#0x4]
0x261c: lsrs	r2,r3,#0x3
0x261e: and	r3,r3,#0x7
0x2622: ldrb.w	r2,[r10,r2,lsl #0x0]
0x2626: lsr.w	r3,r2,r3
0x262a: lsls	r2,r3,#0x1f
0x262c: bmi	0x2668
0x262e: add.w	r9,r9,#0x4
0x2632: cmp.w	r11,#0x0
0x2636: beq	0x2662
0x2638: ldr.w	r1,[r8,#0x70]
0x263c: mov.w	r0,#0x80000000
0x2640: bl	0x2104
0x2644: ldr.w	r1,[r8,#0x7c]
0x2648: add	r0,sp,#0x18
0x264a: bl	0x206c
0x264e: cmp	r0,#0x0
0x2650: bne	0x2608
0x2652: bic	r5,r5,#0x80000000
0x2656: movs	r4,#0x1
0x2658: cmp	r5,#0x0
0x265a: bne	0x2750
0x2656: movs	r4,#0x1
0x2658: cmp	r5,#0x0
0x265a: bne	0x2750
0x2658: cmp	r5,#0x0
0x265a: bne	0x2750
0x265c: add	sp,#0x24
0x265e: pop.w	{ r4, r5, r6, r7, r8, r9, r10, r11, pc }
0x2662: mov.w	r11,#0x1
0x2666: b	0x2614
0x2668: ldr	r3,[0x278c]
0x266a: add	r3,r11
0x266c: str	r3,[sp,#0x8]
0x266e: ldr.w	r1,[r9,#0x0]
0x2672: cmp	r1,#0x0
0x2674: beq	0x262e
0x266e: ldr.w	r1,[r9,#0x0]
0x2672: cmp	r1,#0x0
0x2674: beq	0x262e
0x2676: ldr	r3,[sp,#0x8]
0x2678: rbit	r1, r1
0x267c: ldrb	r4,[r3,#0x0]
0x267e: clz	r1,r1
CallOther(out=Register(name=r1, size=4), in=[Constant(value=0x0, size=4), Register(name=r1, size=4)])
0x2682: orr.w	r4,r1,r4, lsl #0x5
0x2686: mov	r0,r4
0x2688: bl	0x1fd0
0x268c: adds	r0,#0x8
0x268e: str	r4,[sp,#0x14]
0x2690: ldrh.w	r7,[r8,r0,lsl #0x1]
0x2694: lsrs	r0,r1,#0x3
0x2696: lsrs	r3,r7,#0x2
0x2698: ldrb.w	r2,[r9,r0,lsl #0x0]
0x269c: str	r3,[sp,#0xc]
0x269e: and	r1,r1,#0x7
0x26a2: movs	r3,#0x1
0x26a4: lsl.w	r1,r3,r1
0x26a8: bic.w	r2,r2,r1
0x26ac: strb.w	r2,[r9,r0,lsl #0x0]
0x26b0: add	r0,sp,#0x14
0x26b2: bl	0x1fb0
0x26b6: ldr	r2,[sp,#0x14]
0x26b8: ldr	r3,[sp,#0xc]
0x26ba: add.w	r2,r2,#0x1c0
0x26be: ubfx	r6,r7,#0x2,#0x3
0x26c2: ldr.w	r2,[r0,r2,lsl #0x2]
0x26c6: lsls	r3,r3,#0x1d
0x26c8: mov	r7,r6
0x26ca: ubfx	r2,r2,#0x10,#0x2
0x26ce: bpl	0x271a
0x26d0: mov	r0,r4
0x26d2: mov	r1,r7
0x26d4: uxtb	r6, r2
0x26d6: bl	0x1fe4
0x26da: add	r0,sp,#0x14
0x26dc: str	r4,[sp,#0x14]
0x26de: bl	0x1fb0
0x26e2: ldr	r3,[sp,#0x14]
0x26e4: add.w	r3,r3,#0x1c0
0x26e8: ldr.w	r3,[r0,r3,lsl #0x2]
0x26ec: ubfx	r3,r3,#0x10,#0x2
0x26f0: cmp	r6,r3
0x26f2: bne	0x2704
0x26f4: movs	r1,#0x0
0x26f6: mov	r0,r4
0x26f8: bl	0x3fb4
0x26fc: mov	r1,r6
0x26fe: mov	r0,r4
0x2700: bl	0x3fb4
0x2704: add	r0,sp,#0x14
0x2706: str	r4,[sp,#0x14]
0x2708: bl	0x1fb0
0x270c: ldr	r3,[sp,#0x14]
0x270e: movs	r2,#0x1
0x2710: lsl.w	r3,r2,r3
0x2714: str.w	r3,[r0,#0x520]
0x2718: b	0x266e
0x271a: cmp	r2,#0x2
0x271c: bne	0x2738
0x271e: movs	r1,#0x3
0x2720: mov	r0,r4
0x2722: bl	0x3fb4
0x2726: and	r3,r6,#0x5
0x272a: cmp	r3,#0x1
0x272c: bne	0x2704
0x272c: bne	0x2704
0x272e: mov	r1,r7
0x2730: mov	r0,r4
0x2732: bl	0x1fe4
0x2736: b	0x2704
0x2738: movs	r1,#0x2
0x273a: mov	r0,r4
0x273c: str	r2,[sp,#0xc]
0x273e: bl	0x3fb4
0x2742: cmp	r6,#0x3
0x2744: beq	0x272e
0x2746: ldr	r2,[sp,#0xc]
0x2748: cmp	r2,#0x3
0x274a: bne	0x2704
0x274c: cmp	r6,#0x2
0x274e: b	0x272c
0x2750: rbit	r3, r5
0x2754: clz	r3,r3
CallOther(out=Register(name=r3, size=4), in=[Constant(value=0x0, size=4), Register(name=r3, size=4)])
0x2758: lsl.w	r2,r4,r3
0x275c: lsls	r3,r3,#0x2
0x275e: add.w	r3,r3,#0x40000000
0x2762: add.w	r3,r3,#0x6000
0x2766: bic.w	r5,r5,r2
0x276a: ldr.w	r0,[r3,#0x510]
0x276e: ldr.w	r1,[r3,#0x510]
0x2772: ubfx	r0,r0,#0x8,#0x6
0x2776: ubfx	r1,r1,#0x10,#0x2
0x277a: bl	0x1fe4
0x277e: b	0x2658
0x2790: mov	r1,r0
0x2792: ldr	r0,[0x2798]
0x2794: b.w	0x1d04
0x279c: push	{ r3, lr }
0x279e: ldr	r3,[0x27f0]
0x27a0: movs	r2,#0xa8
0x27a2: movs	r1,#0x0
0x27a4: mov	r0,r3
0x27a6: bl	0x4364
0x27aa: movs	r2,#0x3
0x27ac: str	r2,[r0,#0x10]
0x27ae: ldr	r1,[0x27f4]
0x27b0: str	r2,[r0,#0x14]
0x27b2: ldr	r2,[0x27f8]
0x27b4: str	r1,[r0,#0x18]
0x27b6: str	r2,[r0,#0x1c]
0x27b8: mov.w	r2,#0x400
0x27bc: str	r2,[r0,#0x20]
0x27be: movs	r2,#0x0
0x27c0: str	r2,[r0,#0x28]
0x27c2: str	r2,[r0,#0x24]
0x27c4: str	r2,[r0,#0x2c]
0x27c6: str	r1,[r0,#0x60]
0x27c8: ldr	r1,[0x27fc]
0x27ca: str	r1,[r0,#0x64]
0x27cc: movs	r1,#0x10
0x27ce: str	r1,[r0,#0x68]
0x27d0: mov	r3,r0
0x27d2: str	r2,[r0,#0x70]
0x27d4: str	r2,[r0,#0x6c]
0x27d6: str	r2,[r0,#0x74]
0x27d8: dmb	#0x1f
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1f, size=1)])
0x27dc: ldr	r1,[0x2800]
0x27de: ldrb.w	r0,[r1,#-0x1]!
0x27e2: strb	r0,[r3,r2]
0x27e4: adds	r2,#0x1
0x27e6: cmp	r2,#0x10
0x27e8: bne	0x27de
0x27de: ldrb.w	r0,[r1,#-0x1]!
0x27e2: strb	r0,[r3,r2]
0x27e4: adds	r2,#0x1
0x27e6: cmp	r2,#0x10
0x27e8: bne	0x27de
0x27ea: dmb	#0x1f
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1f, size=1)])
0x27ee: pop	{ r3, pc }
0x2804: push	{ r3, r4, r5, lr }
0x2806: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x280a: movs	r3,#0x20
0x280c: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2810: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2814: ldr	r3,[0x2830]
0x2816: ldr	r4,[r3,#0x8]
0x2818: bl	0x4060
0x281c: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x2820: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2824: mov	r0,r4
0x2826: pop.w	{ r3, r4, r5, lr }
0x282a: b.w	0x710
0x282e: nop	
0x2830: lsls	r4,r6,#0x1f
0x2832: movs	r0,#0x0
0x2834: push	{ r3, r4, r5, lr }
0x2836: ldr	r3,[0x285c]
0x2838: ldr.w	r4,[r3,r0,lsl #0x2]
0x283c: adds	r0,#0x1
0x283e: ldr.w	r5,[r3,r0,lsl #0x2]
0x2842: cmp	r5,r4
0x2844: bhi	0x2848
0x2842: cmp	r5,r4
0x2844: bhi	0x2848
0x2846: pop	{ r3, r4, r5, pc }
0x2848: ldr	r3,[r4,#0x4]
0x284a: cbz	r3,0x2856
0x284c: mov	r0,r4
0x284e: bl	0x4066
0x2852: adds	r4,#0x8
0x2854: b	0x2842
0x2856: ldr	r3,[r4,#0x0]
0x2858: blx	r3
0x285a: b	0x2852
0x2860: push	{ r4, r5, r6, lr }
0x2862: ldr	r3,[0x2910]
0x2864: ldr	r4,[0x2914]
0x2866: ldr	r5,[0x2918]
0x2868: movs	r2,#0x1
0x286a: sub	sp,#0x18
0x286c: movs	r0,#0x3
0x286e: strb	r2,[r3,#0x0]
0x2870: bl	0x2834
0x2874: bl	0x343c
0x2878: bl	0x409e
0x287c: movs	r0,#0x4
0x287e: bl	0x2834
0x2882: mov	r6,r4
0x2884: cmp	r6,r5
0x2886: add.w	r4,r4,#0x30
0x288a: bcc	0x28ae
0x288c: bl	0x2eb8
0x2890: ldr	r4,[0x2914]
0x2892: ldr	r6,[0x291c]
0x2894: cmp	r4,r5
0x2896: bcc	0x28e6
0x2894: cmp	r4,r5
0x2896: bcc	0x28e6
0x2898: bl	0x2ee0
0x289c: bl	0x100
0x28a0: ldr	r2,[0x2920]
0x28a2: ldrb	r3,[r2,#0xc]
0x28a4: bic	r3,r3,#0x1
0x28a8: strb	r3,[r2,#0xc]
0x28aa: add	sp,#0x18
0x28ac: pop	{ r4, r5, r6, pc }
0x28ae: ldr.w	r3,[r4,#-0xc]
0x28b2: str	r3,[sp,#0x14]
0x28b4: ldr.w	r3,[r4,#-0x10]
0x28b8: str	r3,[sp,#0x10]
0x28ba: ldr.w	r3,[r4,#-0x14]
0x28be: str	r3,[sp,#0xc]
0x28c0: ldr.w	r3,[r4,#-0x18]
0x28c4: str	r3,[sp,#0x8]
0x28c6: ldr.w	r3,[r4,#-0x1c]
0x28ca: str	r3,[sp,#0x4]
0x28cc: ldr.w	r3,[r4,#-0x20]
0x28d0: str	r3,[sp,#0x0]
0x28d2: ldrd	r2,r3,[r4,#-0x28]
0x28d6: ldrd	r0,r1,[r4,#-0x30]
0x28da: bl	0x2b1c
0x28de: ldr.w	r3,[r4,#-0x30]
0x28e2: str	r6,[r3,#0x54]
0x28e4: b	0x2882
0x28e6: ldrd	r2,r3,[r4,#0x28]
0x28ea: cmp.w	r3,#0xffffffff
0x28ee: it	eq
0x28f0: cmp.eq.w	r2,#0xffffffff
0x28f4: beq	0x2902
0x28f6: orrs.w	r1,r2,r3
0x28fa: ldr	r0,[r4,#0x0]
0x28fc: bne	0x2906
0x28fe: bl	0x40c2
0x2902: adds	r4,#0x30
0x2904: b	0x2894
0x2906: mov	r1,r6
0x2908: adds	r0,#0x18
0x290a: bl	0x3248
0x290e: b	0x2902
0x2924: push	{ r3, lr }
0x2926: ldr	r0,[0x2934]
0x2928: ldr	r2,[0x2938]
0x292a: movs	r1,#0x0
0x292c: subs	r2,r2,r0
0x292e: bl	0x4096
0x2932: pop	{ r3, pc }
0x293c: push	{ r4, r5, r6, lr }
0x293e: movs	r3,#0x0
0x2940: sub	sp,#0x18
0x2942: movs	r2,#0x1
0x2944: strd	r2,r3,[sp,#0x10]
0x2948: ldr	r6,[0x2998]
0x294a: ldr	r5,[0x299c]
0x294c: str	r3,[sp,#0x4]
0x294e: movs	r2,#0xf
0x2950: strd	r3,r2,[sp,#0x8]
0x2954: ldr	r1,[0x29a0]
0x2956: movs	r3,#0x14
0x2958: mla	r5,r3,r0,r5
0x295c: add.w	r6,r6,r0, lsl #0x7
0x2960: mov	r4,r0
0x2962: mov.w	r0,#0x180
0x2966: mla	r1,r0,r4,r1
0x296a: ldr	r3,[0x29a4]
0x296c: str	r5,[sp,#0x0]
0x296e: mov.w	r2,#0x140
0x2972: mov	r0,r6
0x2974: bl	0x2b1c
0x2978: ldrb	r3,[r6,#0xd]
0x297a: ldr	r2,[0x29a8]
0x297c: str	r6,[r5,#0xc]
0x297e: bic	r3,r3,#0x4
0x2982: strb	r3,[r6,#0xd]
0x2984: mov.w	r3,#0x840
0x2988: mla	r3,r4,r3,r3
0x298c: add	r3,r2
0x298e: strb	r4,[r5,#0x10]
0x2990: str	r3,[r5,#0x4]
0x2992: add	sp,#0x18
0x2994: pop	{ r4, r5, r6, pc }
0x2996: nop	
0x29ac: push	{ r0, r1, r2, r3, r4, r5, r7, lr }
0x29ae: movs	r0,#0x0
0x29b0: bl	0x2834
0x29b4: ldr	r3,[0x2a68]
0x29b6: msr	msp,r3
CallOther(out=Varnode(space=unique, offset=0x92900, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x115, size=4), Register(name=r3, size=4)])
0x29ba: ldr	r5,[0x2a6c]
0x29bc: ldr	r6,[0x2a70]
0x29be: ldr	r3,[r5,#0x14]
0x29c0: ldr	r7,[0x2a74]
0x29c2: orr	r3,r3,#0x200
0x29c6: str	r3,[r5,#0x14]
0x29c8: movs	r4,#0x0
0x29ca: movs	r3,#0xe0
0x29cc: strb.w	r3,[r5,#0x22]
0x29d0: strb	r4,[r5,#0x1f]
0x29d2: strb	r4,[r5,#0x18]
0x29d4: strb	r4,[r5,#0x19]
0x29d6: strb	r4,[r5,#0x1a]
0x29d8: strb.w	r4,[r5,#0x20]
0x29dc: ldr	r3,[r5,#0x24]
0x29de: orr	r3,r3,#0x70000
0x29e2: str	r3,[r5,#0x24]
0x29e4: strb.w	r4,[r5,#0x23]
0x29e8: bl	0x6b4
0x29ec: bl	0x960
0x29f0: mov.w	r3,#0xffffffff
0x29f4: str	r3,[r5,#0x28]
0x29f6: str	r3,[r5,#0x2c]
0x29f8: bl	0xaec
0x29fc: bl	0x9a8
0x2a00: ldr	r3,[0x2a78]
0x2a02: str	r3,[r6,#0x8]
0x2a04: movw	r2,#0x101
0x2a08: strh	r2,[r3,#0xc]
0x2a0a: strd	r4,r4,[r3,#0x60]
0x2a0e: str	r4,[r3,#0x6c]
0x2a10: bl	0x4038
0x2a14: movs	r0,#0x1
0x2a16: bl	0x2834
0x2a1a: movs	r0,#0x2
0x2a1c: ldr	r5,[0x2a7c]
0x2a1e: bl	0x2834
0x2a22: bl	0x2f20
0x2a26: ldr	r3,[0x2a80]
0x2a28: str	r5,[r6,#0x14]
0x2a2a: str	r3,[sp,#0x14]
0x2a2c: movs	r3,#0x1
0x2a2e: ldr	r1,[0x2a84]
0x2a30: str	r4,[sp,#0x0]
0x2a32: strd	r4,r3,[sp,#0xc]
0x2a36: mov.w	r2,#0x400
0x2a3a: mov	r3,r7
0x2a3c: strd	r4,r4,[sp,#0x4]
0x2a40: mov	r0,r5
0x2a42: bl	0x2b1c
0x2a46: ldrb	r2,[r5,#0xd]
0x2a48: mov	r6,r0
0x2a4a: bic	r2,r2,#0x4
0x2a4e: mov	r0,r5
0x2a50: strb	r2,[r5,#0xd]
0x2a52: bl	0x413a
0x2a56: mov	r0,r4
0x2a58: bl	0x293c
0x2a5c: mov	r2,r7
0x2a5e: mov	r1,r6
0x2a60: mov	r0,r5
0x2a62: bl	0x91c
0x2a66: nop	
0x2a6c: stc	p0,cr14,[r0,#0x0]
CallOther(in=[Constant(value=0xc, size=4), Constant(value=0x0, size=4), Register(name=cr14, size=4), Varnode(space=unique, offset=0x85580, size=4)])
0x2a70: lsls	r4,r6,#0x1f
0x2a72: movs	r0,#0x0
0x2a74: cmp	r0,#0x61
0x2a76: movs	r0,r0
0x2a88: push	{ r3, r4, r5, lr }
0x2a8a: mov	r4,r0
0x2a8c: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x2a90: movs	r3,#0x20
0x2a92: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2a96: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2a9a: bl	0x41d6
0x2a9e: cbz	r0,0x2ab4
0x2aa0: movs	r2,#0x0
0x2aa2: str	r2,[r0,#0x78]
0x2aa4: bl	0x413a
0x2aa8: mov	r1,r5
0x2aaa: ldr	r0,[0x2acc]
0x2aac: pop.w	{ r3, r4, r5, lr }
0x2ab0: b.w	0x2e30
0x2ab4: ldrd	r3,r2,[r4,#0x8]
0x2ab8: cmp	r2,r3
0x2aba: it	ne
0x2abc: add.ne	r3,#0x1
0x2abe: str	r3,[r4,#0x8]
0x2ac0: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x2ac4: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2ac8: pop	{ r3, r4, r5, pc }
0x2aca: nop	
0x2ad0: push	{ r0, r1, r4, lr }
0x2ad2: mrs	r1,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r1, size=4), in=[Constant(value=0x111, size=4)])
0x2ad6: movs	r4,#0x20
0x2ad8: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x2adc: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2ae0: ldr	r4,[r0,#0x8]
0x2ae2: cbz	r4,0x2af6
0x2ae4: subs	r4,#0x1
0x2ae6: str	r4,[r0,#0x8]
0x2ae8: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x2aec: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2af0: movs	r0,#0x0
0x2af2: add	sp,#0x8
0x2af4: pop	{ r4, pc }
0x2af6: orrs.w	r4,r2,r3
0x2afa: bne	0x2b0a
0x2afc: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x2b00: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2b04: mvn	r0,#0xf
0x2b08: b	0x2af2
0x2b0a: strd	r2,r3,[sp,#0x0]
0x2b0e: mov	r2,r0
0x2b10: ldr	r0,[0x2b18]
0x2b12: bl	0x2dd8
0x2b16: b	0x2af2
0x2b1c: push	{ r4, r5, r6, r7, r8, r9, lr  }
0x2b20: adds	r2,#0x7
0x2b22: sub	sp,#0x14
0x2b24: bic	r2,r2,#0x7
0x2b28: mov	r6,r1
0x2b2a: mov	r7,r3
0x2b2c: ldr	r1,[sp,#0x40]
0x2b2e: strb	r1,[r0,#0xc]
0x2b30: add.w	r3,r0,#0x58
0x2b34: adds	r2,#0x7f
0x2b36: strd	r3,r3,[r0,#0x58]
0x2b3a: mov	r4,r0
0x2b3c: movs	r3,#0x0
0x2b3e: bic	r2,r2,#0x3f
0x2b42: movs	r1,#0x4
0x2b44: str	r3,[r0,#0x8]
0x2b46: strb	r1,[r0,#0xd]
0x2b48: cmp	r2,#0x3f
0x2b4a: ldr	r0,[sp,#0x3c]
0x2b4c: strb	r0,[r4,#0xe]
0x2b4e: strd	r3,r3,[r4,#0x18]
0x2b52: strb	r3,[r4,#0xf]
0x2b54: add.w	r9,r6,#0x40
0x2b58: sub.w	r8,r2,#0x40
0x2b5c: bhi	0x2b6a
0x2b5e: msr	basepri,r3
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2b62: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2b66: mov	r0,r1
0x2b68: svc	0x2
CallOther(in=[Constant(value=0x10, size=4), Constant(value=0x2, size=4)])
0x2b6a: adds	r5,r6,r2
0x2b6c: mov	r1,r5
0x2b6e: mov	r0,r4
0x2b70: bl	0x3c4
0x2b74: adds	r0,#0x7
0x2b76: ldr	r3,[sp,#0x38]
0x2b78: bic	r0,r0,#0x7
0x2b7c: str	r0,[r4,#0x68]
0x2b7e: strd	r9,r8,[r4,#0x60]
0x2b82: str	r3,[sp,#0x8]
0x2b84: ldr	r3,[sp,#0x34]
0x2b86: str	r3,[sp,#0x4]
0x2b88: subs	r5,r5,r0
0x2b8a: ldr	r3,[sp,#0x30]
0x2b8c: str	r3,[sp,#0x0]
0x2b8e: mov	r2,r5
0x2b90: mov	r3,r7
0x2b92: mov	r1,r6
0x2b94: mov	r0,r4
0x2b96: bl	0x8b8
0x2b9a: movs	r3,#0x0
0x2b9c: str	r3,[r4,#0x54]
0x2b9e: ldr	r3,[0x2bb0]
0x2ba0: ldr	r3,[r3,#0x8]
0x2ba2: cbz	r3,0x2ba6
0x2ba4: ldr	r3,[r3,#0x6c]
0x2ba6: str	r3,[r4,#0x6c]
0x2ba8: mov	r0,r5
0x2baa: add	sp,#0x14
0x2bac: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x2ba6: str	r3,[r4,#0x6c]
0x2ba8: mov	r0,r5
0x2baa: add	sp,#0x14
0x2bac: pop.w	{ r4, r5, r6, r7, r8, r9, pc }
0x2bb4: push	{ r3, r4, r5, lr }
0x2bb6: ldr	r5,[0x2bec]
0x2bb8: mov	r3,r5
0x2bba: ldr.w	r4,[r3,#0x18]!
0x2bbe: cmp	r4,r3
0x2bc0: beq	0x2bc4
0x2bc2: cbnz	r4,0x2bc6
0x2bc4: ldr	r4,[r5,#0xc]
0x2bc6: ldr	r3,[r5,#0x8]
0x2bc8: cbnz	r0,0x2bda
0x2bc6: ldr	r3,[r5,#0x8]
0x2bc8: cbnz	r0,0x2bda
0x2bca: ldrb	r2,[r3,#0xd]
0x2bcc: lsls	r2,r2,#0x1b
0x2bce: bne	0x2bda
0x2bd0: ldr	r2,[r4,#0x18]
0x2bd2: cbnz	r2,0x2bda
0x2bd4: ldrh	r2,[r3,#0xe]
0x2bd6: cmp	r2,#0x7f
0x2bd8: bhi	0x2be6
0x2bda: cmp	r4,r3
0x2bdc: beq	0x2be4
0x2bde: mov	r0,r4
0x2be0: bl	0x30d8
0x2be4: mov	r3,r4
0x2be6: str	r3,[r5,#0x14]
0x2be8: pop	{ r3, r4, r5, pc }
0x2be6: str	r3,[r5,#0x14]
0x2be8: pop	{ r3, r4, r5, pc }
0x2bea: nop	
0x2bf0: push	{ r3, lr }
0x2bf2: ldrsb.w	r2,[r0,#0xd]
0x2bf6: ldrb	r3,[r0,#0xd]
0x2bf8: cmp	r2,#0x0
0x2bfa: mov	r1,r0
0x2bfc: bge	0x2c08
0x2bfe: and	r3,r3,#0x7f
0x2c02: strb	r3,[r0,#0xd]
0x2c04: bl	0x40c6
0x2c08: ldr	r3,[0x2c1c]
0x2c0a: ldr	r0,[r3,#0x8]
0x2c0c: subs	r3,r0,r1
0x2c0e: rsbs	r0,r3
0x2c10: adcs	r0,r3
0x2c12: pop.w	{ r3, lr }
0x2c16: b.w	0x2bb4
0x2c1a: nop	
0x2c20: push	{ r4, r5, r6 }
0x2c22: ldrsb.w	r3,[r0,#0xd]
0x2c26: ldrb	r2,[r0,#0xd]
0x2c28: cmp	r3,#0x0
0x2c2a: blt	0x2c80
0x2c2c: lsls	r3,r2,#0x1b
0x2c2e: bne	0x2c80
0x2c30: ldr	r3,[r0,#0x18]
0x2c32: cbnz	r3,0x2c80
0x2c34: ldr	r1,[0x2c84]
0x2c36: orn	r2,r2,#0x7f
0x2c3a: strb	r2,[r0,#0xd]
0x2c3c: mov	r2,r1
0x2c3e: ldr.w	r4,[r2,#0x18]!
0x2c42: cmp	r4,r2
0x2c44: it	ne
0x2c46: mov.ne	r3,r4
0x2c48: ldr	r4,[r1,#0x1c]
0x2c4a: cbnz	r3,0x2c56
0x2c4a: cbnz	r3,0x2c56
0x2c4c: strd	r2,r4,[r0,#0x0]
0x2c50: str	r0,[r4,#0x0]
0x2c52: str	r0,[r1,#0x1c]
0x2c54: b	0x2c70
0x2c56: ldrsb.w	r5,[r0,#0xe]
0x2c5a: ldrsb.w	r6,[r3,#0xe]
0x2c5e: cmp	r5,r6
0x2c60: beq	0x2c78
0x2c62: cmp	r6,r5
0x2c64: ble	0x2c78
0x2c66: ldr	r2,[r3,#0x4]
0x2c68: strd	r3,r2,[r0,#0x0]
0x2c6c: str	r0,[r2,#0x0]
0x2c6e: str	r0,[r3,#0x4]
0x2c70: pop	{ r4, r5, r6 }
0x2c72: movs	r0,#0x0
0x2c74: b.w	0x2bb4
0x2c70: pop	{ r4, r5, r6 }
0x2c72: movs	r0,#0x0
0x2c74: b.w	0x2bb4
0x2c78: cmp	r4,r3
0x2c7a: beq	0x2c4c
0x2c7c: ldr	r3,[r3,#0x0]
0x2c7e: b	0x2c4a
0x2c80: pop	{ r4, r5, r6 }
0x2c82: bx	lr
0x2c88: push	{ r4, r5, r6, r7, r8, lr  }
0x2c8c: cmp	r2,#0x0
0x2c8e: ldrb	r2,[r0,#0xd]
0x2c90: mov	r6,r1
0x2c92: ite	eq
0x2c94: mov.eq	r1,#0x10
0x2c96: mov.ne	r1,#0x8
0x2c98: tst	r1,r2
0x2c9a: mov	r4,r0
0x2c9c: bne	0x2cbe
0x2c9e: orr.w	r3,r1,r2
0x2ca2: lsrs	r2,r2,#0x7
0x2ca4: bne	0x2cd8
0x2ca6: strb	r3,[r0,#0xd]
0x2ca8: cmp	r1,#0x8
0x2caa: beq	0x2ce4
0x2ca8: cmp	r1,#0x8
0x2caa: beq	0x2ce4
0x2cac: movs	r0,#0x1
0x2cae: bl	0x2bb4
0x2cb2: dmb	#0x1f
CallOther(in=[Constant(value=0x2d, size=4), Constant(value=0x1f, size=1)])
0x2cb6: ldrb	r3,[r4,#0xd]
0x2cb8: bic	r3,r3,#0x60
0x2cbc: strb	r3,[r4,#0xd]
0x2cbe: ldr	r3,[0x2d5c]
0x2cc0: ldr	r3,[r3,#0x8]
0x2cc2: cmp	r3,r4
0x2cc4: bne	0x2d4e
0x2cbe: ldr	r3,[0x2d5c]
0x2cc0: ldr	r3,[r3,#0x8]
0x2cc2: cmp	r3,r4
0x2cc4: bne	0x2d4e
0x2cc6: mrs	r3,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x2cca: cmp	r3,#0x0
0x2ccc: bne	0x2d4e
0x2cce: mov	r0,r6
0x2cd0: pop.w	{ r4, r5, r6, r7, r8, lr }
0x2cd4: b.w	0x73c
0x2cd8: and	r3,r3,#0x7f
0x2cdc: strb	r3,[r0,#0xd]
0x2cde: bl	0x40c6
0x2ce2: b	0x2ca8
0x2ce4: ldr	r3,[r4,#0x8]
0x2ce6: cbz	r3,0x2cee
0x2ce8: mov	r0,r4
0x2cea: bl	0x40d6
0x2cee: add.w	r0,r4,#0x18
0x2cf2: bl	0x4250
0x2cf6: ldr	r5,[r4,#0x58]
0x2cf8: add.w	r7,r4,#0x58
0x2cfc: cmp	r7,r5
0x2cfe: beq	0x2d24
0x2d00: mov.w	r8,#0x0
0x2d04: cbz	r5,0x2d24
0x2d04: cbz	r5,0x2d24
0x2d06: mov	r0,r5
0x2d08: bl	0x40d6
0x2d0c: add.w	r0,r5,#0x18
0x2d10: bl	0x4250
0x2d14: str.w	r8,[r5,#0x78]
0x2d18: mov	r0,r5
0x2d1a: bl	0x2c20
0x2d1e: ldr	r5,[r4,#0x58]
0x2d20: cmp	r7,r5
0x2d22: bne	0x2d04
0x2d24: ldr	r5,[0x2d5c]
0x2d26: ldr	r3,[r5,#0x8]
0x2d28: cmp	r4,r3
0x2d2a: bne	0x2cac
0x2d2c: mrs	r3,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x2d30: cmp	r3,#0x0
0x2d32: beq	0x2cac
0x2d34: movs	r0,#0x1
0x2d36: bl	0x2bb4
0x2d3a: ldr	r3,[0x2d60]
0x2d3c: str	r3,[r5,#0x8]
0x2d3e: movw	r2,#0x101
0x2d42: strh	r2,[r3,#0xc]
0x2d44: movs	r2,#0x0
0x2d46: strd	r2,r2,[r3,#0x60]
0x2d4a: str	r2,[r3,#0x6c]
0x2d4c: b	0x2cb2
0x2d4e: msr	basepri,r6
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r6, size=4)])
0x2d52: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2d56: pop.w	{ r4, r5, r6, r7, r8, pc }
0x2d5a: nop	
0x2d64: push	{ r4, r5, r6, lr }
0x2d66: ldrsb.w	r2,[r0,#0xd]
0x2d6a: ldrb	r3,[r0,#0xd]
0x2d6c: cmp	r2,#0x0
0x2d6e: mov	r1,r0
0x2d70: bge	0x2d7c
0x2d72: and	r3,r3,#0x7f
0x2d76: strb	r3,[r0,#0xd]
0x2d78: bl	0x40c6
0x2d7c: ldrb	r3,[r1,#0xd]
0x2d7e: ldr	r2,[0x2dd4]
0x2d80: orn	r3,r3,#0x7f
0x2d84: mov	r0,r2
0x2d86: strb	r3,[r1,#0xd]
0x2d88: ldr.w	r3,[r0,#0x18]!
0x2d8c: ldr	r4,[r2,#0x1c]
0x2d8e: cmp	r3,r0
0x2d90: it	eq
0x2d92: mov.eq	r3,#0x0
0x2d94: cbnz	r3,0x2da0
0x2d94: cbnz	r3,0x2da0
0x2d96: strd	r0,r4,[r1,#0x0]
0x2d9a: str	r1,[r4,#0x0]
0x2d9c: str	r1,[r2,#0x1c]
0x2d9e: b	0x2dba
0x2da0: ldrsb.w	r5,[r1,#0xe]
0x2da4: ldrsb.w	r6,[r3,#0xe]
0x2da8: cmp	r5,r6
0x2daa: beq	0x2dca
0x2dac: cmp	r6,r5
0x2dae: ble	0x2dca
0x2db0: ldr	r0,[r3,#0x4]
0x2db2: strd	r3,r0,[r1,#0x0]
0x2db6: str	r1,[r0,#0x0]
0x2db8: str	r1,[r3,#0x4]
0x2dba: ldr	r0,[r2,#0x8]
0x2dbc: subs	r3,r0,r1
0x2dbe: rsbs	r0,r3
0x2dc0: pop.w	{ r4, r5, r6, lr }
0x2dc4: adcs	r0,r3
0x2dc6: b.w	0x2bb4
0x2dba: ldr	r0,[r2,#0x8]
0x2dbc: subs	r3,r0,r1
0x2dbe: rsbs	r0,r3
0x2dc0: pop.w	{ r4, r5, r6, lr }
0x2dc4: adcs	r0,r3
0x2dc6: b.w	0x2bb4
0x2dca: cmp	r4,r3
0x2dcc: beq	0x2d96
0x2dce: ldr	r3,[r3,#0x0]
0x2dd0: b	0x2d94
0x2dd2: nop	
0x2dd8: push	{ r3, r4, r5, r6, r7, lr }
0x2dda: ldr	r3,[0x2e24]
0x2ddc: mov	r4,r1
0x2dde: mov	r1,r2
0x2de0: ldr	r2,[0x2e28]
0x2de2: ldr	r0,[r3,#0x8]
0x2de4: str	r0,[r2,#0x0]
0x2de6: ldrd	r7,r6,[sp,#0x18]
0x2dea: mrs	r2,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r2, size=4), in=[Constant(value=0x111, size=4)])
0x2dee: movs	r2,#0x20
0x2df0: msr	basepri_max,r2
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x2df4: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2df8: ldr	r5,[r3,#0x8]
0x2dfa: mov	r0,r5
0x2dfc: bl	0x40ea
0x2e00: cmp.w	r6,#0xffffffff
0x2e04: it	eq
0x2e06: cmp.eq.w	r7,#0xffffffff
0x2e0a: beq	0x2e1a
0x2e0c: ldr	r1,[0x2e2c]
0x2e0e: mov	r2,r7
0x2e10: mov	r3,r6
0x2e12: add.w	r0,r5,#0x18
0x2e16: bl	0x3248
0x2e1a: mov	r0,r4
0x2e1c: pop.w	{ r3, r4, r5, r6, r7, lr }
0x2e20: b.w	0x73c
0x2e30: cbnz	r1,0x2e46
0x2e32: mrs	r0,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x2e36: cbnz	r0,0x2e46
0x2e38: ldr	r3,[0x2e50]
0x2e3a: ldr	r2,[r3,#0x14]
0x2e3c: ldr	r3,[r3,#0x8]
0x2e3e: cmp	r2,r3
0x2e40: beq	0x2e46
0x2e42: b.w	0x73c
0x2e46: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x2e4a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2e4e: bx	lr
0x2e54: push	{ r4, lr }
0x2e56: mrs	r4,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r4, size=4), in=[Constant(value=0x111, size=4)])
0x2e5a: movs	r2,#0x20
0x2e5c: msr	basepri_max,r2
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x2e60: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2e64: ldrb	r2,[r0,#0xd]
0x2e66: lsls	r1,r2,#0x1d
0x2e68: bmi	0x2e74
0x2e6a: msr	basepri,r4
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x2e6e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2e72: pop	{ r4, pc }
0x2e74: bic	r2,r2,#0x4
0x2e78: strb	r2,[r0,#0xd]
0x2e7a: bl	0x2c20
0x2e7e: mov	r1,r4
0x2e80: ldr	r0,[0x2e8c]
0x2e82: pop.w	{ r4, lr }
0x2e86: b.w	0x2e30
0x2e8a: nop	
0x2e90: mov	r3,r0
0x2e92: cbnz	r0,0x2ea8
0x2e94: mrs	r2,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x2e98: cbnz	r2,0x2ea8
0x2e9a: ldr	r2,[0x2eb4]
0x2e9c: ldr	r1,[r2,#0x14]
0x2e9e: ldr	r2,[r2,#0x8]
0x2ea0: cmp	r1,r2
0x2ea2: beq	0x2ea8
0x2ea4: b.w	0x73c
0x2ea8: msr	basepri,r3
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2eac: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2eb0: bx	lr
0x2eb2: nop	
0x2eb8: mrs	r1,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r1, size=4), in=[Constant(value=0x111, size=4)])
0x2ebc: movs	r3,#0x20
0x2ebe: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2ec2: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2ec6: ldr	r3,[0x2edc]
0x2ec8: ldr	r2,[r3,#0x8]
0x2eca: ldrb	r3,[r2,#0xf]
0x2ecc: subs	r3,#0x1
0x2ece: strb	r3,[r2,#0xf]
0x2ed0: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x2ed4: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2ed8: bx	lr
0x2eda: nop	
0x2ee0: push	{ r3, r4, r5, lr }
0x2ee2: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x2ee6: movs	r4,#0x20
0x2ee8: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x2eec: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2ef0: ldr	r3,[0x2f1c]
0x2ef2: ldr	r2,[r3,#0x8]
0x2ef4: ldrb	r3,[r2,#0xf]
0x2ef6: adds	r3,#0x1
0x2ef8: strb	r3,[r2,#0xf]
0x2efa: movs	r0,#0x0
0x2efc: bl	0x2bb4
0x2f00: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x2f04: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2f08: mrs	r0,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x111, size=4)])
0x2f0c: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x2f10: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2f14: pop.w	{ r3, r4, r5, lr }
0x2f18: b.w	0x2e90
0x2f1c: lsls	r4,r6,#0x1f
0x2f1e: movs	r0,#0x0
0x2f20: ldr	r3,[0x2f2c]
0x2f22: add.w	r2,r3,#0x18
0x2f26: strd	r2,r2,[r3,#0x18]
0x2f2a: bx	lr
0x2f30: push	{ r3, r4, r5, r6, r7, lr }
0x2f32: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x2f36: movs	r3,#0x20
0x2f38: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2f3c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2f40: ldr	r1,[0x2fa8]
0x2f42: ldr	r0,[r1,#0x8]
0x2f44: ldrb	r3,[r0,#0xd]
0x2f46: and	r3,r3,#0x7f
0x2f4a: strb	r3,[r0,#0xd]
0x2f4c: bl	0x40c6
0x2f50: ldr	r3,[r1,#0x8]
0x2f52: ldrb	r2,[r3,#0xd]
0x2f54: mov	r0,r1
0x2f56: orn	r2,r2,#0x7f
0x2f5a: strb	r2,[r3,#0xd]
0x2f5c: ldr.w	r2,[r0,#0x18]!
0x2f60: ldr	r4,[r1,#0x1c]
0x2f62: cmp	r2,r0
0x2f64: it	eq
0x2f66: mov.eq	r2,#0x0
0x2f68: cbnz	r2,0x2f74
0x2f68: cbnz	r2,0x2f74
0x2f6a: strd	r0,r4,[r3,#0x0]
0x2f6e: str	r3,[r4,#0x0]
0x2f70: str	r3,[r1,#0x1c]
0x2f72: b	0x2f8e
0x2f74: ldrsb.w	r6,[r3,#0xe]
0x2f78: ldrsb.w	r7,[r2,#0xe]
0x2f7c: cmp	r6,r7
0x2f7e: beq	0x2f9e
0x2f80: cmp	r7,r6
0x2f82: ble	0x2f9e
0x2f84: ldr	r1,[r2,#0x4]
0x2f86: strd	r2,r1,[r3,#0x0]
0x2f8a: str	r3,[r1,#0x0]
0x2f8c: str	r3,[r2,#0x4]
0x2f8e: movs	r0,#0x1
0x2f90: bl	0x2bb4
0x2f8e: movs	r0,#0x1
0x2f90: bl	0x2bb4
0x2f94: mov	r0,r5
0x2f96: pop.w	{ r3, r4, r5, r6, r7, lr }
0x2f9a: b.w	0x73c
0x2f9e: cmp	r2,r4
0x2fa0: beq	0x2f6a
0x2fa2: ldr	r2,[r2,#0x0]
0x2fa4: b	0x2f68
0x2fa6: nop	
0x2fa8: lsls	r4,r6,#0x1f
0x2faa: movs	r0,#0x0
0x2fac: orrs.w	r3,r0,r1
0x2fb0: push	{ r4, r5, r6, r7, r8, lr  }
0x2fb4: mov	r5,r0
0x2fb6: mov	r6,r1
0x2fb8: bne	0x2fc2
0x2fba: bl	0x2f30
0x2fbe: movs	r0,#0x0
0x2fc0: b	0x301a
0x2fc2: adds	r3,r0,#0x2
0x2fc4: sbcs	r3,r1,#0xffffffff
0x2fc8: blt	0x301e
0x2fca: bl	0x427a
0x2fce: adds	r4,r5,r0
0x2fd0: mrs	r8,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r8, size=4), in=[Constant(value=0x111, size=4)])
0x2fd4: movs	r3,#0x20
0x2fd6: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2fda: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2fde: ldr	r7,[0x3028]
0x2fe0: ldr	r3,[0x302c]
0x2fe2: ldr	r0,[r7,#0x8]
0x2fe4: str	r0,[r3,#0x0]
0x2fe6: bl	0x2bf0
0x2fd0: mrs	r8,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r8, size=4), in=[Constant(value=0x111, size=4)])
0x2fd4: movs	r3,#0x20
0x2fd6: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x2fda: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x2fde: ldr	r7,[0x3028]
0x2fe0: ldr	r3,[0x302c]
0x2fe2: ldr	r0,[r7,#0x8]
0x2fe4: str	r0,[r3,#0x0]
0x2fe6: bl	0x2bf0
0x2fea: ldr	r0,[r7,#0x8]
0x2fec: ldr	r1,[0x3030]
0x2fee: mov	r2,r5
0x2ff0: mov	r3,r6
0x2ff2: adds	r0,#0x18
0x2ff4: bl	0x3248
0x2ff8: ldr	r2,[r7,#0x8]
0x2ffa: ldrb	r3,[r2,#0xd]
0x2ffc: orr	r3,r3,#0x10
0x3000: strb	r3,[r2,#0xd]
0x3002: mov	r0,r8
0x3004: bl	0x73c
0x3008: bl	0x427a
0x300c: subs	r0,r4,r0
0x300e: sbc.w	r3,r3,r3
0x3012: cmp	r0,#0x1
0x3014: sbcs	r3,r3,#0x0
0x3018: blt	0x2fbe
0x301a: pop.w	{ r4, r5, r6, r7, r8, pc }
0x301e: mvn	r4,#0x1
0x3022: subs	r4,r4,r0
0x3024: b	0x2fd0
0x3026: nop	
0x3034: cmp.w	r1,#0xffffffff
0x3038: it	eq
0x303a: cmp.eq.w	r0,#0xffffffff
0x303e: push	{ r3, lr }
0x3040: bne	0x3050
0x3042: ldr	r3,[0x306c]
0x3044: ldr	r0,[r3,#0x8]
0x3046: bl	0x4158
0x304a: mov.w	r0,#0xffffffff
0x304e: pop	{ r3, pc }
0x304e: pop	{ r3, pc }
0x3050: bl	0x2fac
0x3054: mov.w	r1,#0x3e8
0x3058: movw	r3,#0x7fff
0x305c: movs	r2,#0x0
0x305e: smlal	r3,r2,r0,r1
0x3062: lsrs	r0,r3,#0xf
0x3064: orr.w	r0,r0,r2, lsl #0x11
0x3068: b	0x304e
0x306a: nop	
0x3070: ldr	r3,[0x3078]
0x3072: ldr	r0,[r3,#0x8]
0x3074: bx	lr
0x3076: nop	
0x307c: ldr	r3,[0x3090]
0x307e: subs	r0,r0,r3
0x3080: ldr	r3,[0x3094]
0x3082: asrs	r0,r0,#0x3
0x3084: muls	r0,r3
0x3086: ldr	r3,[0x3098]
0x3088: movs	r2,#0x1
0x308a: strb	r2,[r3,r0]
0x308c: bx	lr
0x308e: nop	
0x309c: ldrh	r3,[r0,#0xe]
0x309e: cmp	r3,#0x7f
0x30a0: bhi	0x30c8
0x30a2: ldr	r3,[0x30cc]
0x30a4: ldr	r3,[r3,#0x0]
0x30a6: cbz	r3,0x30c2
0x30a8: ldr	r3,[0x30d0]
0x30aa: ldrsb.w	r2,[r0,#0xe]
0x30ae: ldr	r3,[r3,#0x0]
0x30b0: cmp	r2,r3
0x30b2: blt	0x30c8
0x30b4: ldrb	r3,[r0,#0xd]
0x30b6: lsls	r3,r3,#0x1b
0x30b8: bne	0x30c8
0x30ba: ldr	r3,[0x30d4]
0x30bc: subs	r3,r0,r3
0x30be: it	ne
0x30c0: mov.ne	r3,#0x1
0x30c2: and	r0,r3,#0x1
0x30c6: bx	lr
0x30c2: and	r0,r3,#0x1
0x30c6: bx	lr
0x30c8: movs	r3,#0x0
0x30ca: b	0x30c2
0x30d8: push	{ r4, r5, r6, lr }
0x30da: ldr	r3,[0x3114]
0x30dc: ldr	r4,[0x3118]
0x30de: ldrb	r6,[r3,#0x10]
0x30e0: add.w	r3,r6,r6, lsl #0x1
0x30e4: add.w	r4,r4,r3, lsl #0x3
0x30e8: mov	r5,r0
0x30ea: mov	r0,r4
0x30ec: bl	0x4250
0x30f0: ldr	r3,[0x311c]
0x30f2: movs	r2,#0x0
0x30f4: mov	r0,r5
0x30f6: strb	r2,[r3,r6]
0x30f8: bl	0x309c
0x30fc: cbz	r0,0x3112
0x30fe: ldr	r3,[0x3120]
0x3100: ldr	r1,[0x3124]
0x3102: ldr	r2,[r3,#0x0]
0x3104: subs	r2,#0x1
0x3106: mov	r0,r4
0x3108: asrs	r3,r2,#0x1f
0x310a: pop.w	{ r4, r5, r6, lr }
0x310e: b.w	0x3248
0x3112: pop	{ r4, r5, r6, pc }
0x3128: push	{ r3, r4, r5, lr }
0x312a: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x312e: movs	r3,#0x20
0x3130: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x3134: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3138: ldr	r3,[0x317c]
0x313a: ldr	r2,[0x3180]
0x313c: ldr	r4,[r3,#0x8]
0x313e: ldr	r0,[r2,#0x0]
0x3140: cmp	r0,r4
0x3142: bne	0x3152
0x3144: bl	0x30d8
0x3148: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x314c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3150: pop	{ r3, r4, r5, pc }
0x3152: movs	r1,#0x0
0x3154: ldrb	r3,[r3,#0x10]
0x3156: str	r1,[r2,#0x0]
0x3158: ldr	r2,[0x3184]
0x315a: ldrb	r3,[r2,r3]
0x315c: cmp	r3,#0x0
0x315e: beq	0x3148
0x3160: mov	r0,r4
0x3162: bl	0x309c
0x3166: cmp	r0,#0x0
0x3168: beq	0x3148
0x316a: ldrb	r3,[r4,#0xd]
0x316c: lsls	r3,r3,#0x1b
0x316e: bne	0x3176
0x3170: mov	r0,r4
0x3172: bl	0x2d64
0x3176: mov	r0,r4
0x3178: b	0x3144
0x317a: nop	
0x317c: lsls	r4,r6,#0x1f
0x317e: movs	r0,#0x0
0x3180: lsrs	r4,r2,#0x20
0x3182: movs	r0,#0x0
0x3188: push	{ r3, lr }
0x318a: ldr	r0,[0x31a4]
0x318c: ldr	r2,[0x31a8]
0x318e: ldr	r1,[0x31ac]
0x3190: subs	r2,r2,r0
0x3192: bl	0x409a
0x3196: pop.w	{ r3, lr }
0x319a: ldr	r2,[0x31b0]
0x319c: ldr	r1,[0x31b4]
0x319e: ldr	r0,[0x31b8]
0x31a0: b.w	0x409a
0x31bc: ldr	r3,[0x31cc]
0x31be: ldr	r3,[r3,#0x0]
0x31c0: cbnz	r3,0x31c6
0x31c2: b.w	0x1b00
0x31c6: movs	r0,#0x0
0x31c8: bx	lr
0x31ca: nop	
0x31d0: push	{ r4, r5, lr }
0x31d2: cbz	r0,0x31f2
0x31d4: ldr	r3,[0x3204]
0x31d6: ldr	r3,[r3,#0x4]
0x31d8: cmp	r0,r3
0x31da: beq	0x31f2
0x31dc: ldr	r3,[r0,#0x0]
0x31de: cbz	r3,0x31f2
0x31e0: ldrd	r2,r1,[r3,#0x10]
0x31e4: ldrd	r4,r5,[r0,#0x10]
0x31e8: adds	r2,r2,r4
0x31ea: adc.w	r1,r1,r5
0x31ee: strd	r2,r1,[r3,#0x10]
0x31f2: ldrd	r3,r2,[r0,#0x0]
0x31f6: str	r3,[r2,#0x0]
0x31f8: str	r2,[r3,#0x4]
0x31fa: movs	r3,#0x0
0x31fc: strd	r3,r3,[r0,#0x0]
0x3200: pop	{ r4, r5, pc }
0x31f2: ldrd	r3,r2,[r0,#0x0]
0x31f6: str	r3,[r2,#0x0]
0x31f8: str	r2,[r3,#0x4]
0x31fa: movs	r3,#0x0
0x31fc: strd	r3,r3,[r0,#0x0]
0x3200: pop	{ r4, r5, pc }
0x3202: nop	
0x3208: push	{ r4, lr }
0x320a: ldr	r3,[0x3244]
0x320c: ldr	r4,[r3,#0x0]
0x320e: cmp	r4,r3
0x3210: bne	0x321c
0x3212: bl	0x31bc
0x3216: mvn	r0,#0x80000000
0x321a: pop	{ r4, pc }
0x321a: pop	{ r4, pc }
0x321c: bl	0x31bc
0x3220: cmp	r4,#0x0
0x3222: beq	0x3216
0x3224: ldrd	r3,r2,[r4,#0x10]
0x3228: subs	r3,r3,r0
0x322a: sbc.w	r2,r2,r0, asr #0x1f
0x322e: cmp.w	r3,#0x80000000
0x3232: sbcs	r1,r2,#0x0
0x3236: bge	0x3216
0x3238: cmp	r2,#0x0
0x323a: ite	ge
0x323c: mov.ge	r0,r3
0x323e: mov.lt	r0,#0x0
0x3240: b	0x321a
0x3242: nop	
0x3248: cmp.w	r3,#0xffffffff
0x324c: it	eq
0x324e: cmp.eq.w	r2,#0xffffffff
0x3252: push	{ r3, r4, r5, r6, r7, lr }
0x3254: mov	r4,r0
0x3256: mov	r5,r3
0x3258: mov	r6,r2
0x325a: beq	0x331a
0x325c: str	r1,[r0,#0x8]
0x325e: mrs	r7,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r7, size=4), in=[Constant(value=0x111, size=4)])
0x3262: movs	r3,#0x20
0x3264: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x3268: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x326c: adds	r2,#0x1
0x326e: sbcs	r3,r5,#0xffffffff
0x3272: bge	0x32be
0x3274: ldr	r1,[0x3330]
0x3276: ldrd	r2,r0,[r1,#0x0]
0x327a: mvn	r3,#0x1
0x327e: subs	r3,r3,r2
0x3280: mov.w	r2,#0xffffffff
0x3284: sbc.w	r0,r2,r0
0x3288: subs	r6,r3,r6
0x328a: sbc.w	r0,r0,r5
0x328e: cmp	r6,#0x1
0x3290: sbcs	r3,r0,#0x0
0x3294: bge	0x329a
0x3296: movs	r6,#0x1
0x3298: movs	r0,#0x0
0x329a: strd	r6,r0,[r4,#0x10]
0x329e: ldr	r6,[0x3334]
0x32a0: ldr.w	r12,[r6,#0x0]
0x32a4: ldr	r5,[r6,#0x4]
0x32a6: cmp	r12,r6
0x32a8: it	eq
0x32aa: mov.eq.w	r12,#0x0
0x32ae: cmp.w	r12,#0x0
0x32b2: bne	0x32d0
0x329a: strd	r6,r0,[r4,#0x10]
0x329e: ldr	r6,[0x3334]
0x32a0: ldr.w	r12,[r6,#0x0]
0x32a4: ldr	r5,[r6,#0x4]
0x32a6: cmp	r12,r6
0x32a8: it	eq
0x32aa: mov.eq.w	r12,#0x0
0x32ae: cmp.w	r12,#0x0
0x32b2: bne	0x32d0
0x32ae: cmp.w	r12,#0x0
0x32b2: bne	0x32d0
0x32b4: strd	r6,r5,[r4,#0x0]
0x32b8: str	r4,[r5,#0x0]
0x32ba: str	r4,[r6,#0x4]
0x32bc: b	0x32f8
0x32be: bl	0x31bc
0x32c2: adds	r6,#0x1
0x32c4: adc	r5,r5,#0x0
0x32c8: adds	r6,r6,r0
0x32ca: adc.w	r0,r5,r0, asr #0x1f
0x32ce: b	0x329a
0x32d0: ldrd	r2,r0,[r12,#0x10]
0x32d4: ldrd	r3,r1,[r4,#0x10]
0x32d8: cmp	r3,r2
0x32da: sbcs.w	lr,r1,r0
0x32de: bge	0x331c
0x32e0: subs	r2,r2,r3
0x32e2: ldr.w	r3,[r12,#0x4]
0x32e6: sbc.w	r0,r0,r1
0x32ea: strd	r2,r0,[r12,#0x10]
0x32ee: strd	r12,r3,[r4,#0x0]
0x32f2: str	r4,[r3,#0x0]
0x32f4: str.w	r4,[r12,#0x4]
0x32f8: ldr	r3,[r6,#0x0]
0x32fa: cmp	r3,r6
0x32fc: beq	0x3312
0x32f8: ldr	r3,[r6,#0x0]
0x32fa: cmp	r3,r6
0x32fc: beq	0x3312
0x32fe: cmp	r4,r3
0x3300: bne	0x3312
0x3302: ldr	r3,[0x3338]
0x3304: ldr	r4,[r3,#0x0]
0x3306: cbnz	r4,0x3312
0x3308: bl	0x3208
0x330c: mov	r1,r4
0x330e: bl	0x1aa4
0x3312: msr	basepri,r7
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r7, size=4)])
0x3316: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x331a: pop	{ r3, r4, r5, r6, r7, pc }
0x331a: pop	{ r3, r4, r5, r6, r7, pc }
0x331c: subs	r3,r3,r2
0x331e: sbc.w	r1,r1,r0
0x3322: cmp	r12,r5
0x3324: strd	r3,r1,[r4,#0x10]
0x3328: beq	0x32b4
0x332a: ldr.w	r12,[r12,#0x0]
0x332e: b	0x32ae
0x333c: push	{ r3, r4, r5, r6, r7, r8, r9, r10, r11, lr  }
0x3340: mrs	r12,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r12, size=4), in=[Constant(value=0x111, size=4)])
0x3344: movs	r3,#0x20
0x3346: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x334a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x334e: ldr.w	r10,[0x3400]
0x3352: ldr.w	r9,[0x3404]
0x3356: ldr	r7,[0x3408]
0x3358: str.w	r0,[r9,#0x0]
0x335c: ldr.w	r0,[r10,#0x0]
0x3360: movs	r4,#0x0
0x3362: cmp	r0,r10
0x3364: it	eq
0x3366: mov.eq	r0,#0x0
0x3368: movs	r5,#0x0
0x336a: ldrd	r2,r1,[r7,#0x0]
0x336e: ldr.w	r3,[r9,#0x0]
0x3372: mov	r8,r12
0x3374: cbz	r0,0x33d6
0x3376: ldrd	r6,r12,[r0,#0x10]
0x337a: asr.w	lr,r3, asr #0x1f
0x337e: cmp	r3,r6
0x3380: sbcs.w	r11,lr,r12
0x3384: bge	0x3392
0x3386: subs	r6,r6,r3
0x3388: sbc.w	r4,r12,lr
0x338c: strd	r6,r4,[r0,#0x10]
0x3390: b	0x33d6
0x3392: adds	r2,r6,r2
0x3394: adc.w	r1,r1,r6, asr #0x1f
0x3398: strd	r4,r5,[r0,#0x10]
0x339c: strd	r2,r1,[r7,#0x0]
0x33a0: bl	0x31d0
0x33a4: msr	basepri,r8
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x33a8: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x33ac: ldr	r3,[r0,#0x8]
0x33ae: blx	r3
0x33b0: mrs	r8,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r8, size=4), in=[Constant(value=0x111, size=4)])
0x33b4: movs	r3,#0x20
0x33b6: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x33ba: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x33be: ldr.w	r3,[r9,#0x0]
0x33c2: ldr.w	r0,[r10,#0x0]
0x33c6: subs	r3,r3,r6
0x33c8: cmp	r0,r10
0x33ca: mov	r12,r8
0x33cc: str.w	r3,[r9,#0x0]
0x33d0: bne	0x336a
0x33d2: ldrd	r2,r1,[r7,#0x0]
0x33d6: adds	r2,r3,r2
0x33d8: adc.w	r3,r1,r3, asr #0x1f
0x33dc: movs	r4,#0x0
0x33de: strd	r2,r3,[r7,#0x0]
0x33e2: str.w	r4,[r9,#0x0]
0x33e6: bl	0x3208
0x33d6: adds	r2,r3,r2
0x33d8: adc.w	r3,r1,r3, asr #0x1f
0x33dc: movs	r4,#0x0
0x33de: strd	r2,r3,[r7,#0x0]
0x33e2: str.w	r4,[r9,#0x0]
0x33e6: bl	0x3208
0x33ea: mov	r1,r4
0x33ec: bl	0x1aa4
0x33f0: msr	basepri,r8
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r8, size=4)])
0x33f4: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x33f8: pop.w	{ r3, r4, r5, r6, r7, r8, r9, r10, r11, lr }
0x33fc: b.w	0x3128
0x3400: lsls	r0,r6,#0x15
0x3402: movs	r0,#0x0
0x3404: lsrs	r0,r4,#0x20
0x3406: movs	r0,#0x0
0x3408: lsls	r0,r7,#0x1c
0x340a: movs	r0,#0x0
0x340c: push	{ r4, lr }
0x340e: mrs	r4,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r4, size=4), in=[Constant(value=0x111, size=4)])
0x3412: movs	r3,#0x20
0x3414: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x3418: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x341c: bl	0x31bc
0x3420: ldr	r2,[0x3438]
0x3422: mov	r3,r0
0x3424: ldrd	r0,r1,[r2,#0x0]
0x3428: adds	r0,r3,r0
0x342a: adc.w	r1,r1,r3, asr #0x1f
0x342e: msr	basepri,r4
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x3432: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3436: pop	{ r4, pc }
0x343c: ldr	r0,[0x3444]
0x343e: b.w	0x39fc
0x3442: nop	
0x3448: push	{ r0, r1, r2, r3 }
0x344a: push	{ r0, r1, r2, lr }
0x344c: ldr	r3,[0x3468]
0x344e: add	r2,sp,#0x10
0x3450: ldr	r0,[r3,#0x0]
0x3452: ldr.w	r1,[r2],#0x4
0x3456: str	r2,[sp,#0x4]
0x3458: bl	0x346c
0x345c: add	sp,#0xc
0x345e: pop.w	lr
0x3462: add	sp,#0x10
0x3464: bx	lr
0x3466: nop	
0x346c: push	{ r4, r5, r6, r7, r8, r9, r10, r11, lr  }
0x3470: sub	sp,#0x34
0x3472: ldr	r3,[r0,#0x4]
0x3474: str	r3,[sp,#0x8]
0x3476: ldrb	r3,[r0,#0x2]
0x3478: mov	r5,r2
0x347a: lsls	r2,r3,#0x1e
0x347c: mov	r8,r0
0x347e: bpl.w	0x369c
0x3482: movs	r4,#0x0
0x3484: ldrb	r6,[r1,#0x0]
0x3486: cmp	r6,#0x0
0x3488: beq.w	0x36a0
0x3484: ldrb	r6,[r1,#0x0]
0x3486: cmp	r6,#0x0
0x3488: beq.w	0x36a0
0x348c: cmp	r6,#0x25
0x348e: beq	0x34a8
0x3490: adds	r3,r1,#0x1
0x3492: str	r3,[sp,#0xc]
0x3494: adds	r4,#0x1
0x3496: ldr	r3,[sp,#0x8]
0x3498: mov	r1,r8
0x349a: mov	r0,r6
0x349c: blx	r3
0x3494: adds	r4,#0x1
0x3496: ldr	r3,[sp,#0x8]
0x3498: mov	r1,r8
0x349a: mov	r0,r6
0x349c: blx	r3
0x3496: ldr	r3,[sp,#0x8]
0x3498: mov	r1,r8
0x349a: mov	r0,r6
0x349c: blx	r3
0x349e: cmp	r0,#0x0
0x34a0: blt.w	0x3690
0x34a4: ldr	r1,[sp,#0xc]
0x34a6: b	0x3484
0x34a8: ldrb	r6,[r1,#0x1]
0x34aa: adds	r3,r1,#0x2
0x34ac: cmp	r6,#0x25
0x34ae: str	r3,[sp,#0xc]
0x34b0: beq	0x3494
0x34b2: movs	r7,#0x0
0x34b4: mov	r9,r7
0x34b6: mov	r11,r7
0x34b8: cmp.w	r11,#0x1f
0x34bc: bhi	0x3530
0x34b8: cmp.w	r11,#0x1f
0x34bc: bhi	0x3530
0x34be: sub.w	r3,r6,#0x20
0x34c2: cmp	r3,#0x10
0x34c4: bhi	0x34dc
0x34c6: tbb	[0x34ca,r3]
0x34dc: sub.w	r3,r6,#0x30
0x34e0: cmp	r3,#0x9
0x34e2: bls	0x354c
0x34e4: cmp	r6,#0x2a
0x34e6: bne	0x3558
0x34e8: tst	r11,#0x40
0x34ec: ldr.w	r3,[r5],#0x4
0x34f0: bne.w	0x35f8
0x34f4: cmp	r3,#0x0
0x34f6: ittee	ge
0x34f8: orr.ge	r11,r11,#0x20
0x34fc: mov.ge	r9,r3
0x34fe: rsb.lt.w	r9,r3,#0x0
0x3502: orr.lt	r11,r11,#0x28
0x3506: b	0x350c
0x3508: orr	r11,r11,#0x1
0x350c: ldr	r3,[sp,#0xc]
0x350e: ldrb.w	r6,[r3],#0x1
0x3512: str	r3,[sp,#0xc]
0x3514: cmp	r6,#0x0
0x3516: bne	0x34b8
0x350c: ldr	r3,[sp,#0xc]
0x350e: ldrb.w	r6,[r3],#0x1
0x3512: str	r3,[sp,#0xc]
0x3514: cmp	r6,#0x0
0x3516: bne	0x34b8
0x3518: b	0x357c
0x351a: orr	r11,r11,#0x2
0x351e: orr	r11,r11,#0x4
0x3522: b	0x350c
0x351e: orr	r11,r11,#0x4
0x3522: b	0x350c
0x3524: orr	r11,r11,#0x8
0x3528: b	0x350c
0x352a: orr	r11,r11,#0x10
0x352e: b	0x350c
0x3530: cmp.w	r11,#0x7f
0x3534: bhi	0x356a
0x3536: sub.w	r3,r6,#0x30
0x353a: cmp	r3,#0x9
0x353c: bhi	0x34e4
0x353e: tst	r11,#0x40
0x3542: beq	0x354c
0x3544: movs	r1,#0xa
0x3546: mla	r7,r1,r7,r3
0x354a: b	0x350c
0x354c: movs	r1,#0xa
0x354e: mla	r9,r1,r9,r3
0x3552: orr	r11,r11,#0x20
0x3556: b	0x350c
0x3558: cmp	r6,#0x2e
0x355a: bne	0x356a
0x355c: tst	r11,#0x40
0x3560: bne.w	0x36a0
0x3564: orr	r11,r11,#0x40
0x3568: b	0x350c
0x356a: cmp	r6,#0x6c
0x356c: beq	0x35d2
0x356e: bhi	0x35c8
0x3570: cmp	r6,#0x68
0x3572: beq	0x35e2
0x3574: cmp	r6,#0x6a
0x3576: beq	0x35f2
0x3578: cmp	r6,#0x4c
0x357a: beq	0x35f2
0x357c: cmp	r7,#0x0
0x357e: orr	r3,r6,#0x20
0x3582: it	lt
0x3584: bic.lt	r2,r11,#0x40
0x3588: sub.w	r1,r3,#0x65
0x358c: itt	lt
0x358e: uxth.lt.w	r11, r2
0x3592: mov.lt	r7,#0x0
0x3594: cmp	r1,#0x2
0x3596: bls	0x359c
0x3598: cmp	r3,#0x61
0x359a: bne	0x35fc
0x359c: adds	r5,#0x7
0x359e: bic	r5,r5,#0x7
0x35a2: ldr.w	r10,[0x3850]
0x35a6: adds	r5,#0x8
0x35a8: movs	r7,#0x7
0x35aa: tst	r11,#0x8
0x35ae: beq	0x367e
0x35aa: tst	r11,#0x8
0x35ae: beq	0x367e
0x35b0: add.w	r11,r10,r7
0x35b4: mov	r6,r10
0x35b6: cmp	r6,r11
0x35b8: bne	0x3682
0x35b6: cmp	r6,r11
0x35b8: bne	0x3682
0x35ba: sub.w	r10,r4,r10
0x35be: add.w	r2,r6,r10
0x35c2: sub.w	r9,r9,r7
0x35c6: b	0x38a8
0x35c8: cmp	r6,#0x74
0x35ca: beq	0x350c
0x35cc: cmp	r6,#0x7a
0x35ce: beq	0x350c
0x35d0: b	0x357c
0x35d2: tst	r11,#0x80
0x35d6: it	ne
0x35d8: orr.ne	r11,r11,#0x200
0x35dc: orr	r11,r11,#0x80
0x35e0: b	0x350c
0x35e2: tst	r11,#0x100
0x35e6: it	ne
0x35e8: orr.ne	r11,r11,#0x200
0x35ec: orr	r11,r11,#0x100
0x35f0: b	0x350c
0x35f2: orr	r11,r11,#0x280
0x35f6: b	0x350c
0x35f8: mov	r7,r3
0x35fa: b	0x350c
0x35fc: sub.w	r1,r6,#0x63
0x3600: cmp	r1,#0x12
0x3602: bhi.w	0x37e6
0x3606: tbh	[0x360a,r1]
0x3630: ldr.w	r3,[r5],#0x4
0x3634: strb.w	r3,[sp,#0x18]
0x3638: movs	r7,#0x1
0x363a: add.w	r10,sp,#0x18
0x363e: b	0x35aa
0x3640: ldr.w	r10,[r5],#0x4
0x3644: ldr	r3,[0x3854]
0x3646: cmp.w	r10,#0x0
0x364a: it	eq
0x364c: mov.eq	r10,r3
0x364e: tst	r11,#0x40
0x3652: ite	ne
0x3654: mov.ne	r1,r7
0x3656: mov.eq.w	r1,#0xffffffff
0x365a: mov	r0,r10
0x365c: bl	0x4282
0x3660: mov	r7,r0
0x3662: b	0x35aa
0x3664: ldr	r3,[sp,#0x8]
0x3666: mov	r1,r8
0x3668: movs	r0,#0x20
0x366a: blx	r3
0x366c: cmp	r0,#0x0
0x366e: blt	0x3690
0x3670: subs	r6,#0x1
0x3672: cmp	r7,r6
0x3674: bcc	0x3664
0x3672: cmp	r7,r6
0x3674: bcc	0x3664
0x3676: add	r4,r9
0x3678: subs	r4,r4,r6
0x367a: mov	r9,r6
0x367c: b	0x35b0
0x367e: mov	r6,r9
0x3680: b	0x3672
0x3682: ldrb.w	r0,[r6],#0x1
0x3686: ldr	r3,[sp,#0x8]
0x3688: mov	r1,r8
0x368a: blx	r3
0x368c: cmp	r0,#0x0
0x368e: bge	0x35b6
0x3690: ldrb.w	r3,[r8,#0x2]
0x3694: orr	r3,r3,#0x4
0x3698: strb.w	r3,[r8,#0x2]
0x369c: mov.w	r4,#0xffffffff
0x36a0: mov	r0,r4
0x36a2: add	sp,#0x34
0x36a4: pop.w	{ r4, r5, r6, r7, r8, r9, r10, r11, pc }
0x369c: mov.w	r4,#0xffffffff
0x36a0: mov	r0,r4
0x36a2: add	sp,#0x34
0x36a4: pop.w	{ r4, r5, r6, r7, r8, r9, r10, r11, pc }
0x36a0: mov	r0,r4
0x36a2: add	sp,#0x34
0x36a4: pop.w	{ r4, r5, r6, r7, r8, r9, r10, r11, pc }
0x36a8: tst	r11,#0x80
0x36ac: beq	0x3718
0x36ae: tst	r11,#0x200
0x36b2: beq	0x370e
0x36b4: adds	r5,#0x7
0x36b6: bic	r5,r5,#0x7
0x36ba: mov	r10,r5
0x36bc: ldr	r1,[r5,#0x4]
0x36be: ldr.w	r0,[r10],#0x8
0x36c2: bic	r5,r11,#0x10
0x36c6: cmp	r1,#0x0
0x36c8: uxth	r5, r5
0x36ca: bge	0x373c
0x36c2: bic	r5,r11,#0x10
0x36c6: cmp	r1,#0x0
0x36c8: uxth	r5, r5
0x36ca: bge	0x373c
0x36cc: rsbs	r0,r0
0x36ce: sbc.w	r1,r1,r1, lsl #0x1
0x36d2: orr	r5,r5,#0x400
0x36d6: add.w	r11,sp,#0x18
0x36da: movs	r3,#0xa
0x36dc: mov	r2,r11
0x36de: bl	0x429a
0x36d6: add.w	r11,sp,#0x18
0x36da: movs	r3,#0xa
0x36dc: mov	r2,r11
0x36de: bl	0x429a
0x36dc: mov	r2,r11
0x36de: bl	0x429a
0x36e2: sub.w	r3,r0,r11
0x36e6: str	r3,[sp,#0x4]
0x36e8: lsls	r3,r5,#0x19
0x36ea: bpl	0x37b2
0x36ec: ldr	r3,[sp,#0x4]
0x36ee: bic	r1,r5,#0x1
0x36f2: cmp	r7,r3
0x36f4: uxth	r1, r1
0x36f6: ble.w	0x383c
0x36fa: cmp	r6,#0x0
0x36fc: beq.w	0x3832
0x3700: ands	r2,r5,#0x10
0x3704: bne.w	0x3840
0x3708: mov	r11,r7
0x370a: mov	r5,r1
0x370c: b	0x3756
0x370e: mov	r10,r5
0x3710: ldr.w	r0,[r10],#0x4
0x3714: asrs	r1,r0,#0x1f
0x3716: b	0x36c2
0x3714: asrs	r1,r0,#0x1f
0x3716: b	0x36c2
0x3718: mov	r10,r5
0x371a: tst	r11,#0x100
0x371e: ldr.w	r1,[r10],#0x4
0x3722: bne	0x3728
0x3724: mov	r0,r1
0x3726: b	0x3714
0x3728: tst	r11,#0x200
0x372c: itete	ne
0x372e: sxtb.ne	r0, r1
0x3730: sxth.eq	r0, r1
0x3732: sbfx.ne	r1,r1,#0x7,#0x1
0x3736: sbfx.eq	r1,r1,#0xf,#0x1
0x373a: b	0x36c2
0x373c: orrs.w	r3,r0,r1
0x3740: bne	0x36d6
0x3742: tst	r11,#0x40
0x3746: beq	0x36d6
0x3748: cmp	r7,#0x0
0x374a: bne	0x36d6
0x374c: bic	r2,r11,#0x11
0x3750: uxth	r5, r2
0x3752: mov	r11,r7
0x3754: str	r7,[sp,#0x4]
0x3756: movw	r1,#0x406
0x375a: ands.w	r2,r5,r1
0x375e: itt	ne
0x3760: add.ne.w	r11,r11,#0x1
0x3764: mov.ne	r2,#0x0
0x3766: b	0x37c2
0x3756: movw	r1,#0x406
0x375a: ands.w	r2,r5,r1
0x375e: itt	ne
0x3760: add.ne.w	r11,r11,#0x1
0x3764: mov.ne	r2,#0x0
0x3766: b	0x37c2
0x3768: bic	r2,r11,#0x10
0x376c: uxth.w	r11, r2
0x3770: movs	r3,#0xa
0x3772: ands	r12,r11,#0x80
0x3776: beq	0x380c
0x3772: ands	r12,r11,#0x80
0x3776: beq	0x380c
0x3778: ands	r1,r11,#0x200
0x377c: ittte	ne
0x377e: add.ne	r5,#0x7
0x3780: bic.ne	r5,r5,#0x7
0x3784: mov.ne	r10,r5
0x3786: mov.eq	r10,r5
0x3788: itte	ne
0x378a: ldr.ne.w	r0,[r10],#0x8
0x378e: ldr.ne	r1,[r5,#0x4]
0x3790: ldr.eq.w	r0,[r10],#0x4
0x3794: orrs.w	r5,r0,r1
0x3798: bne	0x3826
0x3794: orrs.w	r5,r0,r1
0x3798: bne	0x3826
0x379a: bic	r5,r11,#0x16
0x379e: tst	r11,#0x40
0x37a2: uxth	r5, r5
0x37a4: beq	0x382c
0x37a6: cmp	r7,#0x0
0x37a8: bne	0x382c
0x37aa: bic	r2,r11,#0x17
0x37ae: uxth	r5, r2
0x37b0: str	r7,[sp,#0x4]
0x37b2: ands	r2,r5,#0x10
0x37b6: beq	0x384a
0x37b2: ands	r2,r5,#0x10
0x37b6: beq	0x384a
0x37b8: ldr	r3,[sp,#0x4]
0x37ba: cmp	r6,#0x0
0x37bc: bne	0x3844
0x37be: add.w	r11,r3,#0x1
0x37c2: lsls	r1,r5,#0x1c
0x37c4: bmi	0x387c
0x37c2: lsls	r1,r5,#0x1c
0x37c4: bmi	0x387c
0x37c6: lsls	r3,r5,#0x1f
0x37c8: bpl	0x37d8
0x37ca: cmp	r9,r11
0x37cc: ble	0x38ae
0x37ce: ldr	r1,[sp,#0x4]
0x37d0: sub.w	r3,r9,r11
0x37d4: adds	r7,r3,r1
0x37d6: mov	r11,r9
0x37d8: mov	r3,r11
0x37da: b	0x3870
0x37d8: mov	r3,r11
0x37da: b	0x3870
0x37dc: orr	r11,r11,#0x10
0x37e0: movs	r3,#0x10
0x37e2: movs	r6,#0x78
0x37e4: b	0x3772
0x37e6: cmp	r3,#0x78
0x37e8: bne	0x37f4
0x37ea: rsb.w	r3,r6,#0x78
0x37ee: orr	r3,r3,#0x10
0x37f2: b	0x3772
0x37f4: ldr	r3,[sp,#0x8]
0x37f6: mov	r1,r8
0x37f8: movs	r0,#0x25
0x37fa: blx	r3
0x37fc: cmp	r0,#0x0
0x37fe: blt.w	0x3690
0x3802: adds	r4,#0x2
0x3804: b	0x3496
0x3806: movs	r3,#0x8
0x3808: movs	r6,#0x0
0x380a: b	0x3772
0x380c: mov	r10,r5
0x380e: ands	r1,r11,#0x100
0x3812: ldr.w	r0,[r10],#0x4
0x3816: beq	0x3794
0x3818: ands	r1,r11,#0x200
0x381c: itte	ne
0x381e: uxtb.ne	r0, r0
0x3820: mov.ne	r1,r12
0x3822: uxth.eq	r0, r0
0x3824: b	0x3794
0x3826: bic	r2,r11,#0x6
0x382a: uxth	r5, r2
0x382c: add.w	r11,sp,#0x18
0x3830: b	0x36dc
0x382c: add.w	r11,sp,#0x18
0x3830: b	0x36dc
0x3832: bic	r5,r5,#0x11
0x3836: uxth	r5, r5
0x3838: mov	r11,r7
0x383a: b	0x3756
0x383c: mov	r5,r1
0x383e: b	0x37b2
0x3840: mov	r3,r7
0x3842: mov	r5,r1
0x3844: add.w	r11,r3,#0x2
0x3848: b	0x37c2
0x3844: add.w	r11,r3,#0x2
0x3848: b	0x37c2
0x384a: ldr.w	r11,[sp,#0x4]
0x384e: b	0x3756
0x3858: strd	r3,r2,[sp,#0x10]
0x385c: mov	r1,r8
0x385e: ldr	r3,[sp,#0x8]
0x3860: movs	r0,#0x20
0x3862: blx	r3
0x3864: cmp	r0,#0x0
0x3866: blt.w	0x3690
0x386a: ldr	r3,[sp,#0x10]
0x386c: ldr	r2,[sp,#0x14]
0x386e: adds	r3,#0x1
0x3870: cmp	r9,r3
0x3872: bgt	0x3858
0x3870: cmp	r9,r3
0x3872: bgt	0x3858
0x3874: sub.w	r1,r4,r11
0x3878: adds	r4,r1,r3
0x387a: mov	r11,r3
0x387c: cbz	r2,0x38c2
0x387c: cbz	r2,0x38c2
0x387e: ldr	r3,[sp,#0x8]
0x3880: mov	r1,r8
0x3882: movs	r0,#0x30
0x3884: blx	r3
0x3886: cmp	r0,#0x0
0x3888: blt.w	0x3690
0x388c: cbnz	r6,0x38b2
0x388e: adds	r4,#0x1
0x3890: add	r7,r4
0x3892: ldr	r3,[sp,#0x4]
0x3894: subs	r1,r7,r4
0x3896: cmp	r1,r3
0x3898: bgt	0x38e4
0x3890: add	r7,r4
0x3892: ldr	r3,[sp,#0x4]
0x3894: subs	r1,r7,r4
0x3896: cmp	r1,r3
0x3898: bgt	0x38e4
0x3892: ldr	r3,[sp,#0x4]
0x3894: subs	r1,r7,r4
0x3896: cmp	r1,r3
0x3898: bgt	0x38e4
0x389a: mov	r5,r3
0x389c: cbnz	r5,0x38f6
0x389c: cbnz	r5,0x38f6
0x389e: ldr	r2,[sp,#0x4]
0x38a0: sub.w	r9,r9,r11
0x38a4: add	r2,r4
0x38a6: mov	r5,r10
0x38a8: mov	r4,r2
0x38aa: add	r9,r2
0x38ac: b	0x391a
0x38a8: mov	r4,r2
0x38aa: add	r9,r2
0x38ac: b	0x391a
0x38ae: ldr	r7,[sp,#0x4]
0x38b0: b	0x37d8
0x38b2: adds	r4,#0x2
0x38b4: mov	r1,r8
0x38b6: mov	r0,r6
0x38b8: ldr	r3,[sp,#0x8]
0x38ba: blx	r3
0x38b8: ldr	r3,[sp,#0x8]
0x38ba: blx	r3
0x38bc: cmp	r0,#0x0
0x38be: bge	0x3890
0x38c0: b	0x3690
0x38c2: movw	r1,#0x406
0x38c6: tst	r5,r1
0x38c8: beq	0x3890
0x38ca: tst	r5,#0x2
0x38ce: ite	ne
0x38d0: mov.ne	r0,#0x2b
0x38d2: mov.eq	r0,#0x20
0x38d4: tst	r5,#0x400
0x38d8: add.w	r4,r4,#0x1
0x38dc: mov	r1,r8
0x38de: it	ne
0x38e0: mov.ne	r0,#0x2d
0x38e2: b	0x38b8
0x38e4: ldr	r3,[sp,#0x8]
0x38e6: mov	r1,r8
0x38e8: movs	r0,#0x30
0x38ea: blx	r3
0x38ec: cmp	r0,#0x0
0x38ee: add.w	r4,r4,#0x1
0x38f2: bge	0x3892
0x38f4: b	0x3690
0x38f6: add	r3,sp,#0x18
0x38f8: subs	r5,#0x1
0x38fa: mov	r1,r8
0x38fc: ldrb	r0,[r3,r5]
0x38fe: ldr	r3,[sp,#0x8]
0x3900: blx	r3
0x3902: cmp	r0,#0x0
0x3904: bge	0x389c
0x3906: b	0x3690
0x3908: ldr	r3,[sp,#0x8]
0x390a: mov	r1,r8
0x390c: movs	r0,#0x20
0x390e: blx	r3
0x3910: cmp	r0,#0x0
0x3912: add.w	r4,r4,#0x1
0x3916: blt.w	0x3690
0x391a: sub.w	r3,r9,r4
0x391e: cmp	r3,#0x0
0x3920: bgt	0x3908
0x3922: b	0x34a4
0x3924: bx	lr
0x3926: add.w	r0,r0,r1, lsl #0x3
0x392a: ldrh	r0,[r0,#0x2]
0x392c: lsrs	r0,r0,#0x1
0x392e: bx	lr
0x3930: push	{ r3, r4, r5, r6, r7, lr }
0x3932: mov	r3,r0
0x3934: bl	0x3926
0x3938: clz	r0,r0
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x0, size=4), Register(name=r0, size=4)])
0x393c: rsb.w	r0,r0,#0x1f
0x3940: add.w	r12,r3,r0, lsl #0x2
0x3944: lsls	r2,r1,#0x3
0x3946: ldr.w	r6,[r12,#0x10]
0x394a: adds	r7,r2,#0x4
0x394c: mov	r4,r1
0x394e: adds	r2,#0x6
0x3950: uxth	r5, r1
0x3952: cbnz	r6,0x396a
0x3954: movs	r1,#0x1
0x3956: lsl.w	r0,r1,r0
0x395a: ldr	r1,[r3,#0xc]
0x395c: orrs	r1,r0
0x395e: str	r1,[r3,#0xc]
0x3960: str.w	r4,[r12,#0x10]
0x3964: strh	r5,[r3,r7]
0x3966: strh	r5,[r3,r2]
0x3968: pop	{ r3, r4, r5, r6, r7, pc }
0x3968: pop	{ r3, r4, r5, r6, r7, pc }
0x396a: lsls	r1,r6,#0x3
0x396c: adds	r1,#0x4
0x396e: ldrh	r0,[r3,r1]
0x3970: strh	r0,[r3,r7]
0x3972: add.w	r0,r3,r0, lsl #0x3
0x3976: strh	r6,[r3,r2]
0x3978: strh	r5,[r0,#0x6]
0x397a: strh	r5,[r3,r1]
0x397c: b	0x3968
0x397e: subs	r2,#0x4
0x3980: push	{ r4, r5, r6, r7, r8, lr  }
0x3984: adds	r4,r1,#0x7
0x3986: add	r1,r2
0x3988: bic	r4,r4,#0x7
0x398c: bic	r1,r1,#0x7
0x3990: subs	r6,r1,r4
0x3992: lsrs	r7,r6,#0x3
0x3994: clz	r2,r7
CallOther(out=Register(name=r2, size=4), in=[Constant(value=0x0, size=4), Register(name=r7, size=4)])
0x3998: rsb.w	r5,r2,#0x24
0x399c: lsls	r5,r5,#0x2
0x399e: mov.w	r8,#0x0
0x39a2: adds	r5,#0x7
0x39a4: rsb.w	r2,r2,#0x20
0x39a8: lsrs	r5,r5,#0x3
0x39aa: str	r4,[r0,#0x0]
0x39ac: mov	r1,r8
0x39ae: str	r7,[r4,#0x8]
0x39b0: str.w	r8,[r4,#0xc]
0x39b4: lsls	r2,r2,#0x2
0x39b6: add.w	r0,r4,#0x10
0x39ba: bl	0x4364
0x39be: lsls	r3,r5,#0x1
0x39c0: orr	r3,r3,#0x1
0x39c4: strh	r3,[r4,#0x2]
0x39c6: add.w	r2,r4,r5, lsl #0x3
0x39ca: subs	r3,r7,r5
0x39cc: lsls	r1,r3,#0x1
0x39ce: strh.w	r8,[r4,#0x0]
0x39d2: strh	r1,[r2,#0x2]
0x39d4: adds	r2,r4,r6
0x39d6: strh.w	r5,[r4,r5,lsl #0x3]
0x39da: strh.w	r8,[r2,#0x2]
0x39de: strh	r3,[r4,r6]
0x39e0: add.w	r3,r4,r7, lsl #0x3
0x39e4: mov	r1,r5
0x39e6: ldrh	r2,[r3,#0x2]
0x39e8: orr	r2,r2,#0x1
0x39ec: strh	r2,[r3,#0x2]
0x39ee: mov	r0,r4
0x39f0: pop.w	{ r4, r5, r6, r7, r8, lr }
0x39f4: b.w	0x3930
0x39f8: movs	r0,#0x0
0x39fa: bx	lr
0x39fc: push	{ r0, r1, r2, r3 }
0x39fe: push	{ r0, r1, r2, lr }
0x3a00: add	r1,sp,#0x10
0x3a02: ldr.w	r0,[r1],#0x4
0x3a06: str	r1,[sp,#0x4]
0x3a08: bl	0x130
0x3a0c: add	sp,#0xc
0x3a0e: pop.w	lr
0x3a12: add	sp,#0x10
0x3a14: bx	lr
0x3a16: ldrh	r3,[r0,#0x18]
0x3a18: ands	r3,r3,#0x7
0x3a1c: bne	0x3a2a
0x3a1e: ldr	r3,[r0,#0x0]
0x3a20: cmp	r3,#0x0
0x3a22: ite	eq
0x3a24: mov.eq	r0,#0x0
0x3a26: mov.ne	r0,#0x3
0x3a28: bx	lr
0x3a2a: cmp	r3,#0x2
0x3a2c: bne	0x3a3a
0x3a2e: ldrh	r0,[r0,#0x1a]
0x3a30: clz	r0,r0
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x0, size=4), Register(name=r0, size=4)])
0x3a34: lsrs	r0,r0,#0x5
0x3a36: lsls	r0,r0,#0x2
0x3a38: bx	lr
0x3a3a: cmp	r3,#0x1
0x3a3c: bne	0x3a4a
0x3a3e: ldr	r3,[r0,#0x0]
0x3a40: cmp	r3,#0x0
0x3a42: ite	eq
0x3a44: mov.eq	r0,#0x0
0x3a46: mov.ne	r0,#0x5
0x3a48: bx	lr
0x3a4a: movs	r0,#0x0
0x3a4c: bx	lr
0x3a4e: push	{ r4, lr }
0x3a50: mov	r4,r1
0x3a52: cbz	r0,0x3a56
0x3a54: cbnz	r1,0x3a5c
0x3a56: mvn	r0,#0x15
0x3a5a: pop	{ r4, pc }
0x3a5a: pop	{ r4, pc }
0x3a5c: adds	r0,r1,#0x4
0x3a5e: bl	0x3b88
0x3a62: cmp	r0,#0x0
0x3a64: bne	0x3a5a
0x3a66: ldr	r3,[r4,#0x8]
0x3a68: cmp	r3,#0x3
0x3a6a: bls	0x3a5a
0x3a6c: b	0x3a56
0x3a6e: push	{ r4, r5, r6, r7, r8, lr  }
0x3a72: mov	r5,r1
0x3a74: mov	r7,r0
0x3a76: mov	r1,r3
0x3a78: adds	r0,r5,#0x4
0x3a7a: mov	r8,r2
0x3a7c: mov	r6,r3
0x3a7e: bl	0x3baa
0x3a82: mov	r4,r0
0x3a84: cbz	r0,0x3a96
0x3a86: mov	r3,r6
0x3a88: mov	r2,r8
0x3a8a: mov	r1,r5
0x3a8c: mov	r0,r7
0x3a8e: mov	r12,r4
0x3a90: pop.w	{ r4, r5, r6, r7, r8, lr }
0x3a94: bx	r12
0x3a96: pop.w	{ r4, r5, r6, r7, r8, pc }
0x3a9a: push	{ r4 }
0x3a9c: mrs	r2,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r2, size=4), in=[Constant(value=0x111, size=4)])
0x3aa0: movs	r4,#0x20
0x3aa2: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x3aa6: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3aaa: str	r1,[r0,#0x14]
0x3aac: pop	{ r4 }
0x3aae: movs	r1,#0x1
0x3ab0: b.w	0x194
0x3ab4: push	{ r3, r4, r5, lr }
0x3ab6: mov	r4,r1
0x3ab8: mov	r5,r0
0x3aba: cbz	r0,0x3ad4
0x3abc: cbz	r1,0x3ad4
0x3abe: ldr	r3,[r1,#0x0]
0x3ac0: cbz	r3,0x3ad4
0x3ac2: ldr	r3,[r1,#0x4]
0x3ac4: cbz	r3,0x3ad4
0x3ac6: movs	r2,#0x1c
0x3ac8: movs	r1,#0x0
0x3aca: bl	0x4364
0x3ace: str	r4,[r5,#0x10]
0x3ad0: movs	r0,#0x0
0x3ad2: pop	{ r3, r4, r5, pc }
0x3ad2: pop	{ r3, r4, r5, pc }
0x3ad4: mvn	r0,#0x15
0x3ad8: b	0x3ad2
0x3ada: push	{ r4, r5, r6, lr }
0x3adc: mov	r5,r0
0x3ade: mov	r6,r1
0x3ae0: bl	0x3a4e
0x3ae4: subs	r4,r0,#0x0
0x3ae6: blt	0x3b12
0x3ae8: mrs	r2,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r2, size=4), in=[Constant(value=0x111, size=4)])
0x3aec: movs	r3,#0x20
0x3aee: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x3af2: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3af6: ldrh	r3,[r5,#0x1a]
0x3af8: ldrh	r4,[r5,#0x18]
0x3afa: movw	r1,#0xffff
0x3afe: cmp	r3,r1
0x3b00: and	r4,r4,#0x7
0x3b04: bne	0x3b16
0x3b06: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x3b0a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3b0e: mvn	r4,#0xa
0x3b12: mov	r0,r4
0x3b14: pop	{ r4, r5, r6, pc }
0x3b12: mov	r0,r4
0x3b14: pop	{ r4, r5, r6, pc }
0x3b16: cmp	r4,#0x2
0x3b18: bne	0x3b34
0x3b1a: adds	r3,#0x1
0x3b1c: strh	r3,[r5,#0x1a]
0x3b1e: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x3b22: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3b26: movs	r3,#0x0
0x3b28: mov	r2,r4
0x3b2a: mov	r1,r6
0x3b2c: mov	r0,r5
0x3b2e: bl	0x3a6e
0x3b32: b	0x3b12
0x3b34: cmp	r4,#0x6
0x3b36: bhi	0x3b62
0x3b38: tbb	[0x3b3c,r4]
0x3b44: movs	r3,#0x0
0x3b46: str	r3,[r6,#0x0]
0x3b48: ldr	r3,[r5,#0x4]
0x3b4a: cbnz	r3,0x3b5c
0x3b4c: strd	r6,r6,[r5,#0x0]
0x3b50: cbnz	r4,0x3b7e
0x3b50: cbnz	r4,0x3b7e
0x3b52: movs	r1,#0x2
0x3b54: mov	r0,r5
0x3b56: bl	0x194
0x3b5a: b	0x3b12
0x3b5c: str	r6,[r3,#0x0]
0x3b5e: str	r6,[r5,#0x4]
0x3b60: b	0x3b50
0x3b62: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x3b66: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3b6a: mvn	r4,#0x4
0x3b6e: b	0x3b12
0x3b70: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x3b74: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3b78: mvn	r4,#0x85
0x3b7c: b	0x3b12
0x3b7e: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x3b82: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3b86: b	0x3b12
0x3b88: mov	r3,r0
0x3b8a: cbz	r0,0x3ba4
0x3b8c: ldr	r2,[r0,#0x4]
0x3b8e: and	r2,r2,#0x3
0x3b92: cmp	r2,#0x1
0x3b94: beq	0x3b9e
0x3b96: cmp	r2,#0x3
0x3b98: bne	0x3ba4
0x3b9a: ldr	r2,[r0,#0x0]
0x3b9c: cbz	r2,0x3ba4
0x3b9e: movs	r0,#0x0
0x3ba0: str	r0,[r3,#0x8]
0x3ba2: bx	lr
0x3ba4: mvn	r0,#0x15
0x3ba8: bx	lr
0x3baa: ldr	r2,[r0,#0x4]
0x3bac: str	r1,[r0,#0x8]
0x3bae: and	r2,r2,#0x3
0x3bb2: cmp	r2,#0x3
0x3bb4: mov.w	r2,#0x0
0x3bb8: mov	r3,r0
0x3bba: ite	eq
0x3bbc: ldr.eq	r0,[r0,#0x0]
0x3bbe: mov.ne	r0,r2
0x3bc0: str	r2,[r3,#0x4]
0x3bc2: bx	lr
0x3bc4: bx	lr
0x3bc6: cmp	r0,#0x1
0x3bc8: bne	0x3bce
0x3bca: mrs	r3,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x3bce: b.w	0x2804
0x3bce: b.w	0x2804
0x3bd2: mov	r1,r0
0x3bd4: ldr	r0,[r0,#0x0]
0x3bd6: b.w	0x3bc6
0x3bda: push	{ r3, lr }
0x3bdc: bl	0x3bc
0x3be0: pop.w	{ r3, lr }
0x3be4: b.w	0x404
0x3be8: movs	r1,#0x0
0x3bea: movs	r0,#0x1
0x3bec: b.w	0x3bc6
0x3bf2: cpsie	i
CallOther(in=[Constant(value=0x1e, size=4)])
0x3bf4: msr	basepri,r0
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r0, size=4)])
0x3bf8: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3bfc: bx	lr
0x3bfe: cpsid	i
CallOther(in=[Constant(value=0x21, size=4)])
0x3c00: movs	r3,#0x0
0x3c02: msr	basepri,r3
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x3c06: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3c0a: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0x3c0e: wfi	
CallOther(in=[Constant(value=0x31, size=4)])
0x3c10: cpsie	i
CallOther(in=[Constant(value=0x1e, size=4)])
0x3c12: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3c16: bx	lr
0x3c18: cpsid	i
CallOther(in=[Constant(value=0x21, size=4)])
0x3c1a: movs	r3,#0x0
0x3c1c: msr	basepri,r3
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x3c20: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3c24: dsb	#0xf
CallOther(in=[Constant(value=0x2e, size=4), Constant(value=0xf, size=1)])
0x3c28: wfe	
CallOther(in=[Constant(value=0x30, size=4)])
0x3c2a: msr	basepri,r0
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r0, size=4)])
0x3c2e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3c32: cpsie	i
CallOther(in=[Constant(value=0x1e, size=4)])
0x3c34: bx	lr
0x3c36: cmp	r0,#0x20
0x3c38: bls	0x3c4e
0x3c3a: cmp.w	r0,#0x80000000
0x3c3e: bhi	0x3c52
0x3c40: subs	r0,#0x1
0x3c42: clz	r0,r0
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x0, size=4), Register(name=r0, size=4)])
0x3c46: rsb.w	r0,r0,#0x1f
0x3c4a: lsls	r0,r0,#0x1
0x3c4c: bx	lr
0x3c4e: movs	r0,#0x8
0x3c50: bx	lr
0x3c52: movs	r0,#0x3e
0x3c54: bx	lr
0x3c56: push	{ r3, lr }
0x3c58: bl	0xc54
0x3c5c: movs	r0,#0x0
0x3c5e: pop	{ r3, pc }
0x3c60: ldr	r3,[r0,#0x10]
0x3c62: uxtb	r1, r1
0x3c64: movs	r2,#0xc
0x3c66: mla	r3,r1,r2,r3
0x3c6a: ldr	r0,[r3,#0x40]
0x3c6c: and	r0,r0,#0x7
0x3c70: bx	lr
0x3c72: push	{ r4, r5, r6, lr }
0x3c74: uxtb	r1, r1
0x3c76: ldr	r3,[r0,#0x10]
0x3c78: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x3c7c: movs	r4,#0x20
0x3c7e: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x3c82: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3c86: movs	r6,#0xc
0x3c88: mla	r4,r6,r1,r3
0x3c8c: ldr	r4,[r4,#0x40]
0x3c8e: ands	r4,r4,#0xc0
0x3c92: beq	0x3ca6
0x3c94: cmp	r2,r4
0x3c96: beq	0x3ca6
0x3c98: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x3c9c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3ca0: mov.w	r0,#0xffffffff
0x3ca4: pop	{ r4, r5, r6, pc }
0x3ca4: pop	{ r4, r5, r6, pc }
0x3ca6: mla	r3,r6,r1,r3
0x3caa: movs	r2,#0x1
0x3cac: str	r2,[r3,#0x40]
0x3cae: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x3cb2: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3cb6: ldr	r3,[r0,#0x4]
0x3cb8: add.w	r3,r3,r1, lsl #0x3
0x3cbc: ldr	r3,[r3,#0x4]
0x3cbe: blx	r3
0x3cc0: movs	r0,#0x0
0x3cc2: b	0x3ca4
0x3cc4: movs	r2,#0x80
0x3cc6: b.w	0x3c72
0x3cca: push	{ r3, r4, r5, r6, r7, lr }
0x3ccc: ldr	r7,[sp,#0x18]
0x3cce: ldr	r4,[r0,#0x10]
0x3cd0: uxtb	r1, r1
0x3cd2: mrs	r6,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r6, size=4), in=[Constant(value=0x111, size=4)])
0x3cd6: movs	r5,#0x20
0x3cd8: msr	basepri_max,r5
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x3cdc: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3ce0: movs	r5,#0xc
0x3ce2: mla	r4,r5,r1,r4
0x3ce6: ldr	r5,[r4,#0x40]
0x3ce8: and	r12,r5,#0x7
0x3cec: cmp.w	r12,#0x1
0x3cf0: bne	0x3d0c
0x3cf2: str	r7,[r4,#0x40]
0x3cf4: msr	basepri,r6
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r6, size=4)])
0x3cf8: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3cfc: strd	r2,r3,[r4,#0x38]
0x3d00: ldr	r3,[r0,#0x4]
0x3d02: ldr.w	r3,[r3,r1,lsl #0x3]
0x3d06: blx	r3
0x3d08: movs	r0,#0x0
0x3d0a: pop	{ r3, r4, r5, r6, r7, pc }
0x3d0a: pop	{ r3, r4, r5, r6, r7, pc }
0x3d0c: and	r5,r5,#0xc0
0x3d10: cmp	r7,r5
0x3d12: msr	basepri,r6
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r6, size=4)])
0x3d16: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3d1a: ite	eq
0x3d1c: mvn.eq	r0,#0x77
0x3d20: mov.ne.w	r0,#0xffffffff
0x3d24: b	0x3d0a
0x3d26: push	{ r0, r1, r4, lr }
0x3d28: movs	r4,#0x80
0x3d2a: str	r4,[sp,#0x0]
0x3d2c: bl	0x3cca
0x3d30: add	sp,#0x8
0x3d32: pop	{ r4, pc }
0x3d34: push	{ r4 }
0x3d36: ldr	r0,[r0,#0x10]
0x3d38: uxtb	r3, r1
0x3d3a: movs	r4,#0x1c
0x3d3c: mla	r0,r3,r4,r0
0x3d40: movs	r1,#0x0
0x3d42: pop	{ r4 }
0x3d44: bx	r2
0x3d46: movs	r0,#0x0
0x3d48: b.w	0x1ea0
0x3d4c: movs	r0,#0x0
0x3d4e: b.w	0x3f1e
0x3d52: mov	r0,r2
0x3d54: b.w	0x2a88
0x3d58: ldr	r3,[r0,#0x4]
0x3d5a: ldr	r3,[r3,#0x4]
0x3d5c: ldr.w	r3,[r3,#0x510]
0x3d60: str	r3,[r1,#0x0]
0x3d62: movs	r0,#0x0
0x3d64: bx	lr
0x3d66: ldr	r3,[r0,#0x4]
0x3d68: ldr	r3,[r3,#0x4]
0x3d6a: and.w	r0,r2,r1
0x3d6e: bic.w	r1,r1,r2
0x3d72: str.w	r0,[r3,#0x508]
0x3d76: str.w	r1,[r3,#0x50c]
0x3d7a: movs	r0,#0x0
0x3d7c: bx	lr
0x3d7e: ldr	r3,[r0,#0x4]
0x3d80: ldr	r3,[r3,#0x4]
0x3d82: movs	r0,#0x0
0x3d84: str.w	r1,[r3,#0x508]
0x3d88: bx	lr
0x3d8a: ldr	r3,[r0,#0x4]
0x3d8c: ldr	r3,[r3,#0x4]
0x3d8e: movs	r0,#0x0
0x3d90: str.w	r1,[r3,#0x50c]
0x3d94: bx	lr
0x3d96: ldr	r3,[r0,#0x4]
0x3d98: ldr	r2,[r3,#0x4]
0x3d9a: ldr.w	r3,[r2,#0x504]
0x3d9e: bic.w	r0,r1,r3
0x3da2: ands	r3,r1
0x3da4: str.w	r0,[r2,#0x508]
0x3da8: str.w	r3,[r2,#0x50c]
0x3dac: movs	r0,#0x0
0x3dae: bx	lr
0x3db0: push	{ r4, lr }
0x3db2: ldr	r3,[r0,#0x10]
0x3db4: ldr	r0,[r3,#0x4]
0x3db6: cbz	r0,0x3df8
0x3db8: cmp	r0,r1
0x3dba: bne	0x3df0
0x3dbc: ldr	r4,[r3,#0x8]
0x3dbe: ldr	r0,[r1,#0x0]
0x3dc0: str	r0,[r3,#0x4]
0x3dc2: cmp	r1,r4
0x3dc4: bne	0x3dc8
0x3dc6: str	r0,[r3,#0x8]
0x3dc8: movs	r0,#0x0
0x3dca: str	r0,[r1,#0x0]
0x3dcc: cbz	r2,0x3dda
0x3dc8: movs	r0,#0x0
0x3dca: str	r0,[r1,#0x0]
0x3dcc: cbz	r2,0x3dda
0x3dce: ldr	r2,[r3,#0x4]
0x3dd0: str	r2,[r1,#0x0]
0x3dd2: ldr	r2,[r3,#0x8]
0x3dd4: str	r1,[r3,#0x4]
0x3dd6: cbnz	r2,0x3dda
0x3dd8: str	r1,[r3,#0x8]
0x3dda: movs	r0,#0x0
0x3ddc: b	0x3e00
0x3dda: movs	r0,#0x0
0x3ddc: b	0x3e00
0x3dde: cmp	r1,r0
0x3de0: bne	0x3df0
0x3de2: ldr	r0,[r1,#0x0]
0x3de4: str	r0,[r4,#0x0]
0x3de6: ldr	r0,[r3,#0x8]
0x3de8: cmp	r1,r0
0x3dea: bne	0x3dc8
0x3dec: str	r4,[r3,#0x8]
0x3dee: b	0x3dc8
0x3df0: mov	r4,r0
0x3df2: ldr	r0,[r0,#0x0]
0x3df4: cmp	r0,#0x0
0x3df6: bne	0x3dde
0x3df8: cmp	r2,#0x0
0x3dfa: bne	0x3dce
0x3dfc: mvn	r0,#0x15
0x3e00: pop	{ r4, pc }
0x3e00: pop	{ r4, pc }
0x3e02: push	{ r4, r5, lr }
0x3e04: ldr	r3,[r0,#0x4]
0x3e06: str	r3,[r2,#0x0]
0x3e08: ldrb	r5,[r0,#0x8]
0x3e0a: ldr	r4,[r0,#0x4]
0x3e0c: add.w	r4,r4,r5, lsl #0x3
0x3e10: cmp	r3,r4
0x3e12: bcc	0x3e1a
0x3e06: str	r3,[r2,#0x0]
0x3e08: ldrb	r5,[r0,#0x8]
0x3e0a: ldr	r4,[r0,#0x4]
0x3e0c: add.w	r4,r4,r5, lsl #0x3
0x3e10: cmp	r3,r4
0x3e12: bcc	0x3e1a
0x3e14: mvn	r0,#0x1
0x3e18: pop	{ r4, r5, pc }
0x3e18: pop	{ r4, r5, pc }
0x3e1a: ldrb	r4,[r3,#0x5]
0x3e1c: cmp	r4,r1
0x3e1e: beq	0x3e24
0x3e20: adds	r3,#0x8
0x3e22: b	0x3e06
0x3e24: movs	r0,#0x0
0x3e26: b	0x3e18
0x3e28: ldr	r3,[r0,#0x4]
0x3e2a: ldr	r3,[r3,#0x0]
0x3e2c: ldr.w	r0,[r3,#0x480]
0x3e30: str.w	r0,[r3,#0x480]
0x3e34: bx	lr
0x3e36: ldr	r3,[r0,#0x4]
0x3e38: ldr	r2,[r0,#0x10]
0x3e3a: ldr	r3,[r3,#0x0]
0x3e3c: ldr.w	r0,[r3,#0x110]
0x3e40: cbz	r0,0x3e58
0x3e42: ldr	r2,[r2,#0xc]
0x3e44: movs	r0,#0x0
0x3e46: ldrb	r2,[r2,#0x0]
0x3e48: strb	r2,[r1,#0x0]
0x3e4a: str.w	r0,[r3,#0x110]
0x3e4e: ldr.w	r2,[r3,#0x110]
0x3e52: movs	r2,#0x1
0x3e54: str	r2,[r3,#0x0]
0x3e56: bx	lr
0x3e58: mov.w	r0,#0xffffffff
0x3e5c: bx	lr
0x3e5e: ldr	r2,[r0,#0x0]
0x3e60: mov	r3,r0
0x3e62: ldr.w	r0,[r2,#0x158]
0x3e66: cbnz	r0,0x3e7a
0x3e68: ldr	r3,[r3,#0x8]
0x3e6a: lsls	r3,r3,#0x1e
0x3e6c: bmi	0x3e7c
0x3e6e: ldr.w	r0,[r2,#0x120]
0x3e72: subs	r0,#0x0
0x3e74: it	ne
0x3e76: mov.ne	r0,#0x1
0x3e78: bx	lr
0x3e7a: movs	r0,#0x1
0x3e7c: bx	lr
0x3e7c: bx	lr
0x3e7e: ldr	r2,[r0,#0x4]
0x3e80: ldr	r3,[r2,#0x0]
0x3e82: ldr.w	r1,[r3,#0x304]
0x3e86: lsls	r1,r1,#0x17
0x3e88: bpl	0x3eba
0x3e8a: ldr.w	r1,[r3,#0x120]
0x3e8e: cbz	r1,0x3eba
0x3e90: mrs	r1,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r1, size=4), in=[Constant(value=0x111, size=4)])
0x3e94: movs	r0,#0x20
0x3e96: msr	basepri_max,r0
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r0, size=4)])
0x3e9a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3e9e: ldr.w	r0,[r3,#0x120]
0x3ea2: cbz	r0,0x3eb2
0x3ea4: movs	r0,#0x0
0x3ea6: str.w	r0,[r3,#0x120]
0x3eaa: ldr.w	r0,[r3,#0x120]
0x3eae: movs	r0,#0x1
0x3eb0: str	r0,[r3,#0xc]
0x3eb2: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x3eb6: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3eba: ldr	r2,[r2,#0x8]
0x3ebc: lsls	r2,r2,#0x1b
0x3ebe: bpl	0x3eea
0x3eb2: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x3eb6: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3eba: ldr	r2,[r2,#0x8]
0x3ebc: lsls	r2,r2,#0x1b
0x3ebe: bpl	0x3eea
0x3eba: ldr	r2,[r2,#0x8]
0x3ebc: lsls	r2,r2,#0x1b
0x3ebe: bpl	0x3eea
0x3ec0: mrs	r2,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r2, size=4), in=[Constant(value=0x111, size=4)])
0x3ec4: movs	r1,#0x20
0x3ec6: msr	basepri_max,r1
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x3eca: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3ece: ldr.w	r1,[r3,#0x158]
0x3ed2: cbz	r1,0x3eda
0x3ed4: movs	r1,#0x0
0x3ed6: str.w	r1,[r3,#0x500]
0x3eda: mov.w	r1,#0x400000
0x3ede: str.w	r1,[r3,#0x308]
0x3ee2: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x3ee6: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3eea: bx	lr
0x3eda: mov.w	r1,#0x400000
0x3ede: str.w	r1,[r3,#0x308]
0x3ee2: msr	basepri,r2
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x3ee6: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x3eea: bx	lr
0x3eec: add.w	r3,r0,#0x50
0x3ef0: lsls	r3,r3,#0x2
0x3ef2: uxth	r3, r3
0x3ef4: add.w	r3,r3,#0x40000000
0x3ef8: add.w	r3,r3,#0x11000
0x3efc: movs	r2,#0x0
0x3efe: str	r2,[r3,#0x0]
0x3f00: ldr	r3,[r3,#0x0]
0x3f02: bx	lr
0x3f04: bx	r0
0x3f06: b.w	0x4030
0x3f0a: lsls	r0,r0,#0x3
0x3f0c: add.w	r0,r0,#0x40000000
0x3f10: add.w	r0,r0,#0x1f000
0x3f14: str.w	r1,[r0,#0x510]
0x3f18: str.w	r2,[r0,#0x514]
0x3f1c: bx	lr
0x3f1e: b.w	0x1d98
0x3f22: push	{ r0, r1, r2, r4, r5, r6, r7, lr }
0x3f24: str	r0,[sp,#0x4]
0x3f26: add	r0,sp,#0x4
0x3f28: ldrd	r4,r7,[sp,#0x20]
0x3f2c: mov	r6,r2
0x3f2e: mov	r5,r3
0x3f30: bl	0x1fb0
0x3f34: ldr	r3,[sp,#0x4]
0x3f36: subs.w	r12,r6,#0x0
0x3f3a: it	ne
0x3f3c: mov.ne.w	r12,#0x1
0x3f40: add.w	r0,r0,r3, lsl #0x2
0x3f44: subs	r3,r1,#0x0
0x3f46: it	ne
0x3f48: mov.ne	r3,#0x1
0x3f4a: cmp	r5,#0x0
0x3f4c: orr.w	r3,r3,r12, lsl #0x1
0x3f50: ite	ne
0x3f52: mov.ne.w	r12,#0xc
0x3f56: mov.eq.w	r12,#0x0
0x3f5a: cmp	r4,#0x0
0x3f5c: orr.w	r3,r3,r12
0x3f60: ite	ne
0x3f62: mov.ne.w	r12,#0x700
0x3f66: mov.eq.w	r12,#0x0
0x3f6a: cmp	r7,#0x0
0x3f6c: orr.w	r3,r3,r12
0x3f70: ldr.w	r2,[r0,#0x700]
0x3f74: ite	ne
0x3f76: mov.ne.w	r12,#0x30000
0x3f7a: mov.eq.w	r12,#0x0
0x3f7e: orr.w	r3,r3,r12
0x3f82: bic.w	r3,r2,r3
0x3f86: cbz	r1,0x3f8a
0x3f88: ldrb	r1,[r1,#0x0]
0x3f8a: cbz	r6,0x3f90
0x3f8a: cbz	r6,0x3f90
0x3f8c: ldrb	r6,[r6,#0x0]
0x3f8e: lsls	r6,r6,#0x1
0x3f90: orrs	r1,r3
0x3f92: cbz	r5,0x3f98
0x3f90: orrs	r1,r3
0x3f92: cbz	r5,0x3f98
0x3f94: ldrb	r5,[r5,#0x0]
0x3f96: lsls	r5,r5,#0x2
0x3f98: orrs	r1,r6
0x3f9a: cbz	r4,0x3fa0
0x3f98: orrs	r1,r6
0x3f9a: cbz	r4,0x3fa0
0x3f9c: ldrb	r4,[r4,#0x0]
0x3f9e: lsls	r4,r4,#0x8
0x3fa0: orrs	r1,r5
0x3fa2: cbz	r7,0x3fa8
0x3fa0: orrs	r1,r5
0x3fa2: cbz	r7,0x3fa8
0x3fa4: ldrb	r7,[r7,#0x0]
0x3fa6: lsls	r7,r7,#0x10
0x3fa8: orrs	r4,r1
0x3faa: orrs	r4,r7
0x3fac: str.w	r4,[r0,#0x700]
0x3fb0: add	sp,#0xc
0x3fb2: pop	{ r4, r5, r6, r7, pc }
0x3fa8: orrs	r4,r1
0x3faa: orrs	r4,r7
0x3fac: str.w	r4,[r0,#0x700]
0x3fb0: add	sp,#0xc
0x3fb2: pop	{ r4, r5, r6, r7, pc }
0x3fb4: push	{ r0, r1, r2, r3, r4, lr }
0x3fb6: add.w	r3,sp,#0xf
0x3fba: str	r3,[sp,#0x4]
0x3fbc: movs	r3,#0x0
0x3fbe: strb.w	r1,[sp,#0xf]
0x3fc2: str	r3,[sp,#0x0]
0x3fc4: mov	r2,r3
0x3fc6: mov	r1,r3
0x3fc8: bl	0x3f22
0x3fcc: add	sp,#0x14
0x3fce: pop.w	pc
0x3fd2: push	{ r3, r4, r5, lr }
0x3fd4: mov	r5,r0
0x3fd6: mov	r0,r1
0x3fd8: mov	r4,r1
0x3fda: bl	0x2054
0x3fde: cbz	r0,0x400e
0x3fe0: mov	r0,r1
0x3fe2: bl	0x203c
0x3fe6: cbnz	r0,0x400e
0x3fe8: mov	r0,r1
0x3fea: bl	0x2024
0x3fee: ldr	r2,[r5,#0x0]
0x3ff0: movs	r3,#0x1
0x3ff2: lsls	r3,r0
0x3ff4: str.w	r3,[r2,#0x308]
0x3ff8: ldr	r2,[r5,#0x0]
0x3ffa: sxth	r3, r0
0x3ffc: add.w	r3,r2,r3, lsl #0x2
0x4000: ldr.w	r2,[r3,#0x510]
0x4004: bic	r2,r2,#0x3
0x4008: str.w	r2,[r3,#0x510]
0x400c: pop	{ r3, r4, r5, pc }
0x400e: mov	r0,r4
0x4010: movs	r1,#0x0
0x4012: pop.w	{ r3, r4, r5, lr }
0x4016: b.w	0x3fb4
0x401a: b.w	0x2160
0x401e: b.w	0x3fd2
0x4022: b.w	0x279c
0x4026: push	{ r3, lr }
0x4028: bl	0x4022
0x402c: movs	r0,#0x0
0x402e: pop	{ r3, pc }
0x4030: cbz	r0,0x4036
0x4032: b.w	0xce0
0x4036: bx	lr
0x4038: bx	lr
0x403a: cbz	r0,0x404e
0x403c: ldr	r3,[r0,#0xc]
0x403e: ldrb	r0,[r3,#0x1]
0x4040: ands	r0,r0,#0x1
0x4044: ittt	ne
0x4046: ldrb.ne	r0,[r3,#0x0]
0x4048: clz.ne	r0,r0
CallOther(out=Register(name=r0, size=4), in=[Constant(value=0x0, size=4), Register(name=r0, size=4)])
0x404c: lsr.ne	r0,r0,#0x5
0x404e: bx	lr
0x404e: bx	lr
0x4050: mrs	r3,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r3, size=4), in=[Constant(value=0x111, size=4)])
0x4054: movs	r3,#0x20
0x4056: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x405a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x405e: b	0x405e
0x405e: b	0x405e
0x4060: push	{ r3, lr }
0x4062: bl	0x4050
0x4066: push	{ r4, lr }
0x4068: ldrd	r3,r4,[r0,#0x0]
0x406c: cbnz	r3,0x407c
0x406e: movs	r0,#0x0
0x4070: ldr	r2,[r4,#0xc]
0x4072: ldrb	r3,[r2,#0x1]
0x4074: orr	r3,r3,#0x1
0x4078: strb	r3,[r2,#0x1]
0x407a: pop	{ r4, pc }
0x4070: ldr	r2,[r4,#0xc]
0x4072: ldrb	r3,[r2,#0x1]
0x4074: orr	r3,r3,#0x1
0x4078: strb	r3,[r2,#0x1]
0x407a: pop	{ r4, pc }
0x407c: mov	r0,r4
0x407e: blx	r3
0x4080: cmp	r0,#0x0
0x4082: beq	0x406e
0x4084: cmp	r0,#0x0
0x4086: it	lt
0x4088: rsb.lt	r0,r0
0x408a: ldr	r3,[r4,#0xc]
0x408c: cmp	r0,#0xff
0x408e: it	ge
0x4090: mov.ge	r0,#0xff
0x4092: strb	r0,[r3,#0x0]
0x4094: b	0x4070
0x4096: b.w	0x4364
0x409a: b.w	0x4348
0x409e: bx	lr
0x40a0: push	{ r3, lr }
0x40a2: movs	r4,#0x20
0x40a4: mrs	r3,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r3, size=4), in=[Constant(value=0x111, size=4)])
0x40a8: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x40ac: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x40b0: bl	0x3bfe
0x40a4: mrs	r3,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r3, size=4), in=[Constant(value=0x111, size=4)])
0x40a8: msr	basepri_max,r4
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x40ac: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x40b0: bl	0x3bfe
0x40b4: b	0x40a4
0x40b6: mrs	r0,ipsr
CallOther(out=Varnode(space=unique, offset=0x91680, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x91800, size=4), in=[Constant(value=0x112, size=4)])
0x40ba: subs	r0,#0x0
0x40bc: it	ne
0x40be: mov.ne	r0,#0x1
0x40c0: bx	lr
0x40c2: b.w	0x2e54
0x40c6: ldrd	r3,r2,[r0,#0x0]
0x40ca: str	r3,[r2,#0x0]
0x40cc: str	r2,[r3,#0x4]
0x40ce: movs	r3,#0x0
0x40d0: strd	r3,r3,[r0,#0x0]
0x40d4: bx	lr
0x40d6: push	{ r3, lr }
0x40d8: bl	0x40c6
0x40dc: ldrb	r3,[r0,#0xd]
0x40de: bic	r3,r3,#0x2
0x40e2: strb	r3,[r0,#0xd]
0x40e4: movs	r3,#0x0
0x40e6: str	r3,[r0,#0x8]
0x40e8: pop	{ r3, pc }
0x40ea: push	{ r3, r4, r5, lr }
0x40ec: mov	r4,r0
0x40ee: mov	r5,r1
0x40f0: bl	0x2bf0
0x40f4: ldrb	r3,[r4,#0xd]
0x40f6: orr	r3,r3,#0x2
0x40fa: strb	r3,[r4,#0xd]
0x40fc: cbz	r5,0x4138
0x40fe: str	r5,[r4,#0x8]
0x4100: ldr	r3,[r5,#0x0]
0x4102: cmp	r5,r3
0x4104: bne	0x411a
0x4106: ldr	r3,[r5,#0x4]
0x4108: strd	r5,r3,[r4,#0x0]
0x410c: str	r4,[r3,#0x0]
0x410e: str	r4,[r5,#0x4]
0x4110: b	0x4138
0x4112: ldr	r2,[r5,#0x4]
0x4114: cmp	r2,r3
0x4116: beq	0x4106
0x4118: ldr	r3,[r3,#0x0]
0x411a: cmp	r3,#0x0
0x411c: beq	0x4106
0x411a: cmp	r3,#0x0
0x411c: beq	0x4106
0x411e: ldrsb.w	r2,[r4,#0xe]
0x4122: ldrsb.w	r1,[r3,#0xe]
0x4126: cmp	r2,r1
0x4128: beq	0x4112
0x412a: cmp	r1,r2
0x412c: ble	0x4112
0x412e: ldr	r2,[r3,#0x4]
0x4130: strd	r3,r2,[r4,#0x0]
0x4134: str	r4,[r2,#0x0]
0x4136: str	r4,[r3,#0x4]
0x4138: pop	{ r3, r4, r5, pc }
0x4138: pop	{ r3, r4, r5, pc }
0x413a: push	{ r4, lr }
0x413c: mrs	r4,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r4, size=4), in=[Constant(value=0x111, size=4)])
0x4140: movs	r3,#0x20
0x4142: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x4146: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x414a: bl	0x2c20
0x414e: msr	basepri,r4
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x4152: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4156: pop	{ r4, pc }
0x4158: push	{ r4, lr }
0x415a: mov	r4,r0
0x415c: adds	r0,#0x18
0x415e: bl	0x4250
0x4162: mrs	r1,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r1, size=4), in=[Constant(value=0x111, size=4)])
0x4166: movs	r3,#0x20
0x4168: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x416c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4170: ldrb	r2,[r4,#0xd]
0x4172: ands	r2,r2,#0x10
0x4176: beq	0x4182
0x4178: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x417c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4180: pop	{ r4, pc }
0x4182: mov	r0,r4
0x4184: pop.w	{ r4, lr }
0x4188: b.w	0x2c88
0x418c: push	{ r3, r4, r5, lr }
0x418e: mov	r4,r0
0x4190: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x4194: movs	r3,#0x20
0x4196: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x419a: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x419e: ldrb	r3,[r0,#0xd]
0x41a0: tst	r3,#0x28
0x41a4: bne	0x41be
0x41a6: ldr	r3,[r0,#0x8]
0x41a8: cbz	r3,0x41ae
0x41aa: bl	0x40d6
0x41ae: ldrb	r3,[r4,#0xd]
0x41b0: cbnz	r1,0x41c8
0x41b2: and	r3,r3,#0xfb
0x41b6: strb	r3,[r4,#0xd]
0x41b8: mov	r0,r4
0x41ba: bl	0x2c20
0x41b6: strb	r3,[r4,#0xd]
0x41b8: mov	r0,r4
0x41ba: bl	0x2c20
0x41be: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x41c2: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x41c6: pop	{ r3, r4, r5, pc }
0x41c8: and	r3,r3,#0xeb
0x41cc: b	0x41b6
0x41ce: movs	r1,#0x1
0x41d0: subs	r0,#0x18
0x41d2: b.w	0x418c
0x41d6: push	{ r3, r4, r5, lr }
0x41d8: mrs	r5,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r5, size=4), in=[Constant(value=0x111, size=4)])
0x41dc: movs	r3,#0x20
0x41de: msr	basepri_max,r3
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x41e2: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x41e6: ldr	r4,[r0,#0x0]
0x41e8: cmp	r0,r4
0x41ea: beq	0x4208
0x41ec: cbz	r4,0x41fc
0x41ee: mov	r0,r4
0x41f0: bl	0x40d6
0x41f4: add.w	r0,r4,#0x18
0x41f8: bl	0x4250
0x41fc: msr	basepri,r5
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r5, size=4)])
0x4200: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4204: mov	r0,r4
0x4206: pop	{ r3, r4, r5, pc }
0x4208: movs	r4,#0x0
0x420a: b	0x41fc
0x420c: mrs	r1,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r1, size=4), in=[Constant(value=0x111, size=4)])
0x4210: movs	r2,#0x20
0x4212: msr	basepri_max,r2
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x4216: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x421a: ldrb	r2,[r0,#0xc]
0x421c: lsls	r2,r2,#0x1f
0x421e: bpl	0x423a
0x4220: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x4224: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4228: movs	r3,#0x0
0x422a: msr	basepri,r3
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r3, size=4)])
0x422e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4232: movs	r3,#0x4
0x4234: mov	r0,r3
0x4236: svc	0x2
CallOther(in=[Constant(value=0x10, size=4), Constant(value=0x2, size=4)])
0x4238: bx	lr
0x423a: ldrb	r3,[r0,#0xd]
0x423c: lsls	r3,r3,#0x1c
0x423e: bpl	0x424a
0x4240: msr	basepri,r1
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r1, size=4)])
0x4244: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4248: bx	lr
0x424a: movs	r2,#0x1
0x424c: b.w	0x2c88
0x4250: push	{ r4, lr }
0x4252: mrs	r4,basepri
CallOther(out=Varnode(space=unique, offset=0x91d00, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Register(name=r4, size=4), in=[Constant(value=0x111, size=4)])
0x4256: movs	r2,#0x20
0x4258: msr	basepri_max,r2
CallOther(out=Varnode(space=unique, offset=0x93000, size=1), in=[Constant(value=0x27, size=4)])
CallOther(out=Varnode(space=unique, offset=0x93200, size=4), in=[Constant(value=0x111, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r2, size=4)])
0x425c: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4260: ldr	r3,[r0,#0x0]
0x4262: cbz	r3,0x4274
0x4264: bl	0x31d0
0x4268: movs	r0,#0x0
0x426a: msr	basepri,r4
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x426e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4272: pop	{ r4, pc }
0x426a: msr	basepri,r4
CallOther(out=Varnode(space=unique, offset=0x92e80, size=1), in=[Constant(value=0x27, size=4)])
CallOther(in=[Constant(value=0x117, size=4), Register(name=r4, size=4)])
0x426e: isb	#0xf
CallOther(in=[Constant(value=0x33, size=4), Constant(value=0xf, size=1)])
0x4272: pop	{ r4, pc }
0x4274: mvn	r0,#0x15
0x4278: b	0x426a
0x427a: push	{ r3, lr }
0x427c: bl	0x340c
0x4280: pop	{ r3, pc }
0x4282: push	{ r4, lr }
0x4284: mov	r2,r0
0x4286: add	r1,r0
0x4288: cmp	r2,r1
0x428a: mov	r3,r2
0x428c: beq	0x4296
0x4288: cmp	r2,r1
0x428a: mov	r3,r2
0x428c: beq	0x4296
0x428e: ldrb	r4,[r3,#0x0]
0x4290: adds	r2,#0x1
0x4292: cmp	r4,#0x0
0x4294: bne	0x4288
0x4296: subs	r0,r3,r0
0x4298: pop	{ r4, pc }
0x429a: push	{ r4, r5, r6, r7, lr }
0x429c: rsb.w	r7,r3,#0x37
0x42a0: mov	r4,r0
0x42a2: uxtb	r7, r7
0x42a4: and	r3,r3,#0x1f
0x42a8: mov	r0,r2
0x42aa: cmp	r3,#0x8
0x42ac: uxtb	r6, r4
0x42ae: beq	0x4318
0x42aa: cmp	r3,#0x8
0x42ac: uxtb	r6, r4
0x42ae: beq	0x4318
0x42b0: cmp	r3,#0x10
0x42b2: beq	0x4332
0x42b4: lsrs	r5,r4,#0x1
0x42b6: lsrs	r4,r4,#0x2
0x42b8: orr.w	r4,r4,r1, lsl #0x1e
0x42bc: orr.w	r5,r5,r1, lsl #0x1f
0x42c0: adds	r5,r5,r4
0x42c2: lsr.w	r2,r1,#0x2
0x42c6: adc.w	r2,r2,r1, lsr #0x1
0x42ca: lsrs	r1,r5,#0x4
0x42cc: orr.w	r1,r1,r2, lsl #0x1c
0x42d0: adds	r5,r5,r1
0x42d2: adc.w	r2,r2,r2, lsr #0x4
0x42d6: lsrs	r1,r5,#0x8
0x42d8: orr.w	r1,r1,r2, lsl #0x18
0x42dc: adds	r5,r5,r1
0x42de: adc.w	r2,r2,r2, lsr #0x8
0x42e2: lsrs	r1,r5,#0x10
0x42e4: orr.w	r1,r1,r2, lsl #0x10
0x42e8: adds	r5,r5,r1
0x42ea: adc.w	r2,r2,r2, lsr #0x10
0x42ee: adds	r5,r5,r2
0x42f0: adc	r2,r2,#0x0
0x42f4: lsrs	r4,r5,#0x3
0x42f6: orr.w	r4,r4,r2, lsl #0x1d
0x42fa: lsrs	r1,r2,#0x3
0x42fc: add.w	r2,r4,r4, lsl #0x2
0x4300: sub.w	r5,r6,r2, lsl #0x1
0x4304: uxtb	r5, r5
0x4306: cmp	r5,#0x9
0x4308: bls	0x4324
0x430a: adds	r4,#0x1
0x430c: sub.w	r5,r5,#0xa
0x4310: adc	r1,r1,#0x0
0x4314: uxtb	r5, r5
0x4316: b	0x433e
0x4318: lsrs	r4,r4,#0x3
0x431a: orr.w	r4,r4,r1, lsl #0x1d
0x431e: and	r5,r6,#0x7
0x4322: lsrs	r1,r1,#0x3
0x4324: adds	r5,#0x30
0x4326: orrs.w	r2,r4,r1
0x432a: strb.w	r5,[r0],#0x1
0x432e: bne	0x42aa
0x4324: adds	r5,#0x30
0x4326: orrs.w	r2,r4,r1
0x432a: strb.w	r5,[r0],#0x1
0x432e: bne	0x42aa
0x4330: pop	{ r4, r5, r6, r7, pc }
0x4332: lsrs	r4,r4,#0x4
0x4334: orr.w	r4,r4,r1, lsl #0x1c
0x4338: and	r5,r6,#0xf
0x433c: lsrs	r1,r1,#0x4
0x433e: cmp	r5,#0x9
0x4340: itt	hi
0x4342: add.hi	r5,r5,r7
0x4344: uxtb.hi	r5, r5
0x4346: b	0x4324
0x433e: cmp	r5,#0x9
0x4340: itt	hi
0x4342: add.hi	r5,r5,r7
0x4344: uxtb.hi	r5, r5
0x4346: b	0x4324
0x4348: add	r2,r1
0x434a: cmp	r1,r2
0x434c: add.w	r3,r0,#0xffffffff
0x4350: bne	0x4354
0x4352: bx	lr
0x4354: push	{ r4, lr }
0x4356: ldrb.w	r4,[r1],#0x1
0x435a: strb.w	r4,[r3,#0x1]!
0x435e: cmp	r1,r2
0x4360: bne	0x4356
0x4356: ldrb.w	r4,[r1],#0x1
0x435a: strb.w	r4,[r3,#0x1]!
0x435e: cmp	r1,r2
0x4360: bne	0x4356
0x4362: pop	{ r4, pc }
0x4364: add	r2,r0
0x4366: mov	r3,r0
0x4368: cmp	r3,r2
0x436a: bne	0x436e
0x4368: cmp	r3,r2
0x436a: bne	0x436e
0x436c: bx	lr
0x436e: strb.w	r1,[r3],#0x1
0x4372: b	0x4368
0x4374: ldr	r0,[0x437c]
0x4376: ldr	r0,[r0,#0x0]
0x4378: bx	lr
